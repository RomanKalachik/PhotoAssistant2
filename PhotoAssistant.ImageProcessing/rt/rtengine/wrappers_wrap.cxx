/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_libPhotoAssistantImageProcessing(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_libPhotoAssistantImageProcessing(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_libPhotoAssistantImageProcessing(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include "rt_math.h"
#include "procparams.h"
#include "procevents.h"
#include "../rtexif/rtexif.h"
#include "rawmetadatalocation.h"
#include "iimage.h"
#include "utils.h"
#include "settings.h"
#include "LUT.h"
#include "rtengine.h"
#include "colortemp.h"
#include "coord2d.h"
#include "dcp.h"
#include "imagedata.h"
#include "image8.h"
#include "image16.h"
#include "imagefloat.h"
#include "imagesource.h"
#include "rawimagesource.h"
#include "previewimage.h"
using namespace std;
using namespace rtengine;
//using namespace rtexif;
//using namespace procparams;


#include <glibmm/ustring.h>
#define SWIGSTDCALL __stdcall
#define SWIGEXPORT __declspec(dllexport)


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_MAXVAL_get() {
  int jresult ;
  int result;
  
  result = (int)(int)rtengine::MAXVAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MAXVALF_get() {
  float jresult ;
  float result;
  
  result = (float)(float)rtengine::MAXVALF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAXVALD_get() {
  double jresult ;
  double result;
  
  result = (double)(double)rtengine::MAXVALD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_autoexp_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoexp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneCurveParams_autoexp_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (bool) ((arg1)->autoexp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_clip_set(void * jarg1, double jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->clip = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ToneCurveParams_clip_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (double) ((arg1)->clip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_hrenabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hrenabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneCurveParams_hrenabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (bool) ((arg1)->hrenabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ToneCurveParams_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_expcomp_set(void * jarg1, double jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->expcomp = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ToneCurveParams_expcomp_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (double) ((arg1)->expcomp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_curve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->curve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneCurveParams_curve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->curve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_curve2_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->curve2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneCurveParams_curve2_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->curve2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_curveMode_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  rtengine::procparams::ToneCurveParams::eTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (rtengine::procparams::ToneCurveParams::eTCModeId)jarg2; 
  if (arg1) (arg1)->curveMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_curveMode_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  rtengine::procparams::ToneCurveParams::eTCModeId result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (rtengine::procparams::ToneCurveParams::eTCModeId) ((arg1)->curveMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_curveMode2_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  rtengine::procparams::ToneCurveParams::eTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (rtengine::procparams::ToneCurveParams::eTCModeId)jarg2; 
  if (arg1) (arg1)->curveMode2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_curveMode2_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  rtengine::procparams::ToneCurveParams::eTCModeId result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (rtengine::procparams::ToneCurveParams::eTCModeId) ((arg1)->curveMode2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_brightness_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->brightness = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_brightness_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->brightness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_black_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->black = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_black_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->black);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_contrast_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contrast = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_contrast_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->contrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_saturation_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->saturation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_saturation_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->saturation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_shcompr_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->shcompr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_shcompr_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->shcompr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_hlcompr_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hlcompr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_hlcompr_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->hlcompr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_hlcomprthresh_set(void * jarg1, int jarg2) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hlcomprthresh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneCurveParams_hlcomprthresh_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  result = (int) ((arg1)->hlcomprthresh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneCurveParams() {
  void * jresult ;
  rtengine::procparams::ToneCurveParams *result = 0 ;
  
  result = (rtengine::procparams::ToneCurveParams *)new rtengine::procparams::ToneCurveParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneCurveParams_setDefaults(void * jarg1) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneCurveParams_HLReconstructionNecessary(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LUTu *arg1 = 0 ;
  LUTu *arg2 = 0 ;
  LUTu *arg3 = 0 ;
  bool result;
  
  arg1 = (LUTu *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUTu & type is null", 0);
    return 0;
  } 
  arg2 = (LUTu *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUTu & type is null", 0);
    return 0;
  } 
  arg3 = (LUTu *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUTu & type is null", 0);
    return 0;
  } 
  result = (bool)rtengine::procparams::ToneCurveParams::HLReconstructionNecessary(*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneCurveParams(void * jarg1) {
  rtengine::procparams::ToneCurveParams *arg1 = (rtengine::procparams::ToneCurveParams *) 0 ;
  
  arg1 = (rtengine::procparams::ToneCurveParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_lcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->lcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_lcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->lcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_acurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->acurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_acurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->acurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_bcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->bcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_bcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->bcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_cccurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->cccurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_cccurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->cccurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_chcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->chcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_chcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->chcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_lhcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->lhcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_lhcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->lhcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_hhcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->hhcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_hhcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->hhcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_lccurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->lccurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_lccurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->lccurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_clcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->clcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LCurveParams_clcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->clcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_brightness_set(void * jarg1, int jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->brightness = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LCurveParams_brightness_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (int) ((arg1)->brightness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_contrast_set(void * jarg1, int jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contrast = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LCurveParams_contrast_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (int) ((arg1)->contrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_chromaticity_set(void * jarg1, int jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chromaticity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LCurveParams_chromaticity_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (int) ((arg1)->chromaticity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_avoidcolorshift_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->avoidcolorshift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LCurveParams_avoidcolorshift_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (bool) ((arg1)->avoidcolorshift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_rstprotection_set(void * jarg1, double jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rstprotection = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LCurveParams_rstprotection_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (double) ((arg1)->rstprotection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LCurveParams_lcredsk_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lcredsk = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LCurveParams_lcredsk_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  result = (bool) ((arg1)->lcredsk);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LCurveParams() {
  void * jresult ;
  rtengine::procparams::LCurveParams *result = 0 ;
  
  result = (rtengine::procparams::LCurveParams *)new rtengine::procparams::LCurveParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LCurveParams(void * jarg1) {
  rtengine::procparams::LCurveParams *arg1 = (rtengine::procparams::LCurveParams *) 0 ;
  
  arg1 = (rtengine::procparams::LCurveParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RGBCurvesParams_lumamode_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lumamode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RGBCurvesParams_lumamode_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  result = (bool) ((arg1)->lumamode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RGBCurvesParams_rcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->rcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBCurvesParams_rcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->rcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RGBCurvesParams_gcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->gcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBCurvesParams_gcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->gcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RGBCurvesParams_bcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->bcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBCurvesParams_bcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->bcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RGBCurvesParams() {
  void * jresult ;
  rtengine::procparams::RGBCurvesParams *result = 0 ;
  
  result = (rtengine::procparams::RGBCurvesParams *)new rtengine::procparams::RGBCurvesParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RGBCurvesParams(void * jarg1) {
  rtengine::procparams::RGBCurvesParams *arg1 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  
  arg1 = (rtengine::procparams::RGBCurvesParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorToningParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_autosat_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autosat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorToningParams_autosat_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (bool) ((arg1)->autosat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_opacityCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->opacityCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorToningParams_opacityCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->opacityCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_colorCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->colorCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorToningParams_colorCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->colorCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_satProtectionThreshold_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->satProtectionThreshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorToningParams_satProtectionThreshold_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (int) ((arg1)->satProtectionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_saturatedOpacity_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->saturatedOpacity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorToningParams_saturatedOpacity_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (int) ((arg1)->saturatedOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_strength_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorToningParams_strength_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (int) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_balance_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorToningParams_balance_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (int) ((arg1)->balance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_hlColSat_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->hlColSat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorToningParams_hlColSat_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->hlColSat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_shadowsColSat_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->shadowsColSat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorToningParams_shadowsColSat_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->shadowsColSat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_clcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->clcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorToningParams_clcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->clcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_cl2curve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->cl2curve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorToningParams_cl2curve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->cl2curve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorToningParams_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_twocolor_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->twocolor = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorToningParams_twocolor_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->twocolor);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_redlow_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->redlow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_redlow_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->redlow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_greenlow_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->greenlow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_greenlow_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->greenlow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_bluelow_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluelow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_bluelow_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->bluelow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_redmed_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->redmed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_redmed_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->redmed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_greenmed_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->greenmed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_greenmed_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->greenmed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_bluemed_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluemed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_bluemed_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->bluemed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_redhigh_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->redhigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_redhigh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->redhigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_greenhigh_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->greenhigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_greenhigh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->greenhigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_bluehigh_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluehigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_bluehigh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->bluehigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_satlow_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->satlow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_satlow_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->satlow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_sathigh_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sathigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorToningParams_sathigh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (double) ((arg1)->sathigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_lumamode_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lumamode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorToningParams_lumamode_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  result = (bool) ((arg1)->lumamode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorToningParams() {
  void * jresult ;
  rtengine::procparams::ColorToningParams *result = 0 ;
  
  result = (rtengine::procparams::ColorToningParams *)new rtengine::procparams::ColorToningParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_setDefaults(void * jarg1) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_mixerToCurve(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  ((rtengine::procparams::ColorToningParams const *)arg1)->mixerToCurve(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_slidersToCurve(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  ((rtengine::procparams::ColorToningParams const *)arg1)->slidersToCurve(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_getCurves(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  rtengine::ColorGradientCurve *arg2 = 0 ;
  rtengine::OpacityCurve *arg3 = 0 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  bool *arg6 = 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  arg2 = (rtengine::ColorGradientCurve *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorGradientCurve & type is null", 0);
    return ;
  } 
  arg3 = (rtengine::OpacityCurve *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::OpacityCurve & type is null", 0);
    return ;
  } 
  arg4 = (double (*)[3])jarg4; 
  arg5 = (double (*)[3])jarg5; 
  arg6 = (bool *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  ((rtengine::procparams::ColorToningParams const *)arg1)->getCurves(*arg2,*arg3,(double const (*)[3])arg4,(double const (*)[3])arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_getDefaultColorCurve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::ColorToningParams::getDefaultColorCurve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_getDefaultOpacityCurve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::ColorToningParams::getDefaultOpacityCurve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_getDefaultCLCurve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::ColorToningParams::getDefaultCLCurve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorToningParams_getDefaultCL2Curve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::ColorToningParams::getDefaultCL2Curve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorToningParams(void * jarg1) {
  rtengine::procparams::ColorToningParams *arg1 = (rtengine::procparams::ColorToningParams *) 0 ;
  
  arg1 = (rtengine::procparams::ColorToningParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpeningParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_radius_set(void * jarg1, double jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharpeningParams_radius_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (double) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_amount_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpeningParams_amount_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (int) ((arg1)->amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_threshold_set(void * jarg1, void * jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->threshold = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharpeningParams_threshold_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->threshold);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_edgesonly_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->edgesonly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpeningParams_edgesonly_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (bool) ((arg1)->edgesonly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_edges_radius_set(void * jarg1, double jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->edges_radius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharpeningParams_edges_radius_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (double) ((arg1)->edges_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_edges_tolerance_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edges_tolerance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpeningParams_edges_tolerance_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (int) ((arg1)->edges_tolerance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_halocontrol_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->halocontrol = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpeningParams_halocontrol_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (bool) ((arg1)->halocontrol);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_halocontrol_amount_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->halocontrol_amount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpeningParams_halocontrol_amount_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (int) ((arg1)->halocontrol_amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SharpeningParams_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_deconvamount_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deconvamount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpeningParams_deconvamount_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (int) ((arg1)->deconvamount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_deconvradius_set(void * jarg1, double jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deconvradius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharpeningParams_deconvradius_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (double) ((arg1)->deconvradius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_deconviter_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deconviter = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpeningParams_deconviter_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (int) ((arg1)->deconviter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpeningParams_deconvdamping_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deconvdamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpeningParams_deconvdamping_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  result = (int) ((arg1)->deconvdamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharpeningParams() {
  void * jresult ;
  rtengine::procparams::SharpeningParams *result = 0 ;
  
  result = (rtengine::procparams::SharpeningParams *)new rtengine::procparams::SharpeningParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharpeningParams(void * jarg1) {
  rtengine::procparams::SharpeningParams *arg1 = (rtengine::procparams::SharpeningParams *) 0 ;
  
  arg1 = (rtengine::procparams::SharpeningParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenEdgeParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpenEdgeParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenEdgeParams_passes_set(void * jarg1, int jarg2) {
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->passes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpenEdgeParams_passes_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  result = (int) ((arg1)->passes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenEdgeParams_amount_set(void * jarg1, double jarg2) {
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharpenEdgeParams_amount_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  result = (double) ((arg1)->amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenEdgeParams_threechannels_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->threechannels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpenEdgeParams_threechannels_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  result = (bool) ((arg1)->threechannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharpenEdgeParams() {
  void * jresult ;
  rtengine::procparams::SharpenEdgeParams *result = 0 ;
  
  result = (rtengine::procparams::SharpenEdgeParams *)new rtengine::procparams::SharpenEdgeParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharpenEdgeParams(void * jarg1) {
  rtengine::procparams::SharpenEdgeParams *arg1 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  
  arg1 = (rtengine::procparams::SharpenEdgeParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenMicroParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpenMicroParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenMicroParams_matrix_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->matrix = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharpenMicroParams_matrix_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  result = (bool) ((arg1)->matrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenMicroParams_amount_set(void * jarg1, double jarg2) {
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharpenMicroParams_amount_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  result = (double) ((arg1)->amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenMicroParams_uniformity_set(void * jarg1, double jarg2) {
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->uniformity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharpenMicroParams_uniformity_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  result = (double) ((arg1)->uniformity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharpenMicroParams() {
  void * jresult ;
  rtengine::procparams::SharpenMicroParams *result = 0 ;
  
  result = (rtengine::procparams::SharpenMicroParams *)new rtengine::procparams::SharpenMicroParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharpenMicroParams(void * jarg1) {
  rtengine::procparams::SharpenMicroParams *arg1 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  
  arg1 = (rtengine::procparams::SharpenMicroParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VibranceParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_pastels_set(void * jarg1, int jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pastels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VibranceParams_pastels_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (int) ((arg1)->pastels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_saturated_set(void * jarg1, int jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->saturated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VibranceParams_saturated_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (int) ((arg1)->saturated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_psthreshold_set(void * jarg1, void * jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->psthreshold = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VibranceParams_psthreshold_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->psthreshold);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_protectskins_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->protectskins = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VibranceParams_protectskins_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (bool) ((arg1)->protectskins);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_avoidcolorshift_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->avoidcolorshift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VibranceParams_avoidcolorshift_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (bool) ((arg1)->avoidcolorshift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_pastsattog_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->pastsattog = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VibranceParams_pastsattog_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (bool) ((arg1)->pastsattog);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VibranceParams_skintonescurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->skintonescurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VibranceParams_skintonescurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->skintonescurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VibranceParams() {
  void * jresult ;
  rtengine::procparams::VibranceParams *result = 0 ;
  
  result = (rtengine::procparams::VibranceParams *)new rtengine::procparams::VibranceParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VibranceParams(void * jarg1) {
  rtengine::procparams::VibranceParams *arg1 = (rtengine::procparams::VibranceParams *) 0 ;
  
  arg1 = (rtengine::procparams::VibranceParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBEntry_ppLabel_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ppLabel = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WBEntry_ppLabel_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->ppLabel);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBEntry_type_set(void * jarg1, int jarg2) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  enum rtengine::procparams::WBTypes arg2 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  arg2 = (enum rtengine::procparams::WBTypes)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WBEntry_type_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  enum rtengine::procparams::WBTypes result;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  result = (enum rtengine::procparams::WBTypes) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBEntry_GUILabel_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->GUILabel = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WBEntry_GUILabel_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->GUILabel);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBEntry_temperature_set(void * jarg1, int jarg2) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WBEntry_temperature_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  result = (int) ((arg1)->temperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBEntry_green_set(void * jarg1, double jarg2) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->green = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WBEntry_green_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  result = (double) ((arg1)->green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBEntry_equal_set(void * jarg1, double jarg2) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->equal = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WBEntry_equal_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  result = (double) ((arg1)->equal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WBEntry(char * jarg1, int jarg2, char * jarg3, int jarg4, double jarg5, double jarg6) {
  void * jresult ;
  Glib::ustring arg1 ;
  enum rtengine::procparams::WBTypes arg2 ;
  Glib::ustring arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  rtengine::procparams::WBEntry *result = 0 ;
  
  if(!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg1)->assign(jarg1); 
  arg2 = (enum rtengine::procparams::WBTypes)jarg2; 
  if(!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg3)->assign(jarg3); 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (rtengine::procparams::WBEntry *)new rtengine::procparams::WBEntry(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WBEntry(void * jarg1) {
  rtengine::procparams::WBEntry *arg1 = (rtengine::procparams::WBEntry *) 0 ;
  
  arg1 = (rtengine::procparams::WBEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_wbEntries_set(void * jarg1) {
  std::vector< rtengine::procparams::WBEntry * > *arg1 = (std::vector< rtengine::procparams::WBEntry * > *) 0 ;
  
  arg1 = (std::vector< rtengine::procparams::WBEntry * > *)jarg1; 
  rtengine::procparams::WBParams::wbEntries = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WBParams_wbEntries_get() {
  void * jresult ;
  std::vector< rtengine::procparams::WBEntry * > *result = 0 ;
  
  result = (std::vector< rtengine::procparams::WBEntry * > *)&rtengine::procparams::WBParams::wbEntries;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WBParams_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_temperature_set(void * jarg1, int jarg2) {
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WBParams_temperature_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  result = (int) ((arg1)->temperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_green_set(void * jarg1, double jarg2) {
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->green = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WBParams_green_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  result = (double) ((arg1)->green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_equal_set(void * jarg1, double jarg2) {
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->equal = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WBParams_equal_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  result = (double) ((arg1)->equal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_init() {
  rtengine::procparams::WBParams::init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_WBParams_cleanup() {
  rtengine::procparams::WBParams::cleanup();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WBParams() {
  void * jresult ;
  rtengine::procparams::WBParams *result = 0 ;
  
  result = (rtengine::procparams::WBParams *)new rtengine::procparams::WBParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WBParams(void * jarg1) {
  rtengine::procparams::WBParams *arg1 = (rtengine::procparams::WBParams *) 0 ;
  
  arg1 = (rtengine::procparams::WBParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_degree_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->degree = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorAppearanceParams_degree_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (int) ((arg1)->degree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_autodegree_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autodegree = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_autodegree_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->autodegree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_curve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->curve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorAppearanceParams_curve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->curve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_curve2_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->curve2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorAppearanceParams_curve2_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->curve2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_curve3_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->curve3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorAppearanceParams_curve3_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->curve3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_curveMode_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams::eTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (rtengine::procparams::ColorAppearanceParams::eTCModeId)jarg2; 
  if (arg1) (arg1)->curveMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorAppearanceParams_curveMode_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams::eTCModeId result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (rtengine::procparams::ColorAppearanceParams::eTCModeId) ((arg1)->curveMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_curveMode2_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams::eTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (rtengine::procparams::ColorAppearanceParams::eTCModeId)jarg2; 
  if (arg1) (arg1)->curveMode2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorAppearanceParams_curveMode2_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams::eTCModeId result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (rtengine::procparams::ColorAppearanceParams::eTCModeId) ((arg1)->curveMode2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_curveMode3_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams::eCTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (rtengine::procparams::ColorAppearanceParams::eCTCModeId)jarg2; 
  if (arg1) (arg1)->curveMode3 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorAppearanceParams_curveMode3_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams::eCTCModeId result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (rtengine::procparams::ColorAppearanceParams::eCTCModeId) ((arg1)->curveMode3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_surround_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->surround = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorAppearanceParams_surround_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->surround);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_adapscen_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->adapscen = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_adapscen_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->adapscen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_autoadapscen_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoadapscen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_autoadapscen_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->autoadapscen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_adaplum_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->adaplum = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_adaplum_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->adaplum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_badpixsl_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->badpixsl = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorAppearanceParams_badpixsl_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (int) ((arg1)->badpixsl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_wbmodel_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wbmodel = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorAppearanceParams_wbmodel_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->wbmodel);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_algo_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algo = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorAppearanceParams_algo_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->algo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_contrast_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->contrast = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_contrast_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->contrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_qcontrast_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qcontrast = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_qcontrast_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->qcontrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_jlight_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->jlight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_jlight_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->jlight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_qbright_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qbright = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_qbright_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->qbright);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_chroma_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->chroma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_chroma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->chroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_schroma_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->schroma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_schroma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->schroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_mchroma_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mchroma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_mchroma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->mchroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_colorh_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->colorh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_colorh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->colorh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_rstprotection_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rstprotection = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorAppearanceParams_rstprotection_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (double) ((arg1)->rstprotection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_surrsource_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->surrsource = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_surrsource_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->surrsource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_gamut_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gamut = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_gamut_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->gamut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_datacie_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->datacie = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_datacie_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->datacie);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorAppearanceParams_tonecie_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tonecie = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorAppearanceParams_tonecie_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  result = (bool) ((arg1)->tonecie);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorAppearanceParams() {
  void * jresult ;
  rtengine::procparams::ColorAppearanceParams *result = 0 ;
  
  result = (rtengine::procparams::ColorAppearanceParams *)new rtengine::procparams::ColorAppearanceParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorAppearanceParams(void * jarg1) {
  rtengine::procparams::ColorAppearanceParams *arg1 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  
  arg1 = (rtengine::procparams::ColorAppearanceParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DefringeParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DefringeParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DefringeParams_radius_set(void * jarg1, double jarg2) {
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DefringeParams_radius_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  result = (double) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DefringeParams_threshold_set(void * jarg1, float jarg2) {
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  float arg2 ;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DefringeParams_threshold_get(void * jarg1) {
  float jresult ;
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  float result;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  result = (float) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DefringeParams_huecurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->huecurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DefringeParams_huecurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->huecurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DefringeParams() {
  void * jresult ;
  rtengine::procparams::DefringeParams *result = 0 ;
  
  result = (rtengine::procparams::DefringeParams *)new rtengine::procparams::DefringeParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DefringeParams(void * jarg1) {
  rtengine::procparams::DefringeParams *arg1 = (rtengine::procparams::DefringeParams *) 0 ;
  
  arg1 = (rtengine::procparams::DefringeParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImpulseDenoiseParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ImpulseDenoiseParams *arg1 = (rtengine::procparams::ImpulseDenoiseParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ImpulseDenoiseParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImpulseDenoiseParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ImpulseDenoiseParams *arg1 = (rtengine::procparams::ImpulseDenoiseParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ImpulseDenoiseParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImpulseDenoiseParams_thresh_set(void * jarg1, int jarg2) {
  rtengine::procparams::ImpulseDenoiseParams *arg1 = (rtengine::procparams::ImpulseDenoiseParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ImpulseDenoiseParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thresh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImpulseDenoiseParams_thresh_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ImpulseDenoiseParams *arg1 = (rtengine::procparams::ImpulseDenoiseParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ImpulseDenoiseParams *)jarg1; 
  result = (int) ((arg1)->thresh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImpulseDenoiseParams() {
  void * jresult ;
  rtengine::procparams::ImpulseDenoiseParams *result = 0 ;
  
  result = (rtengine::procparams::ImpulseDenoiseParams *)new rtengine::procparams::ImpulseDenoiseParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImpulseDenoiseParams(void * jarg1) {
  rtengine::procparams::ImpulseDenoiseParams *arg1 = (rtengine::procparams::ImpulseDenoiseParams *) 0 ;
  
  arg1 = (rtengine::procparams::ImpulseDenoiseParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_lcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->lcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirPyrDenoiseParams_lcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->lcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_cccurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->cccurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirPyrDenoiseParams_cccurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->cccurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrDenoiseParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_enhance_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enhance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrDenoiseParams_enhance_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (bool) ((arg1)->enhance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_median_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->median = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrDenoiseParams_median_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (bool) ((arg1)->median);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_autochroma_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autochroma = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrDenoiseParams_autochroma_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (bool) ((arg1)->autochroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_perform_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->perform = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrDenoiseParams_perform_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (bool) ((arg1)->perform);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_luma_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->luma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrDenoiseParams_luma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (double) ((arg1)->luma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_Ldetail_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Ldetail = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrDenoiseParams_Ldetail_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (double) ((arg1)->Ldetail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_chroma_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->chroma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrDenoiseParams_chroma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (double) ((arg1)->chroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_redchro_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->redchro = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrDenoiseParams_redchro_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (double) ((arg1)->redchro);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_bluechro_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluechro = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrDenoiseParams_bluechro_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (double) ((arg1)->bluechro);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_gamma_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gamma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrDenoiseParams_gamma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (double) ((arg1)->gamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_dmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_dmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->dmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_Lmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Lmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_Lmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Lmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_Cmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Cmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_Cmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Cmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_C2method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->C2method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_C2method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->C2method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_smethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->smethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_smethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->smethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_medmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->medmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_medmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->medmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_methodmed_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->methodmed = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_methodmed_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->methodmed);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_rgbmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->rgbmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DirPyrDenoiseParams_rgbmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->rgbmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_passes_set(void * jarg1, int jarg2) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->passes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirPyrDenoiseParams_passes_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  result = (int) ((arg1)->passes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirPyrDenoiseParams() {
  void * jresult ;
  rtengine::procparams::DirPyrDenoiseParams *result = 0 ;
  
  result = (rtengine::procparams::DirPyrDenoiseParams *)new rtengine::procparams::DirPyrDenoiseParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_setDefaults(void * jarg1) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_getCurves(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  rtengine::NoiseCurve *arg2 = 0 ;
  rtengine::NoiseCurve *arg3 = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  arg2 = (rtengine::NoiseCurve *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::NoiseCurve & type is null", 0);
    return ;
  } 
  arg3 = (rtengine::NoiseCurve *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::NoiseCurve & type is null", 0);
    return ;
  } 
  ((rtengine::procparams::DirPyrDenoiseParams const *)arg1)->getCurves(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_getDefaultNoisCurve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::DirPyrDenoiseParams::getDefaultNoisCurve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrDenoiseParams_getDefaultCCCurve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::DirPyrDenoiseParams::getDefaultCCCurve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirPyrDenoiseParams(void * jarg1) {
  rtengine::procparams::DirPyrDenoiseParams *arg1 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  
  arg1 = (rtengine::procparams::DirPyrDenoiseParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EPDParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EPDParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EPDParams_strength_set(void * jarg1, double jarg2) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EPDParams_strength_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  result = (double) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EPDParams_gamma_set(void * jarg1, double jarg2) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gamma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EPDParams_gamma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  result = (double) ((arg1)->gamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EPDParams_edgeStopping_set(void * jarg1, double jarg2) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->edgeStopping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EPDParams_edgeStopping_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  result = (double) ((arg1)->edgeStopping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EPDParams_scale_set(void * jarg1, double jarg2) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EPDParams_scale_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  result = (double) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EPDParams_reweightingIterates_set(void * jarg1, int jarg2) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->reweightingIterates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EPDParams_reweightingIterates_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  result = (int) ((arg1)->reweightingIterates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EPDParams() {
  void * jresult ;
  rtengine::procparams::EPDParams *result = 0 ;
  
  result = (rtengine::procparams::EPDParams *)new rtengine::procparams::EPDParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EPDParams(void * jarg1) {
  rtengine::procparams::EPDParams *arg1 = (rtengine::procparams::EPDParams *) 0 ;
  
  arg1 = (rtengine::procparams::EPDParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SHParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_hq_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hq = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SHParams_hq_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (bool) ((arg1)->hq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_highlights_set(void * jarg1, int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->highlights = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHParams_highlights_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (int) ((arg1)->highlights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_htonalwidth_set(void * jarg1, int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->htonalwidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHParams_htonalwidth_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (int) ((arg1)->htonalwidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_shadows_set(void * jarg1, int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->shadows = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHParams_shadows_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (int) ((arg1)->shadows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_stonalwidth_set(void * jarg1, int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stonalwidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHParams_stonalwidth_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (int) ((arg1)->stonalwidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_localcontrast_set(void * jarg1, int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->localcontrast = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHParams_localcontrast_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (int) ((arg1)->localcontrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SHParams_radius_set(void * jarg1, int jarg2) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHParams_radius_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  result = (int) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SHParams() {
  void * jresult ;
  rtengine::procparams::SHParams *result = 0 ;
  
  result = (rtengine::procparams::SHParams *)new rtengine::procparams::SHParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SHParams(void * jarg1) {
  rtengine::procparams::SHParams *arg1 = (rtengine::procparams::SHParams *) 0 ;
  
  arg1 = (rtengine::procparams::SHParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CropParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_x_set(void * jarg1, int jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CropParams_x_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_y_set(void * jarg1, int jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CropParams_y_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_w_set(void * jarg1, int jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CropParams_w_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (int) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_h_set(void * jarg1, int jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CropParams_h_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (int) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_fixratio_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fixratio = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CropParams_fixratio_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (bool) ((arg1)->fixratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_ratio_set(void * jarg1, char * jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ratio = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CropParams_ratio_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->ratio);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_orientation_set(void * jarg1, char * jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->orientation = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CropParams_orientation_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->orientation);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_guide_set(void * jarg1, char * jarg2) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->guide = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CropParams_guide_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->guide);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CropParams() {
  void * jresult ;
  rtengine::procparams::CropParams *result = 0 ;
  
  result = (rtengine::procparams::CropParams *)new rtengine::procparams::CropParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParams_mapToResized(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  ((rtengine::procparams::CropParams const *)arg1)->mapToResized(arg2,arg3,arg4,*arg5,*arg6,*arg7,*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CropParams(void * jarg1) {
  rtengine::procparams::CropParams *arg1 = (rtengine::procparams::CropParams *) 0 ;
  
  arg1 = (rtengine::procparams::CropParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoarseTransformParams_rotate_set(void * jarg1, int jarg2) {
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rotate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoarseTransformParams_rotate_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  result = (int) ((arg1)->rotate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoarseTransformParams_hflip_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hflip = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoarseTransformParams_hflip_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  result = (bool) ((arg1)->hflip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoarseTransformParams_vflip_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vflip = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CoarseTransformParams_vflip_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  result = (bool) ((arg1)->vflip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoarseTransformParams() {
  void * jresult ;
  rtengine::procparams::CoarseTransformParams *result = 0 ;
  
  result = (rtengine::procparams::CoarseTransformParams *)new rtengine::procparams::CoarseTransformParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoarseTransformParams_setDefaults(void * jarg1) {
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoarseTransformParams(void * jarg1) {
  rtengine::procparams::CoarseTransformParams *arg1 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonTransformParams_autofill_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::CommonTransformParams *arg1 = (rtengine::procparams::CommonTransformParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::CommonTransformParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autofill = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonTransformParams_autofill_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::CommonTransformParams *arg1 = (rtengine::procparams::CommonTransformParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::CommonTransformParams *)jarg1; 
  result = (bool) ((arg1)->autofill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonTransformParams() {
  void * jresult ;
  rtengine::procparams::CommonTransformParams *result = 0 ;
  
  result = (rtengine::procparams::CommonTransformParams *)new rtengine::procparams::CommonTransformParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonTransformParams(void * jarg1) {
  rtengine::procparams::CommonTransformParams *arg1 = (rtengine::procparams::CommonTransformParams *) 0 ;
  
  arg1 = (rtengine::procparams::CommonTransformParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateParams_degree_set(void * jarg1, double jarg2) {
  rtengine::procparams::RotateParams *arg1 = (rtengine::procparams::RotateParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RotateParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->degree = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotateParams_degree_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RotateParams *arg1 = (rtengine::procparams::RotateParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RotateParams *)jarg1; 
  result = (double) ((arg1)->degree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RotateParams() {
  void * jresult ;
  rtengine::procparams::RotateParams *result = 0 ;
  
  result = (rtengine::procparams::RotateParams *)new rtengine::procparams::RotateParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RotateParams(void * jarg1) {
  rtengine::procparams::RotateParams *arg1 = (rtengine::procparams::RotateParams *) 0 ;
  
  arg1 = (rtengine::procparams::RotateParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DistortionParams_amount_set(void * jarg1, double jarg2) {
  rtengine::procparams::DistortionParams *arg1 = (rtengine::procparams::DistortionParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DistortionParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DistortionParams_amount_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DistortionParams *arg1 = (rtengine::procparams::DistortionParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DistortionParams *)jarg1; 
  result = (double) ((arg1)->amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DistortionParams() {
  void * jresult ;
  rtengine::procparams::DistortionParams *result = 0 ;
  
  result = (rtengine::procparams::DistortionParams *)new rtengine::procparams::DistortionParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DistortionParams(void * jarg1) {
  rtengine::procparams::DistortionParams *arg1 = (rtengine::procparams::DistortionParams *) 0 ;
  
  arg1 = (rtengine::procparams::DistortionParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LensProfParams_lcpFile_set(void * jarg1, char * jarg2) {
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lcpFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LensProfParams_lcpFile_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lcpFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LensProfParams_useDist_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useDist = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LensProfParams_useDist_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  result = (bool) ((arg1)->useDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LensProfParams_useVign_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useVign = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LensProfParams_useVign_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  result = (bool) ((arg1)->useVign);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LensProfParams_useCA_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useCA = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LensProfParams_useCA_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  result = (bool) ((arg1)->useCA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LensProfParams() {
  void * jresult ;
  rtengine::procparams::LensProfParams *result = 0 ;
  
  result = (rtengine::procparams::LensProfParams *)new rtengine::procparams::LensProfParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LensProfParams_setDefaults(void * jarg1) {
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LensProfParams(void * jarg1) {
  rtengine::procparams::LensProfParams *arg1 = (rtengine::procparams::LensProfParams *) 0 ;
  
  arg1 = (rtengine::procparams::LensProfParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerspectiveParams_horizontal_set(void * jarg1, double jarg2) {
  rtengine::procparams::PerspectiveParams *arg1 = (rtengine::procparams::PerspectiveParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::PerspectiveParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->horizontal = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PerspectiveParams_horizontal_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::PerspectiveParams *arg1 = (rtengine::procparams::PerspectiveParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::PerspectiveParams *)jarg1; 
  result = (double) ((arg1)->horizontal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerspectiveParams_vertical_set(void * jarg1, double jarg2) {
  rtengine::procparams::PerspectiveParams *arg1 = (rtengine::procparams::PerspectiveParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::PerspectiveParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vertical = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PerspectiveParams_vertical_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::PerspectiveParams *arg1 = (rtengine::procparams::PerspectiveParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::PerspectiveParams *)jarg1; 
  result = (double) ((arg1)->vertical);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerspectiveParams() {
  void * jresult ;
  rtengine::procparams::PerspectiveParams *result = 0 ;
  
  result = (rtengine::procparams::PerspectiveParams *)new rtengine::procparams::PerspectiveParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PerspectiveParams(void * jarg1) {
  rtengine::procparams::PerspectiveParams *arg1 = (rtengine::procparams::PerspectiveParams *) 0 ;
  
  arg1 = (rtengine::procparams::PerspectiveParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GradientParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GradientParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GradientParams_degree_set(void * jarg1, double jarg2) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->degree = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GradientParams_degree_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  result = (double) ((arg1)->degree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GradientParams_feather_set(void * jarg1, int jarg2) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->feather = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GradientParams_feather_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  result = (int) ((arg1)->feather);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GradientParams_strength_set(void * jarg1, double jarg2) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GradientParams_strength_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  result = (double) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GradientParams_centerX_set(void * jarg1, int jarg2) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->centerX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GradientParams_centerX_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  result = (int) ((arg1)->centerX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GradientParams_centerY_set(void * jarg1, int jarg2) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->centerY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GradientParams_centerY_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  result = (int) ((arg1)->centerY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GradientParams() {
  void * jresult ;
  rtengine::procparams::GradientParams *result = 0 ;
  
  result = (rtengine::procparams::GradientParams *)new rtengine::procparams::GradientParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GradientParams(void * jarg1) {
  rtengine::procparams::GradientParams *arg1 = (rtengine::procparams::GradientParams *) 0 ;
  
  arg1 = (rtengine::procparams::GradientParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PCVignetteParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PCVignetteParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PCVignetteParams_strength_set(void * jarg1, double jarg2) {
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PCVignetteParams_strength_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  result = (double) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PCVignetteParams_feather_set(void * jarg1, int jarg2) {
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->feather = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCVignetteParams_feather_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  result = (int) ((arg1)->feather);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PCVignetteParams_roundness_set(void * jarg1, int jarg2) {
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->roundness = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCVignetteParams_roundness_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  result = (int) ((arg1)->roundness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PCVignetteParams() {
  void * jresult ;
  rtengine::procparams::PCVignetteParams *result = 0 ;
  
  result = (rtengine::procparams::PCVignetteParams *)new rtengine::procparams::PCVignetteParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PCVignetteParams(void * jarg1) {
  rtengine::procparams::PCVignetteParams *arg1 = (rtengine::procparams::PCVignetteParams *) 0 ;
  
  arg1 = (rtengine::procparams::PCVignetteParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignettingParams_amount_set(void * jarg1, int jarg2) {
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VignettingParams_amount_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  result = (int) ((arg1)->amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignettingParams_radius_set(void * jarg1, int jarg2) {
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VignettingParams_radius_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  result = (int) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignettingParams_strength_set(void * jarg1, int jarg2) {
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VignettingParams_strength_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  result = (int) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignettingParams_centerX_set(void * jarg1, int jarg2) {
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->centerX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VignettingParams_centerX_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  result = (int) ((arg1)->centerX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignettingParams_centerY_set(void * jarg1, int jarg2) {
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->centerY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VignettingParams_centerY_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  result = (int) ((arg1)->centerY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VignettingParams() {
  void * jresult ;
  rtengine::procparams::VignettingParams *result = 0 ;
  
  result = (rtengine::procparams::VignettingParams *)new rtengine::procparams::VignettingParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VignettingParams(void * jarg1) {
  rtengine::procparams::VignettingParams *arg1 = (rtengine::procparams::VignettingParams *) 0 ;
  
  arg1 = (rtengine::procparams::VignettingParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelMixerParams_red_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  int *arg2 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->red;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelMixerParams_red_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  int *result = 0 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  result = (int *)(int *) ((arg1)->red);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelMixerParams_green_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  int *arg2 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->green;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelMixerParams_green_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  int *result = 0 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  result = (int *)(int *) ((arg1)->green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelMixerParams_blue_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  int *arg2 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->blue;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelMixerParams_blue_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  int *result = 0 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  result = (int *)(int *) ((arg1)->blue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChannelMixerParams() {
  void * jresult ;
  rtengine::procparams::ChannelMixerParams *result = 0 ;
  
  result = (rtengine::procparams::ChannelMixerParams *)new rtengine::procparams::ChannelMixerParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChannelMixerParams(void * jarg1) {
  rtengine::procparams::ChannelMixerParams *arg1 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  
  arg1 = (rtengine::procparams::ChannelMixerParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_beforeCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->beforeCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlackWhiteParams_beforeCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->beforeCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_beforeCurveMode_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  rtengine::procparams::BlackWhiteParams::eTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (rtengine::procparams::BlackWhiteParams::eTCModeId)jarg2; 
  if (arg1) (arg1)->beforeCurveMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_beforeCurveMode_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  rtengine::procparams::BlackWhiteParams::eTCModeId result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (rtengine::procparams::BlackWhiteParams::eTCModeId) ((arg1)->beforeCurveMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_afterCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->afterCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlackWhiteParams_afterCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->afterCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_afterCurveMode_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  rtengine::procparams::BlackWhiteParams::eTCModeId arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (rtengine::procparams::BlackWhiteParams::eTCModeId)jarg2; 
  if (arg1) (arg1)->afterCurveMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_afterCurveMode_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  rtengine::procparams::BlackWhiteParams::eTCModeId result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (rtengine::procparams::BlackWhiteParams::eTCModeId) ((arg1)->afterCurveMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_algo_set(void * jarg1, char * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algo = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BlackWhiteParams_algo_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->algo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_luminanceCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->luminanceCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlackWhiteParams_luminanceCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->luminanceCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_autoc_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoc = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BlackWhiteParams_autoc_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (bool) ((arg1)->autoc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_enabledcc_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabledcc = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BlackWhiteParams_enabledcc_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (bool) ((arg1)->enabledcc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BlackWhiteParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_filter_set(void * jarg1, char * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->filter = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BlackWhiteParams_filter_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->filter);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_setting_set(void * jarg1, char * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BlackWhiteParams_setting_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->setting);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BlackWhiteParams_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerRed_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerRed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerRed_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerRed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerOrange_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerOrange = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerOrange_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerOrange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerYellow_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerYellow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerYellow_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerYellow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerGreen_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerGreen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerGreen_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerGreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerCyan_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerCyan = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerCyan_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerCyan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerBlue_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerBlue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerBlue_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerBlue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerMagenta_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerMagenta = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerMagenta_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerMagenta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_mixerPurple_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mixerPurple = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_mixerPurple_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->mixerPurple);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_gammaRed_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gammaRed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_gammaRed_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->gammaRed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_gammaGreen_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gammaGreen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_gammaGreen_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->gammaGreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlackWhiteParams_gammaBlue_set(void * jarg1, int jarg2) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gammaBlue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlackWhiteParams_gammaBlue_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  result = (int) ((arg1)->gammaBlue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BlackWhiteParams() {
  void * jresult ;
  rtengine::procparams::BlackWhiteParams *result = 0 ;
  
  result = (rtengine::procparams::BlackWhiteParams *)new rtengine::procparams::BlackWhiteParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BlackWhiteParams(void * jarg1) {
  rtengine::procparams::BlackWhiteParams *arg1 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  
  arg1 = (rtengine::procparams::BlackWhiteParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CACorrParams_red_set(void * jarg1, double jarg2) {
  rtengine::procparams::CACorrParams *arg1 = (rtengine::procparams::CACorrParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::CACorrParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->red = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CACorrParams_red_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::CACorrParams *arg1 = (rtengine::procparams::CACorrParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::CACorrParams *)jarg1; 
  result = (double) ((arg1)->red);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CACorrParams_blue_set(void * jarg1, double jarg2) {
  rtengine::procparams::CACorrParams *arg1 = (rtengine::procparams::CACorrParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::CACorrParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CACorrParams_blue_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::CACorrParams *arg1 = (rtengine::procparams::CACorrParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::CACorrParams *)jarg1; 
  result = (double) ((arg1)->blue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CACorrParams() {
  void * jresult ;
  rtengine::procparams::CACorrParams *result = 0 ;
  
  result = (rtengine::procparams::CACorrParams *)new rtengine::procparams::CACorrParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CACorrParams(void * jarg1) {
  rtengine::procparams::CACorrParams *arg1 = (rtengine::procparams::CACorrParams *) 0 ;
  
  arg1 = (rtengine::procparams::CACorrParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResizeParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_scale_set(void * jarg1, double jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ResizeParams_scale_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (double) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_appliesTo_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->appliesTo = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResizeParams_appliesTo_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->appliesTo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResizeParams_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_dataspec_set(void * jarg1, int jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataspec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResizeParams_dataspec_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (int) ((arg1)->dataspec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_width_set(void * jarg1, int jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResizeParams_width_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResizeParams_height_set(void * jarg1, int jarg2) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResizeParams_height_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResizeParams() {
  void * jresult ;
  rtengine::procparams::ResizeParams *result = 0 ;
  
  result = (rtengine::procparams::ResizeParams *)new rtengine::procparams::ResizeParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResizeParams(void * jarg1) {
  rtengine::procparams::ResizeParams *arg1 = (rtengine::procparams::ResizeParams *) 0 ;
  
  arg1 = (rtengine::procparams::ResizeParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_input_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->input = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorManagementParams_input_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->input);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_toneCurve_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->toneCurve = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorManagementParams_toneCurve_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (bool) ((arg1)->toneCurve);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_applyLookTable_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->applyLookTable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorManagementParams_applyLookTable_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (bool) ((arg1)->applyLookTable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_applyBaselineExposureOffset_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->applyBaselineExposureOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorManagementParams_applyBaselineExposureOffset_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (bool) ((arg1)->applyBaselineExposureOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_applyHueSatMap_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->applyHueSatMap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorManagementParams_applyHueSatMap_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (bool) ((arg1)->applyHueSatMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_blendCMSMatrix_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->blendCMSMatrix = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorManagementParams_blendCMSMatrix_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (bool) ((arg1)->blendCMSMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_dcpIlluminant_set(void * jarg1, int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dcpIlluminant = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorManagementParams_dcpIlluminant_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (int) ((arg1)->dcpIlluminant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_working_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->working = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorManagementParams_working_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->working);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_output_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->output = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorManagementParams_output_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->output);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorManagementParams_NoICMString_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &rtengine::procparams::ColorManagementParams::NoICMString;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_gamma_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gamma = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorManagementParams_gamma_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->gamma);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_gampos_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gampos = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorManagementParams_gampos_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (double) ((arg1)->gampos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_slpos_set(void * jarg1, double jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->slpos = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorManagementParams_slpos_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (double) ((arg1)->slpos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_freegamma_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->freegamma = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorManagementParams_freegamma_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  result = (bool) ((arg1)->freegamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorManagementParams() {
  void * jresult ;
  rtengine::procparams::ColorManagementParams *result = 0 ;
  
  result = (rtengine::procparams::ColorManagementParams *)new rtengine::procparams::ColorManagementParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorManagementParams_setDefaults(void * jarg1) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorManagementParams(void * jarg1) {
  rtengine::procparams::ColorManagementParams *arg1 = (rtengine::procparams::ColorManagementParams *) 0 ;
  
  arg1 = (rtengine::procparams::ColorManagementParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_ccwcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->ccwcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_ccwcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->ccwcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_opacityCurveRG_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->opacityCurveRG = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_opacityCurveRG_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->opacityCurveRG);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_opacityCurveBY_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->opacityCurveBY = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_opacityCurveBY_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->opacityCurveBY);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_opacityCurveW_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->opacityCurveW = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_opacityCurveW_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->opacityCurveW);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_opacityCurveWL_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->opacityCurveWL = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_opacityCurveWL_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->opacityCurveWL);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_hhcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->hhcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_hhcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->hhcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_Chcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->Chcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_Chcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->Chcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_wavclCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->wavclCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_wavclCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->wavclCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_median_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->median = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_median_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->median);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_medianlev_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->medianlev = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_medianlev_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->medianlev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_linkedg_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->linkedg = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_linkedg_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->linkedg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_cbenab_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cbenab = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_cbenab_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->cbenab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_greenlow_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->greenlow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_greenlow_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->greenlow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_bluelow_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluelow = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_bluelow_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->bluelow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_greenmed_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->greenmed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_greenmed_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->greenmed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_bluemed_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluemed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_bluemed_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->bluemed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_greenhigh_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->greenhigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_greenhigh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->greenhigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_bluehigh_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bluehigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_bluehigh_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->bluehigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_lipst_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lipst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_lipst_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->lipst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_avoid_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->avoid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_avoid_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->avoid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_tmr_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tmr = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_tmr_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->tmr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_strength_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_strength_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_balance_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_balance_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->balance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_iter_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iter = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_iter_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->iter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_expcontrast_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expcontrast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_expcontrast_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->expcontrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_expchroma_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expchroma = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_expchroma_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->expchroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_c_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int *arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->c;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_c_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int *)(int *) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_ch_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int *arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ch;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_ch_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int *)(int *) ((arg1)->ch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_expedge_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expedge = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_expedge_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->expedge);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_expresid_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expresid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_expresid_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->expresid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_expfinal_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expfinal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_expfinal_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->expfinal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_exptoning_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->exptoning = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_exptoning_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->exptoning);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_expnoise_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expnoise = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WaveletParams_expnoise_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (bool) ((arg1)->expnoise);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_Lmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Lmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_Lmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Lmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_CLmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CLmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_CLmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->CLmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_Backmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Backmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_Backmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Backmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_Tilesmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Tilesmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_Tilesmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Tilesmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_daubcoeffmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->daubcoeffmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_daubcoeffmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->daubcoeffmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_CHmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CHmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_CHmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->CHmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_Medgreinf_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Medgreinf = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_Medgreinf_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Medgreinf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_CHSLmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CHSLmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_CHSLmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->CHSLmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_EDmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->EDmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_EDmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->EDmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_NPmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->NPmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_NPmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->NPmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_BAmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->BAmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_BAmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->BAmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_TMmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->TMmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_TMmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->TMmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_Dirmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Dirmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_Dirmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->Dirmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_HSmethod_set(void * jarg1, char * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->HSmethod = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WaveletParams_HSmethod_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->HSmethod);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_rescon_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rescon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_rescon_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->rescon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_resconH_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->resconH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_resconH_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->resconH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_reschro_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->reschro = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_reschro_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->reschro);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_tmrs_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tmrs = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_tmrs_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->tmrs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_gamma_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gamma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_gamma_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->gamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_sup_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_sup_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->sup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_sky_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sky = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_sky_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->sky);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_thres_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thres = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_thres_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->thres);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_chroma_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chroma = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_chroma_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->chroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_chro_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chro = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_chro_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->chro);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_threshold_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_threshold_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_threshold2_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->threshold2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_threshold2_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->threshold2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgedetect_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgedetect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgedetect_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgedetect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgedetectthr_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgedetectthr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgedetectthr_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgedetectthr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgedetectthr2_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgedetectthr2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgedetectthr2_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgedetectthr2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgesensi_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgesensi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgesensi_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgesensi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgeampli_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgeampli = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgeampli_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgeampli);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_contrast_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contrast = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_contrast_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->contrast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgrad_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgrad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgrad_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgrad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgval_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgval_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgthresh_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->edgthresh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_edgthresh_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->edgthresh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_thr_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_thr_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->thr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_thrH_set(void * jarg1, int jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thrH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaveletParams_thrH_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (int) ((arg1)->thrH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_skinprotect_set(void * jarg1, double jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->skinprotect = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaveletParams_skinprotect_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (double) ((arg1)->skinprotect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_hueskin_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->hueskin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_hueskin_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->hueskin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_hueskin2_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->hueskin2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_hueskin2_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->hueskin2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_hllev_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->hllev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_hllev_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->hllev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_bllev_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->bllev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_bllev_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->bllev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_pastlev_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->pastlev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_pastlev_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->pastlev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_satlev_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->satlev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_satlev_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->satlev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_edgcont_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->edgcont = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_edgcont_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->edgcont);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_level0noise_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *arg2 = (rtengine::procparams::Threshold< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< double > *)jarg2; 
  if (arg1) (arg1)->level0noise = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_level0noise_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< double > *)& ((arg1)->level0noise);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_level1noise_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *arg2 = (rtengine::procparams::Threshold< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< double > *)jarg2; 
  if (arg1) (arg1)->level1noise = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_level1noise_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< double > *)& ((arg1)->level1noise);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_level2noise_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *arg2 = (rtengine::procparams::Threshold< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< double > *)jarg2; 
  if (arg1) (arg1)->level2noise = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_level2noise_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< double > *)& ((arg1)->level2noise);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_level3noise_set(void * jarg1, void * jarg2) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *arg2 = (rtengine::procparams::Threshold< double > *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< double > *)jarg2; 
  if (arg1) (arg1)->level3noise = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaveletParams_level3noise_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::procparams::Threshold< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  result = (rtengine::procparams::Threshold< double > *)& ((arg1)->level3noise);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WaveletParams() {
  void * jresult ;
  rtengine::procparams::WaveletParams *result = 0 ;
  
  result = (rtengine::procparams::WaveletParams *)new rtengine::procparams::WaveletParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_setDefaults(void * jarg1) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_getCurves(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  rtengine::WavCurve *arg2 = 0 ;
  rtengine::WavOpacityCurveRG *arg3 = 0 ;
  rtengine::WavOpacityCurveBY *arg4 = 0 ;
  rtengine::WavOpacityCurveW *arg5 = 0 ;
  rtengine::WavOpacityCurveWL *arg6 = 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  arg2 = (rtengine::WavCurve *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::WavCurve & type is null", 0);
    return ;
  } 
  arg3 = (rtengine::WavOpacityCurveRG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::WavOpacityCurveRG & type is null", 0);
    return ;
  } 
  arg4 = (rtengine::WavOpacityCurveBY *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::WavOpacityCurveBY & type is null", 0);
    return ;
  } 
  arg5 = (rtengine::WavOpacityCurveW *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::WavOpacityCurveW & type is null", 0);
    return ;
  } 
  arg6 = (rtengine::WavOpacityCurveWL *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::WavOpacityCurveWL & type is null", 0);
    return ;
  } 
  ((rtengine::procparams::WaveletParams const *)arg1)->getCurves(*arg2,*arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_getDefaultCCWCurve(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::WaveletParams::getDefaultCCWCurve(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_getDefaultOpacityCurveRG(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::WaveletParams::getDefaultOpacityCurveRG(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_getDefaultOpacityCurveBY(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::WaveletParams::getDefaultOpacityCurveBY(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_getDefaultOpacityCurveW(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::WaveletParams::getDefaultOpacityCurveW(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletParams_getDefaultOpacityCurveWL(void * jarg1) {
  std::vector< double > *arg1 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  rtengine::procparams::WaveletParams::getDefaultOpacityCurveWL(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WaveletParams(void * jarg1) {
  rtengine::procparams::WaveletParams *arg1 = (rtengine::procparams::WaveletParams *) 0 ;
  
  arg1 = (rtengine::procparams::WaveletParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrEqualizerParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrEqualizerParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrEqualizerParams_gamutlab_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gamutlab = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirPyrEqualizerParams_gamutlab_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  result = (bool) ((arg1)->gamutlab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrEqualizerParams_mult_set(void * jarg1, void * jarg2) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  double *arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->mult;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirPyrEqualizerParams_mult_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  double *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  result = (double *)(double *) ((arg1)->mult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrEqualizerParams_threshold_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrEqualizerParams_threshold_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  result = (double) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrEqualizerParams_skinprotect_set(void * jarg1, double jarg2) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->skinprotect = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DirPyrEqualizerParams_skinprotect_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  result = (double) ((arg1)->skinprotect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirPyrEqualizerParams_hueskin_set(void * jarg1, void * jarg2) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  rtengine::procparams::Threshold< int > *arg2 = (rtengine::procparams::Threshold< int > *) 0 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  arg2 = (rtengine::procparams::Threshold< int > *)jarg2; 
  if (arg1) (arg1)->hueskin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirPyrEqualizerParams_hueskin_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  rtengine::procparams::Threshold< int > *result = 0 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  result = (rtengine::procparams::Threshold< int > *)& ((arg1)->hueskin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirPyrEqualizerParams() {
  void * jresult ;
  rtengine::procparams::DirPyrEqualizerParams *result = 0 ;
  
  result = (rtengine::procparams::DirPyrEqualizerParams *)new rtengine::procparams::DirPyrEqualizerParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirPyrEqualizerParams(void * jarg1) {
  rtengine::procparams::DirPyrEqualizerParams *arg1 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  
  arg1 = (rtengine::procparams::DirPyrEqualizerParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSVEqualizerParams_hcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->hcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSVEqualizerParams_hcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->hcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSVEqualizerParams_scurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->scurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSVEqualizerParams_scurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->scurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSVEqualizerParams_vcurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->vcurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSVEqualizerParams_vcurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->vcurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSVEqualizerParams() {
  void * jresult ;
  rtengine::procparams::HSVEqualizerParams *result = 0 ;
  
  result = (rtengine::procparams::HSVEqualizerParams *)new rtengine::procparams::HSVEqualizerParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSVEqualizerParams(void * jarg1) {
  rtengine::procparams::HSVEqualizerParams *arg1 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  
  arg1 = (rtengine::procparams::HSVEqualizerParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FilmSimulationParams_enabled_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FilmSimulationParams_enabled_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FilmSimulationParams_clutFilename_set(void * jarg1, char * jarg2) {
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->clutFilename = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FilmSimulationParams_clutFilename_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->clutFilename);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FilmSimulationParams_strength_set(void * jarg1, int jarg2) {
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FilmSimulationParams_strength_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  result = (int) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FilmSimulationParams() {
  void * jresult ;
  rtengine::procparams::FilmSimulationParams *result = 0 ;
  
  result = (rtengine::procparams::FilmSimulationParams *)new rtengine::procparams::FilmSimulationParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FilmSimulationParams_setDefaults(void * jarg1) {
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FilmSimulationParams(void * jarg1) {
  rtengine::procparams::FilmSimulationParams *arg1 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  
  arg1 = (rtengine::procparams::FilmSimulationParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_methodstring_set(void * jarg1) {
  char **arg1 ;
  
  arg1 = (char **)jarg1; 
  {
    size_t ii;
    char const * *b = (char const * *) rtengine::procparams::RAWParams::BayerSensor::methodstring;
    for (ii = 0; ii < (size_t)rtengine::procparams::RAWParams::BayerSensor::numMethods; ii++) b[ii] = *((char const * *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RAWParams_BayerSensor_methodstring_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)rtengine::procparams::RAWParams::BayerSensor::methodstring;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RAWParams_BayerSensor_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_ccSteps_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ccSteps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_BayerSensor_ccSteps_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (int) ((arg1)->ccSteps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_black0_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->black0 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_BayerSensor_black0_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (double) ((arg1)->black0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_black1_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->black1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_BayerSensor_black1_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (double) ((arg1)->black1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_black2_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->black2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_BayerSensor_black2_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (double) ((arg1)->black2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_black3_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->black3 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_BayerSensor_black3_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (double) ((arg1)->black3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_twogreen_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->twogreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_BayerSensor_twogreen_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (bool) ((arg1)->twogreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_linenoise_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->linenoise = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_BayerSensor_linenoise_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (int) ((arg1)->linenoise);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_greenthresh_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->greenthresh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_BayerSensor_greenthresh_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (int) ((arg1)->greenthresh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_dcb_iterations_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dcb_iterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_BayerSensor_dcb_iterations_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (int) ((arg1)->dcb_iterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_lmmse_iterations_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lmmse_iterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_BayerSensor_lmmse_iterations_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (int) ((arg1)->lmmse_iterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_BayerSensor_dcb_enhance_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dcb_enhance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_BayerSensor_dcb_enhance_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  result = (bool) ((arg1)->dcb_enhance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RAWParams_BayerSensor() {
  void * jresult ;
  rtengine::procparams::RAWParams::BayerSensor *result = 0 ;
  
  result = (rtengine::procparams::RAWParams::BayerSensor *)new rtengine::procparams::RAWParams::BayerSensor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RAWParams_BayerSensor(void * jarg1) {
  rtengine::procparams::RAWParams::BayerSensor *arg1 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  
  arg1 = (rtengine::procparams::RAWParams::BayerSensor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_XTransSensor_methodstring_set(void * jarg1) {
  char **arg1 ;
  
  arg1 = (char **)jarg1; 
  {
    size_t ii;
    char const * *b = (char const * *) rtengine::procparams::RAWParams::XTransSensor::methodstring;
    for (ii = 0; ii < (size_t)rtengine::procparams::RAWParams::XTransSensor::numMethods; ii++) b[ii] = *((char const * *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RAWParams_XTransSensor_methodstring_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)rtengine::procparams::RAWParams::XTransSensor::methodstring;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_XTransSensor_method_set(void * jarg1, char * jarg2) {
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RAWParams_XTransSensor_method_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_XTransSensor_ccSteps_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ccSteps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_XTransSensor_ccSteps_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  result = (int) ((arg1)->ccSteps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_XTransSensor_blackred_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blackred = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_XTransSensor_blackred_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  result = (double) ((arg1)->blackred);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_XTransSensor_blackgreen_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blackgreen = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_XTransSensor_blackgreen_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  result = (double) ((arg1)->blackgreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_XTransSensor_blackblue_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blackblue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_XTransSensor_blackblue_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  result = (double) ((arg1)->blackblue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RAWParams_XTransSensor() {
  void * jresult ;
  rtengine::procparams::RAWParams::XTransSensor *result = 0 ;
  
  result = (rtengine::procparams::RAWParams::XTransSensor *)new rtengine::procparams::RAWParams::XTransSensor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RAWParams_XTransSensor(void * jarg1) {
  rtengine::procparams::RAWParams::XTransSensor *arg1 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  
  arg1 = (rtengine::procparams::RAWParams::XTransSensor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_bayersensor_set(void * jarg1, void * jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  rtengine::procparams::RAWParams::BayerSensor *arg2 = (rtengine::procparams::RAWParams::BayerSensor *) 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams::BayerSensor *)jarg2; 
  if (arg1) (arg1)->bayersensor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RAWParams_bayersensor_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  rtengine::procparams::RAWParams::BayerSensor *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (rtengine::procparams::RAWParams::BayerSensor *)& ((arg1)->bayersensor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_xtranssensor_set(void * jarg1, void * jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  rtengine::procparams::RAWParams::XTransSensor *arg2 = (rtengine::procparams::RAWParams::XTransSensor *) 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams::XTransSensor *)jarg2; 
  if (arg1) (arg1)->xtranssensor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RAWParams_xtranssensor_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  rtengine::procparams::RAWParams::XTransSensor *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (rtengine::procparams::RAWParams::XTransSensor *)& ((arg1)->xtranssensor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_BlurTypestring_set(void * jarg1) {
  char **arg1 ;
  
  arg1 = (char **)jarg1; 
  {
    size_t ii;
    char const * *b = (char const * *) rtengine::procparams::RAWParams::ff_BlurTypestring;
    for (ii = 0; ii < (size_t)rtengine::procparams::RAWParams::numFlatFileBlurTypes; ii++) b[ii] = *((char const * *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RAWParams_ff_BlurTypestring_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)rtengine::procparams::RAWParams::ff_BlurTypestring;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_dark_frame_set(void * jarg1, char * jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dark_frame = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RAWParams_dark_frame_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->dark_frame);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_df_autoselect_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->df_autoselect = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_df_autoselect_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (bool) ((arg1)->df_autoselect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_file_set(void * jarg1, char * jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ff_file = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RAWParams_ff_file_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->ff_file);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_AutoSelect_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ff_AutoSelect = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_ff_AutoSelect_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (bool) ((arg1)->ff_AutoSelect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_BlurRadius_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ff_BlurRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_ff_BlurRadius_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (int) ((arg1)->ff_BlurRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_BlurType_set(void * jarg1, char * jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ff_BlurType = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RAWParams_ff_BlurType_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->ff_BlurType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_AutoClipControl_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ff_AutoClipControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_ff_AutoClipControl_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (bool) ((arg1)->ff_AutoClipControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ff_clipControl_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ff_clipControl = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_ff_clipControl_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (int) ((arg1)->ff_clipControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_ca_autocorrect_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ca_autocorrect = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_ca_autocorrect_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (bool) ((arg1)->ca_autocorrect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_cared_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cared = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_cared_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (double) ((arg1)->cared);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_cablue_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cablue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_cablue_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (double) ((arg1)->cablue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_expos_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->expos = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_expos_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (double) ((arg1)->expos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_preser_set(void * jarg1, double jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->preser = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAWParams_preser_get(void * jarg1) {
  double jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  double result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (double) ((arg1)->preser);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_hotPixelFilter_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hotPixelFilter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_hotPixelFilter_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (bool) ((arg1)->hotPixelFilter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_deadPixelFilter_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->deadPixelFilter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAWParams_deadPixelFilter_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (bool) ((arg1)->deadPixelFilter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_hotdeadpix_thresh_set(void * jarg1, int jarg2) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hotdeadpix_thresh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RAWParams_hotdeadpix_thresh_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  result = (int) ((arg1)->hotdeadpix_thresh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RAWParams() {
  void * jresult ;
  rtengine::procparams::RAWParams *result = 0 ;
  
  result = (rtengine::procparams::RAWParams *)new rtengine::procparams::RAWParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RAWParams_setDefaults(void * jarg1) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RAWParams(void * jarg1) {
  rtengine::procparams::RAWParams *arg1 = (rtengine::procparams::RAWParams *) 0 ;
  
  arg1 = (rtengine::procparams::RAWParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_toneCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ToneCurveParams *arg2 = (rtengine::procparams::ToneCurveParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ToneCurveParams *)jarg2; 
  if (arg1) (arg1)->toneCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_toneCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ToneCurveParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ToneCurveParams *)& ((arg1)->toneCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_labCurve_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::LCurveParams *arg2 = (rtengine::procparams::LCurveParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::LCurveParams *)jarg2; 
  if (arg1) (arg1)->labCurve = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_labCurve_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::LCurveParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::LCurveParams *)& ((arg1)->labCurve);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_rgbCurves_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::RGBCurvesParams *arg2 = (rtengine::procparams::RGBCurvesParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::RGBCurvesParams *)jarg2; 
  if (arg1) (arg1)->rgbCurves = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_rgbCurves_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::RGBCurvesParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::RGBCurvesParams *)& ((arg1)->rgbCurves);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_colorToning_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ColorToningParams *arg2 = (rtengine::procparams::ColorToningParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ColorToningParams *)jarg2; 
  if (arg1) (arg1)->colorToning = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_colorToning_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ColorToningParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ColorToningParams *)& ((arg1)->colorToning);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_sharpening_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpeningParams *arg2 = (rtengine::procparams::SharpeningParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::SharpeningParams *)jarg2; 
  if (arg1) (arg1)->sharpening = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_sharpening_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpeningParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::SharpeningParams *)& ((arg1)->sharpening);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_prsharpening_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpeningParams *arg2 = (rtengine::procparams::SharpeningParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::SharpeningParams *)jarg2; 
  if (arg1) (arg1)->prsharpening = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_prsharpening_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpeningParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::SharpeningParams *)& ((arg1)->prsharpening);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_sharpenEdge_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpenEdgeParams *arg2 = (rtengine::procparams::SharpenEdgeParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::SharpenEdgeParams *)jarg2; 
  if (arg1) (arg1)->sharpenEdge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_sharpenEdge_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpenEdgeParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::SharpenEdgeParams *)& ((arg1)->sharpenEdge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_sharpenMicro_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpenMicroParams *arg2 = (rtengine::procparams::SharpenMicroParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::SharpenMicroParams *)jarg2; 
  if (arg1) (arg1)->sharpenMicro = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_sharpenMicro_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SharpenMicroParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::SharpenMicroParams *)& ((arg1)->sharpenMicro);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_vibrance_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::VibranceParams *arg2 = (rtengine::procparams::VibranceParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::VibranceParams *)jarg2; 
  if (arg1) (arg1)->vibrance = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_vibrance_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::VibranceParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::VibranceParams *)& ((arg1)->vibrance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_wb_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::WBParams *arg2 = (rtengine::procparams::WBParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::WBParams *)jarg2; 
  if (arg1) (arg1)->wb = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_wb_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::WBParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::WBParams *)& ((arg1)->wb);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_colorappearance_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams *arg2 = (rtengine::procparams::ColorAppearanceParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ColorAppearanceParams *)jarg2; 
  if (arg1) (arg1)->colorappearance = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_colorappearance_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ColorAppearanceParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ColorAppearanceParams *)& ((arg1)->colorappearance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_defringe_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DefringeParams *arg2 = (rtengine::procparams::DefringeParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::DefringeParams *)jarg2; 
  if (arg1) (arg1)->defringe = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_defringe_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DefringeParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::DefringeParams *)& ((arg1)->defringe);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_impulseDenoise_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ImpulseDenoiseParams *arg2 = (rtengine::procparams::ImpulseDenoiseParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ImpulseDenoiseParams *)jarg2; 
  if (arg1) (arg1)->impulseDenoise = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_impulseDenoise_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ImpulseDenoiseParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ImpulseDenoiseParams *)& ((arg1)->impulseDenoise);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_dirpyrDenoise_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DirPyrDenoiseParams *arg2 = (rtengine::procparams::DirPyrDenoiseParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::DirPyrDenoiseParams *)jarg2; 
  if (arg1) (arg1)->dirpyrDenoise = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_dirpyrDenoise_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DirPyrDenoiseParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::DirPyrDenoiseParams *)& ((arg1)->dirpyrDenoise);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_epd_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::EPDParams *arg2 = (rtengine::procparams::EPDParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::EPDParams *)jarg2; 
  if (arg1) (arg1)->epd = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_epd_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::EPDParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::EPDParams *)& ((arg1)->epd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_sh_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SHParams *arg2 = (rtengine::procparams::SHParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::SHParams *)jarg2; 
  if (arg1) (arg1)->sh = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_sh_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::SHParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::SHParams *)& ((arg1)->sh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_crop_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CropParams *arg2 = (rtengine::procparams::CropParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::CropParams *)jarg2; 
  if (arg1) (arg1)->crop = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_crop_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CropParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::CropParams *)& ((arg1)->crop);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_coarse_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CoarseTransformParams *arg2 = (rtengine::procparams::CoarseTransformParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::CoarseTransformParams *)jarg2; 
  if (arg1) (arg1)->coarse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_coarse_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CoarseTransformParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::CoarseTransformParams *)& ((arg1)->coarse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_commonTrans_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CommonTransformParams *arg2 = (rtengine::procparams::CommonTransformParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::CommonTransformParams *)jarg2; 
  if (arg1) (arg1)->commonTrans = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_commonTrans_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CommonTransformParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::CommonTransformParams *)& ((arg1)->commonTrans);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_rotate_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::RotateParams *arg2 = (rtengine::procparams::RotateParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::RotateParams *)jarg2; 
  if (arg1) (arg1)->rotate = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_rotate_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::RotateParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::RotateParams *)& ((arg1)->rotate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_distortion_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DistortionParams *arg2 = (rtengine::procparams::DistortionParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::DistortionParams *)jarg2; 
  if (arg1) (arg1)->distortion = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_distortion_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DistortionParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::DistortionParams *)& ((arg1)->distortion);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_lensProf_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::LensProfParams *arg2 = (rtengine::procparams::LensProfParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::LensProfParams *)jarg2; 
  if (arg1) (arg1)->lensProf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_lensProf_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::LensProfParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::LensProfParams *)& ((arg1)->lensProf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_perspective_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::PerspectiveParams *arg2 = (rtengine::procparams::PerspectiveParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::PerspectiveParams *)jarg2; 
  if (arg1) (arg1)->perspective = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_perspective_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::PerspectiveParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::PerspectiveParams *)& ((arg1)->perspective);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_gradient_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::GradientParams *arg2 = (rtengine::procparams::GradientParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::GradientParams *)jarg2; 
  if (arg1) (arg1)->gradient = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_gradient_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::GradientParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::GradientParams *)& ((arg1)->gradient);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_pcvignette_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::PCVignetteParams *arg2 = (rtengine::procparams::PCVignetteParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::PCVignetteParams *)jarg2; 
  if (arg1) (arg1)->pcvignette = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_pcvignette_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::PCVignetteParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::PCVignetteParams *)& ((arg1)->pcvignette);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_cacorrection_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CACorrParams *arg2 = (rtengine::procparams::CACorrParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::CACorrParams *)jarg2; 
  if (arg1) (arg1)->cacorrection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_cacorrection_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::CACorrParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::CACorrParams *)& ((arg1)->cacorrection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_vignetting_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::VignettingParams *arg2 = (rtengine::procparams::VignettingParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::VignettingParams *)jarg2; 
  if (arg1) (arg1)->vignetting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_vignetting_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::VignettingParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::VignettingParams *)& ((arg1)->vignetting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_chmixer_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ChannelMixerParams *arg2 = (rtengine::procparams::ChannelMixerParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ChannelMixerParams *)jarg2; 
  if (arg1) (arg1)->chmixer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_chmixer_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ChannelMixerParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ChannelMixerParams *)& ((arg1)->chmixer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_blackwhite_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::BlackWhiteParams *arg2 = (rtengine::procparams::BlackWhiteParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::BlackWhiteParams *)jarg2; 
  if (arg1) (arg1)->blackwhite = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_blackwhite_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::BlackWhiteParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::BlackWhiteParams *)& ((arg1)->blackwhite);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_resize_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ResizeParams *arg2 = (rtengine::procparams::ResizeParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ResizeParams *)jarg2; 
  if (arg1) (arg1)->resize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_resize_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ResizeParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ResizeParams *)& ((arg1)->resize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_icm_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ColorManagementParams *arg2 = (rtengine::procparams::ColorManagementParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ColorManagementParams *)jarg2; 
  if (arg1) (arg1)->icm = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_icm_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ColorManagementParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ColorManagementParams *)& ((arg1)->icm);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_raw_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::RAWParams *arg2 = (rtengine::procparams::RAWParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2; 
  if (arg1) (arg1)->raw = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_raw_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::RAWParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::RAWParams *)& ((arg1)->raw);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_wavelet_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::WaveletParams *arg2 = (rtengine::procparams::WaveletParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::WaveletParams *)jarg2; 
  if (arg1) (arg1)->wavelet = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_wavelet_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::WaveletParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::WaveletParams *)& ((arg1)->wavelet);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_dirpyrequalizer_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DirPyrEqualizerParams *arg2 = (rtengine::procparams::DirPyrEqualizerParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::DirPyrEqualizerParams *)jarg2; 
  if (arg1) (arg1)->dirpyrequalizer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_dirpyrequalizer_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::DirPyrEqualizerParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::DirPyrEqualizerParams *)& ((arg1)->dirpyrequalizer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_hsvequalizer_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::HSVEqualizerParams *arg2 = (rtengine::procparams::HSVEqualizerParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::HSVEqualizerParams *)jarg2; 
  if (arg1) (arg1)->hsvequalizer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_hsvequalizer_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::HSVEqualizerParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::HSVEqualizerParams *)& ((arg1)->hsvequalizer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_filmSimulation_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::FilmSimulationParams *arg2 = (rtengine::procparams::FilmSimulationParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::FilmSimulationParams *)jarg2; 
  if (arg1) (arg1)->filmSimulation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_filmSimulation_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::FilmSimulationParams *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::FilmSimulationParams *)& ((arg1)->filmSimulation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_rank_set(void * jarg1, char jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  char arg2 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->rank = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ProcParams_rank_get(void * jarg1) {
  char jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  char result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (char) ((arg1)->rank);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_colorlabel_set(void * jarg1, char jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  char arg2 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->colorlabel = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ProcParams_colorlabel_get(void * jarg1) {
  char jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  char result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (char) ((arg1)->colorlabel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_inTrash_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->inTrash = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProcParams_inTrash_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  bool result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (bool) ((arg1)->inTrash);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_appVersion_set(void * jarg1, char * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->appVersion = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ProcParams_appVersion_get(void * jarg1) {
  char * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->appVersion);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_ppVersion_set(void * jarg1, int jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ppVersion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_ppVersion_get(void * jarg1) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (int) ((arg1)->ppVersion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_exif_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ExifPairs *arg2 = (rtengine::procparams::ExifPairs *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::ExifPairs *)jarg2; 
  if (arg1) (arg1)->exif = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_exif_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::ExifPairs *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::ExifPairs *)& ((arg1)->exif);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_iptc_set(void * jarg1, void * jarg2) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::IPTCPairs *arg2 = (rtengine::procparams::IPTCPairs *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (rtengine::procparams::IPTCPairs *)jarg2; 
  if (arg1) (arg1)->iptc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_iptc_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::IPTCPairs *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::IPTCPairs *)& ((arg1)->iptc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProcParams() {
  void * jresult ;
  rtengine::procparams::ProcParams *result = 0 ;
  
  result = (rtengine::procparams::ProcParams *)new rtengine::procparams::ProcParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_setDefaults(void * jarg1) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_save__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, void * jarg5) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring arg2 ;
  Glib::ustring arg3 ;
  bool arg4 ;
  ParamsEdited *arg5 = (ParamsEdited *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  if(!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg3)->assign(jarg3); 
  arg4 = jarg4 ? true : false; 
  arg5 = (ParamsEdited *)jarg5; 
  result = (int)(arg1)->save(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_save__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring arg2 ;
  Glib::ustring arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  if(!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg3)->assign(jarg3); 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->save(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_save__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring arg2 ;
  Glib::ustring arg3 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  if(!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg3)->assign(jarg3); 
  result = (int)(arg1)->save(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_save__SWIG_3(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_load__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring arg2 ;
  ParamsEdited *arg3 = (ParamsEdited *) 0 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (ParamsEdited *)jarg3; 
  result = (int)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProcParams_load__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcParams_create() {
  void * jresult ;
  rtengine::procparams::ProcParams *result = 0 ;
  
  result = (rtengine::procparams::ProcParams *)rtengine::procparams::ProcParams::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_destroy(void * jarg1) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  rtengine::procparams::ProcParams::destroy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_init() {
  rtengine::procparams::ProcParams::init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcParams_cleanup() {
  rtengine::procparams::ProcParams::cleanup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProcParams(void * jarg1) {
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PartialProfile_pparams_set(void * jarg1, void * jarg2) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  rtengine::procparams::ProcParams *arg2 = (rtengine::procparams::ProcParams *) 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  arg2 = (rtengine::procparams::ProcParams *)jarg2; 
  if (arg1) (arg1)->pparams = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PartialProfile_pparams_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  rtengine::procparams::ProcParams *result = 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  result = (rtengine::procparams::ProcParams *) ((arg1)->pparams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PartialProfile_pedited_set(void * jarg1, void * jarg2) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  ParamsEdited *arg2 = (ParamsEdited *) 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  arg2 = (ParamsEdited *)jarg2; 
  if (arg1) (arg1)->pedited = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PartialProfile_pedited_get(void * jarg1) {
  void * jresult ;
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  ParamsEdited *result = 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  result = (ParamsEdited *) ((arg1)->pedited);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PartialProfile__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  rtengine::procparams::PartialProfile *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (rtengine::procparams::PartialProfile *)new rtengine::procparams::PartialProfile(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PartialProfile__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  rtengine::procparams::PartialProfile *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (rtengine::procparams::PartialProfile *)new rtengine::procparams::PartialProfile(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PartialProfile__SWIG_2() {
  void * jresult ;
  rtengine::procparams::PartialProfile *result = 0 ;
  
  result = (rtengine::procparams::PartialProfile *)new rtengine::procparams::PartialProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PartialProfile__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  ParamsEdited *arg2 = (ParamsEdited *) 0 ;
  bool arg3 ;
  rtengine::procparams::PartialProfile *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (ParamsEdited *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (rtengine::procparams::PartialProfile *)new rtengine::procparams::PartialProfile(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PartialProfile__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  ParamsEdited *arg2 = (ParamsEdited *) 0 ;
  rtengine::procparams::PartialProfile *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  arg2 = (ParamsEdited *)jarg2; 
  result = (rtengine::procparams::PartialProfile *)new rtengine::procparams::PartialProfile(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PartialProfile__SWIG_5(void * jarg1) {
  void * jresult ;
  rtengine::procparams::ProcParams *arg1 = (rtengine::procparams::ProcParams *) 0 ;
  rtengine::procparams::PartialProfile *result = 0 ;
  
  arg1 = (rtengine::procparams::ProcParams *)jarg1; 
  result = (rtengine::procparams::PartialProfile *)new rtengine::procparams::PartialProfile(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PartialProfile_deleteInstance(void * jarg1) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  (arg1)->deleteInstance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PartialProfile_clearGeneral(void * jarg1) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  (arg1)->clearGeneral();
}


SWIGEXPORT int SWIGSTDCALL CSharp_PartialProfile_load(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PartialProfile_set(void * jarg1, unsigned int jarg2) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PartialProfile_applyTo(void * jarg1, void * jarg2) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  rtengine::procparams::ProcParams *arg2 = (rtengine::procparams::ProcParams *) 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  arg2 = (rtengine::procparams::ProcParams *)jarg2; 
  ((rtengine::procparams::PartialProfile const *)arg1)->applyTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PartialProfile(void * jarg1) {
  rtengine::procparams::PartialProfile *arg1 = (rtengine::procparams::PartialProfile *) 0 ;
  
  arg1 = (rtengine::procparams::PartialProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoPartialProfile() {
  void * jresult ;
  rtengine::procparams::AutoPartialProfile *result = 0 ;
  
  result = (rtengine::procparams::AutoPartialProfile *)new rtengine::procparams::AutoPartialProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoPartialProfile(void * jarg1) {
  rtengine::procparams::AutoPartialProfile *arg1 = (rtengine::procparams::AutoPartialProfile *) 0 ;
  
  arg1 = (rtengine::procparams::AutoPartialProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOSTORDER_get() {
  int jresult ;
  enum rtexif::ByteOrder result;
  
  result = (enum rtexif::ByteOrder)(enum rtexif::ByteOrder)rtexif::HOSTORDER;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_extractLensInfo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)rtexif::extractLensInfo(*arg1,*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sget2(void * jarg1, int jarg2) {
  unsigned short jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  rtexif::ByteOrder arg2 ;
  unsigned short result;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (rtexif::ByteOrder)jarg2; 
  result = (unsigned short)rtexif::sget2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sget4(void * jarg1, int jarg2) {
  int jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  rtexif::ByteOrder arg2 ;
  int result;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (rtexif::ByteOrder)jarg2; 
  result = (int)rtexif::sget4(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_int2_to_signed(unsigned short jarg1) {
  short jresult ;
  unsigned short arg1 ;
  short result;
  
  arg1 = (unsigned short)jarg1; 
  result = (short)rtexif::int2_to_signed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TIFFHeader_byteOrder_set(void * jarg1, unsigned short jarg2) {
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->byteOrder = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TIFFHeader_byteOrder_get(void * jarg1) {
  unsigned short jresult ;
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  unsigned short result;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  result = (unsigned short) ((arg1)->byteOrder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TIFFHeader__fixed_set(void * jarg1, unsigned short jarg2) {
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->fixed = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TIFFHeader__fixed_get(void * jarg1) {
  unsigned short jresult ;
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  unsigned short result;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  result = (unsigned short) ((arg1)->fixed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TIFFHeader_ifdOffset_set(void * jarg1, unsigned int jarg2) {
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ifdOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TIFFHeader_ifdOffset_get(void * jarg1) {
  unsigned int jresult ;
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  unsigned int result;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  result = (unsigned int) ((arg1)->ifdOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TIFFHeader() {
  void * jresult ;
  rtexif::TIFFHeader *result = 0 ;
  
  result = (rtexif::TIFFHeader *)new rtexif::TIFFHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TIFFHeader(void * jarg1) {
  rtexif::TIFFHeader *arg1 = (rtexif::TIFFHeader *) 0 ;
  
  arg1 = (rtexif::TIFFHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_ignore_set(void * jarg1, int jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  int arg2 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ignore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagAttrib_ignore_get(void * jarg1) {
  int jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  int result;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (int) ((arg1)->ignore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_action_set(void * jarg1, int jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::ActionCode arg2 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (rtexif::ActionCode)jarg2; 
  if (arg1) (arg1)->action = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagAttrib_action_get(void * jarg1) {
  int jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::ActionCode result;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (rtexif::ActionCode) ((arg1)->action);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_editable_set(void * jarg1, int jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  int arg2 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->editable = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagAttrib_editable_get(void * jarg1) {
  int jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  int result;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (int) ((arg1)->editable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_subdirAttribs_set(void * jarg1, void * jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::TagAttrib *arg2 = (rtexif::TagAttrib *) 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (rtexif::TagAttrib *)jarg2; 
  if (arg1) (arg1)->subdirAttribs = (rtexif::TagAttrib const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagAttrib_subdirAttribs_get(void * jarg1) {
  void * jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (rtexif::TagAttrib *) ((arg1)->subdirAttribs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_ID_set(void * jarg1, unsigned short jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TagAttrib_ID_get(void * jarg1) {
  unsigned short jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  unsigned short result;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (unsigned short) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_type_set(void * jarg1, int jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::TagType arg2 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (rtexif::TagType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagAttrib_type_get(void * jarg1) {
  int jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::TagType result;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (rtexif::TagType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_name_set(void * jarg1, char * jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TagAttrib_name_get(void * jarg1) {
  char * jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  char *result = 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagAttrib_interpreter_set(void * jarg1, void * jarg2) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::Interpreter *arg2 = (rtexif::Interpreter *) 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (rtexif::Interpreter *)jarg2; 
  if (arg1) (arg1)->interpreter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagAttrib_interpreter_get(void * jarg1) {
  void * jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  rtexif::Interpreter *result = 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  result = (rtexif::Interpreter *) ((arg1)->interpreter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagAttrib() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)new rtexif::TagAttrib();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagAttrib(void * jarg1) {
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_lookupAttrib(void * jarg1, char * jarg2) {
  void * jresult ;
  rtexif::TagAttrib *arg1 = (rtexif::TagAttrib *) 0 ;
  char *arg2 = (char *) 0 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::TagAttrib *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (rtexif::TagAttrib *)rtexif::lookupAttrib((rtexif::TagAttrib const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectory__SWIG_0() {
  void * jresult ;
  rtexif::TagDirectory *result = 0 ;
  
  result = (rtexif::TagDirectory *)new rtexif::TagDirectory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectory__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  rtexif::TagAttrib *arg4 = (rtexif::TagAttrib *) 0 ;
  rtexif::ByteOrder arg5 ;
  bool arg6 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (rtexif::TagAttrib *)jarg4; 
  arg5 = (rtexif::ByteOrder)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (rtexif::TagDirectory *)new rtexif::TagDirectory(arg1,arg2,arg3,(rtexif::TagAttrib const *)arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectory__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  rtexif::TagAttrib *arg4 = (rtexif::TagAttrib *) 0 ;
  rtexif::ByteOrder arg5 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (rtexif::TagAttrib *)jarg4; 
  arg5 = (rtexif::ByteOrder)jarg5; 
  result = (rtexif::TagDirectory *)new rtexif::TagDirectory(arg1,arg2,arg3,(rtexif::TagAttrib const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectory__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagAttrib *arg2 = (rtexif::TagAttrib *) 0 ;
  rtexif::ByteOrder arg3 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::TagAttrib *)jarg2; 
  arg3 = (rtexif::ByteOrder)jarg3; 
  result = (rtexif::TagDirectory *)new rtexif::TagDirectory(arg1,(rtexif::TagAttrib const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagDirectory(void * jarg1) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagDirectory_getOrder(void * jarg1) {
  int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::ByteOrder result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (rtexif::ByteOrder)((rtexif::TagDirectory const *)arg1)->getOrder();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getParent(void * jarg1) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (rtexif::TagDirectory *)(arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getRoot(void * jarg1) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (rtexif::TagDirectory *)(arg1)->getRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagDirectory_getCount(void * jarg1) {
  int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (int)((rtexif::TagDirectory const *)arg1)->getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getAttrib__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int arg2 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtexif::TagAttrib *)(arg1)->getAttrib(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getAttrib__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  char *arg2 = (char *) 0 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (rtexif::TagAttrib *)(arg1)->getAttrib((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getAttribP(void * jarg1, char * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  char *arg2 = (char *) 0 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (rtexif::TagAttrib *)(arg1)->getAttribP((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getAttribTable(void * jarg1) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (rtexif::TagAttrib *)(arg1)->getAttribTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getTag__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  char *arg2 = (char *) 0 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (rtexif::Tag *)((rtexif::TagDirectory const *)arg1)->getTag((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getTagP(void * jarg1, char * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  char *arg2 = (char *) 0 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (rtexif::Tag *)((rtexif::TagDirectory const *)arg1)->getTagP((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getTag__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int arg2 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtexif::Tag *)((rtexif::TagDirectory const *)arg1)->getTag(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_findTag(void * jarg1, char * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  char *arg2 = (char *) 0 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (rtexif::Tag *)((rtexif::TagDirectory const *)arg1)->findTag((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagDirectory_getXMPTagValue(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)((rtexif::TagDirectory const *)arg1)->getXMPTagValue((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_keepTag(void * jarg1, int jarg2) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int arg2 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->keepTag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_addTag(void * jarg1, void * jarg2) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  (arg1)->addTag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_addTagFront(void * jarg1, void * jarg2) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  (arg1)->addTagFront(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_replaceTag(void * jarg1, void * jarg2) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  (arg1)->replaceTag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_getTagByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int arg2 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtexif::Tag *)(arg1)->getTagByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_setOrder(void * jarg1, int jarg2) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::ByteOrder arg2 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::ByteOrder)jarg2; 
  (arg1)->setOrder(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagDirectory_calculateSize(void * jarg1) {
  int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (int)(arg1)->calculateSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagDirectory_write(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (int)(arg1)->write(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectory_clone(void * jarg1, void * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagDirectory *arg2 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::TagDirectory *)jarg2; 
  result = (rtexif::TagDirectory *)(arg1)->clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_applyChange(void * jarg1, char * jarg2, char * jarg3) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->applyChange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_printAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  ((rtexif::TagDirectory const *)arg1)->printAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_printAll__SWIG_1(void * jarg1) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  ((rtexif::TagDirectory const *)arg1)->printAll();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagDirectory_CPBDump__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9) {
  unsigned int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  Glib::ustring *arg2 = 0 ;
  Glib::ustring *arg3 = 0 ;
  Glib::ustring *arg4 = 0 ;
  Glib::ustring *arg5 = 0 ;
  CacheImageData *arg6 = (CacheImageData *) 0 ;
  bool arg7 ;
  rtengine::SafeKeyFile *arg8 = (rtengine::SafeKeyFile *) 0 ;
  Glib::ustring arg9 ;
  bool result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (CacheImageData *)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (rtengine::SafeKeyFile *)jarg8; 
  if(!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg9)->assign(jarg9); 
  result = (bool)((rtexif::TagDirectory const *)arg1)->CPBDump((Glib::ustring const &)*arg2,(Glib::ustring const &)*arg3,(Glib::ustring const &)*arg4,(Glib::ustring const &)*arg5,(CacheImageData const *)arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagDirectory_CPBDump__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, void * jarg6, unsigned int jarg7, void * jarg8) {
  unsigned int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  Glib::ustring *arg2 = 0 ;
  Glib::ustring *arg3 = 0 ;
  Glib::ustring *arg4 = 0 ;
  Glib::ustring *arg5 = 0 ;
  CacheImageData *arg6 = (CacheImageData *) 0 ;
  bool arg7 ;
  rtengine::SafeKeyFile *arg8 = (rtengine::SafeKeyFile *) 0 ;
  bool result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (CacheImageData *)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (rtengine::SafeKeyFile *)jarg8; 
  result = (bool)((rtexif::TagDirectory const *)arg1)->CPBDump((Glib::ustring const &)*arg2,(Glib::ustring const &)*arg3,(Glib::ustring const &)*arg4,(Glib::ustring const &)*arg5,(CacheImageData const *)arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagDirectory_CPBDump__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, void * jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  Glib::ustring *arg2 = 0 ;
  Glib::ustring *arg3 = 0 ;
  Glib::ustring *arg4 = 0 ;
  Glib::ustring *arg5 = 0 ;
  CacheImageData *arg6 = (CacheImageData *) 0 ;
  bool arg7 ;
  bool result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (CacheImageData *)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)((rtexif::TagDirectory const *)arg1)->CPBDump((Glib::ustring const &)*arg2,(Glib::ustring const &)*arg3,(Glib::ustring const &)*arg4,(Glib::ustring const &)*arg5,(CacheImageData const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagDirectory_sort(void * jarg1) {
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectoryTable__SWIG_0() {
  void * jresult ;
  rtexif::TagDirectoryTable *result = 0 ;
  
  result = (rtexif::TagDirectoryTable *)new rtexif::TagDirectoryTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectoryTable__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  rtexif::TagType arg5 ;
  rtexif::TagAttrib *arg6 = (rtexif::TagAttrib *) 0 ;
  rtexif::ByteOrder arg7 ;
  rtexif::TagDirectoryTable *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (rtexif::TagType)jarg5; 
  arg6 = (rtexif::TagAttrib *)jarg6; 
  arg7 = (rtexif::ByteOrder)jarg7; 
  result = (rtexif::TagDirectoryTable *)new rtexif::TagDirectoryTable(arg1,arg2,arg3,arg4,arg5,(rtexif::TagAttrib const *)arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagDirectoryTable__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  int arg4 ;
  rtexif::TagType arg5 ;
  rtexif::TagAttrib *arg6 = (rtexif::TagAttrib *) 0 ;
  rtexif::ByteOrder arg7 ;
  rtexif::TagDirectoryTable *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (rtexif::TagType)jarg5; 
  arg6 = (rtexif::TagAttrib *)jarg6; 
  arg7 = (rtexif::ByteOrder)jarg7; 
  result = (rtexif::TagDirectoryTable *)new rtexif::TagDirectoryTable(arg1,arg2,arg3,arg4,arg5,(rtexif::TagAttrib const *)arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagDirectoryTable(void * jarg1) {
  rtexif::TagDirectoryTable *arg1 = (rtexif::TagDirectoryTable *) 0 ;
  
  arg1 = (rtexif::TagDirectoryTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagDirectoryTable_calculateSize(void * jarg1) {
  int jresult ;
  rtexif::TagDirectoryTable *arg1 = (rtexif::TagDirectoryTable *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectoryTable *)jarg1; 
  result = (int)(arg1)->calculateSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagDirectoryTable_write(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  rtexif::TagDirectoryTable *arg1 = (rtexif::TagDirectoryTable *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectoryTable *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (int)(arg1)->write(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagDirectoryTable_clone(void * jarg1, void * jarg2) {
  void * jresult ;
  rtexif::TagDirectoryTable *arg1 = (rtexif::TagDirectoryTable *) 0 ;
  rtexif::TagDirectory *arg2 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::TagDirectoryTable *)jarg1; 
  arg2 = (rtexif::TagDirectory *)jarg2; 
  result = (rtexif::TagDirectory *)(arg1)->clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tag__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (int)jarg3; 
  result = (rtexif::Tag *)new rtexif::Tag(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tag__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagAttrib *arg2 = (rtexif::TagAttrib *) 0 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::TagAttrib *)jarg2; 
  result = (rtexif::Tag *)new rtexif::Tag(arg1,(rtexif::TagAttrib const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tag__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagAttrib *arg2 = (rtexif::TagAttrib *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  rtexif::TagType arg4 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::TagAttrib *)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (rtexif::TagType)jarg4; 
  result = (rtexif::Tag *)new rtexif::Tag(arg1,(rtexif::TagAttrib const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tag__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagAttrib *arg2 = (rtexif::TagAttrib *) 0 ;
  int arg3 ;
  rtexif::TagType arg4 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::TagAttrib *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (rtexif::TagType)jarg4; 
  result = (rtexif::Tag *)new rtexif::Tag(arg1,(rtexif::TagAttrib const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tag__SWIG_4(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtexif::TagAttrib *arg2 = (rtexif::TagAttrib *) 0 ;
  char *arg3 = (char *) 0 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtexif::TagAttrib *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (rtexif::Tag *)new rtexif::Tag(arg1,(rtexif::TagAttrib const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Tag(void * jarg1) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initType(void * jarg1, void * jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  rtexif::TagType arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (rtexif::TagType)jarg3; 
  (arg1)->initType(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initInt__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  rtexif::TagType arg3 ;
  int arg4 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (rtexif::TagType)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initInt(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initInt__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  rtexif::TagType arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (rtexif::TagType)jarg3; 
  (arg1)->initInt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initString(void * jarg1, char * jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->initString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initSubDir__SWIG_0(void * jarg1) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  (arg1)->initSubDir();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initSubDir__SWIG_1(void * jarg1, void * jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::TagDirectory *arg2 = (rtexif::TagDirectory *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (rtexif::TagDirectory *)jarg2; 
  (arg1)->initSubDir(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initUndefArray(void * jarg1, char * jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->initUndefArray((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initLongArray(void * jarg1, char * jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->initLongArray((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_initRational(void * jarg1, int jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->initRational(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_getID(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (int)((rtexif::Tag const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_getCount(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (int)((rtexif::Tag const *)arg1)->getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_getType(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::TagType result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (rtexif::TagType)((rtexif::Tag const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_getValue(void * jarg1) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (unsigned char *)((rtexif::Tag const *)arg1)->getValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_getSignedValue(void * jarg1) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  signed char *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (signed char *)((rtexif::Tag const *)arg1)->getSignedValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_getAttrib(void * jarg1) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::TagAttrib *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (rtexif::TagAttrib *)((rtexif::Tag const *)arg1)->getAttrib();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_getOrder(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::ByteOrder result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (rtexif::ByteOrder)((rtexif::Tag const *)arg1)->getOrder();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_getParent(void * jarg1) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (rtexif::TagDirectory *)((rtexif::Tag const *)arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_getValueSize(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (int)((rtexif::Tag const *)arg1)->getValueSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tag_getOwnMemory(void * jarg1) {
  unsigned int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  bool result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (bool)((rtexif::Tag const *)arg1)->getOwnMemory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_toInt__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  rtexif::TagType arg3 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (rtexif::TagType)jarg3; 
  result = (int)(arg1)->toInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_toInt__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->toInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_toInt__SWIG_2(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (int)(arg1)->toInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_fromInt(void * jarg1, int jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->fromInt(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Tag_toDouble__SWIG_0(void * jarg1, int jarg2) {
  double jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->toDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Tag_toDouble__SWIG_1(void * jarg1) {
  double jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  double result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (double)(arg1)->toDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_toDoubleArray__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)(arg1)->toDoubleArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_toDoubleArray__SWIG_1(void * jarg1) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  double *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (double *)(arg1)->toDoubleArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_toRational__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->toRational(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_toRational__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->toRational(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_toString__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->toString(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_toString__SWIG_1(void * jarg1, char * jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->toString(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_fromString__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->fromString((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_fromString__SWIG_1(void * jarg1, char * jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->fromString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_setInt__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  int arg3 ;
  rtexif::TagType arg4 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (rtexif::TagType)jarg4; 
  (arg1)->setInt(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_setInt__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setInt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_setInt__SWIG_2(void * jarg1, int jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setInt(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Tag_valueToString(void * jarg1) {
  char * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  std::string result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (arg1)->valueToString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Tag_nameToString__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->nameToString(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Tag_nameToString__SWIG_1(void * jarg1) {
  char * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  std::string result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (arg1)->nameToString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_valueFromString(void * jarg1, char * jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->valueFromString((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_calculateSize(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (int)(arg1)->calculateSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_write(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  result = (int)(arg1)->write(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_clone(void * jarg1, void * jarg2) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::TagDirectory *arg2 = (rtexif::TagDirectory *) 0 ;
  rtexif::Tag *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (rtexif::TagDirectory *)jarg2; 
  result = (rtexif::Tag *)(arg1)->clone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tag_getKeep(void * jarg1) {
  unsigned int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  bool result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (bool)(arg1)->getKeep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tag_setKeep(void * jarg1, unsigned int jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  bool arg2 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setKeep(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tag_isDirectory(void * jarg1) {
  unsigned int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  bool result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (bool)(arg1)->isDirectory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_getDirectory__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  int arg2 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtexif::TagDirectory *)(arg1)->getDirectory(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tag_getDirectory__SWIG_1(void * jarg1) {
  void * jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (rtexif::TagDirectory *)(arg1)->getDirectory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tag_getMakerNoteFormat(void * jarg1) {
  int jresult ;
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::MNKind result;
  
  arg1 = (rtexif::Tag *)jarg1; 
  result = (rtexif::MNKind)(arg1)->getMakerNoteFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_parse__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  bool arg3 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (rtexif::TagDirectory *)rtexif::ExifManager::parse(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_parse__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtexif::TagDirectory *)rtexif::ExifManager::parse(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_parseJPEG(void * jarg1) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  result = (rtexif::TagDirectory *)rtexif::ExifManager::parseJPEG(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_parseTIFF__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  bool arg2 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (rtexif::TagDirectory *)rtexif::ExifManager::parseTIFF(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_parseTIFF__SWIG_1(void * jarg1) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  result = (rtexif::TagDirectory *)rtexif::ExifManager::parseTIFF(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_parseCIFF__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (rtexif::TagDirectory *)rtexif::ExifManager::parseCIFF(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExifManager_parseCIFF__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  rtexif::TagDirectory *arg4 = (rtexif::TagDirectory *) 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (rtexif::TagDirectory *)jarg4; 
  rtexif::ExifManager::parseCIFF(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExifManager_getDefaultTIFFTags(void * jarg1) {
  void * jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  std::vector< rtexif::Tag * > *result = 0 ;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  result = (std::vector< rtexif::Tag * > *) &rtexif::ExifManager::getDefaultTIFFTags(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExifManager_createJPEGMarker(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtengine::procparams::ExifPairs *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtengine::procparams::ExifPairs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::ExifPairs const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned char *)jarg5; 
  result = (int)rtexif::ExifManager::createJPEGMarker((rtexif::TagDirectory const *)arg1,(std::map< Glib::ustring,Glib::ustring,std::less< Glib::ustring > > const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExifManager_createTIFFHeader(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, char * jarg6, int jarg7, char * jarg8, int jarg9, void * jarg10) {
  int jresult ;
  rtexif::TagDirectory *arg1 = (rtexif::TagDirectory *) 0 ;
  rtengine::procparams::ExifPairs *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  unsigned char *arg10 = (unsigned char *) 0 ;
  int result;
  
  arg1 = (rtexif::TagDirectory *)jarg1; 
  arg2 = (rtengine::procparams::ExifPairs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::ExifPairs const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (unsigned char *)jarg10; 
  result = (int)rtexif::ExifManager::createTIFFHeader((rtexif::TagDirectory const *)arg1,(std::map< Glib::ustring,Glib::ustring,std::less< Glib::ustring > > const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7,(char const *)arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExifManager() {
  void * jresult ;
  rtexif::ExifManager *result = 0 ;
  
  result = (rtexif::ExifManager *)new rtexif::ExifManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExifManager(void * jarg1) {
  rtexif::ExifManager *arg1 = (rtexif::ExifManager *) 0 ;
  
  arg1 = (rtexif::ExifManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Interpreter() {
  void * jresult ;
  rtexif::Interpreter *result = 0 ;
  
  result = (rtexif::Interpreter *)new rtexif::Interpreter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Interpreter(void * jarg1) {
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Interpreter_toString(void * jarg1, void * jarg2) {
  char * jresult ;
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  std::string result;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  result = (arg1)->toString(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Interpreter_fromString(void * jarg1, void * jarg2, char * jarg3) {
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->fromString(arg2,(std::string const &)*arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Interpreter_toDouble__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  double jresult ;
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  int arg3 ;
  double result;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->toDouble(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Interpreter_toDouble__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  double result;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  result = (double)(arg1)->toDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Interpreter_toInt__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  int arg3 ;
  rtexif::TagType arg4 ;
  int result;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (rtexif::TagType)jarg4; 
  result = (int)(arg1)->toInt(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Interpreter_toInt__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->toInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Interpreter_toInt__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  int result;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  result = (int)(arg1)->toInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stdInterpreter_set(void * jarg1) {
  rtexif::Interpreter *arg1 = (rtexif::Interpreter *) 0 ;
  
  arg1 = (rtexif::Interpreter *)jarg1; 
  rtexif::stdInterpreter = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stdInterpreter_get() {
  void * jresult ;
  rtexif::Interpreter *result = 0 ;
  
  result = (rtexif::Interpreter *)&rtexif::stdInterpreter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChoiceInterpreter() {
  void * jresult ;
  rtexif::ChoiceInterpreter *result = 0 ;
  
  result = (rtexif::ChoiceInterpreter *)new rtexif::ChoiceInterpreter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ChoiceInterpreter_toString(void * jarg1, void * jarg2) {
  char * jresult ;
  rtexif::ChoiceInterpreter *arg1 = (rtexif::ChoiceInterpreter *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  std::string result;
  
  arg1 = (rtexif::ChoiceInterpreter *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  result = (arg1)->toString(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChoiceInterpreter(void * jarg1) {
  rtexif::ChoiceInterpreter *arg1 = (rtexif::ChoiceInterpreter *) 0 ;
  
  arg1 = (rtexif::ChoiceInterpreter *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_getTypeSize(int jarg1) {
  int jresult ;
  rtexif::TagType arg1 ;
  int result;
  
  arg1 = (rtexif::TagType)jarg1; 
  result = (int)rtexif::getTypeSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_exifAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::exifAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpsAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::gpsAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_iopAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::iopAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ifdAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::ifdAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nikon2Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::nikon2Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nikon3Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::nikon3Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_canonAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::canonAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxLensDataAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxLensDataAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxLensInfoQAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxLensInfoQAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxLensCorrAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxLensCorrAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxAEInfoAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxAEInfoAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxAEInfo2Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxAEInfo2Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxAEInfo3Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxAEInfo3Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxCameraSettingsAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxCameraSettingsAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxFlashInfoAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxFlashInfoAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxSRInfoAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxSRInfoAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxSRInfo2Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxSRInfo2Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxBatteryInfoAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxBatteryInfoAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pentaxCameraInfoAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::pentaxCameraInfoAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fujiAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::fujiAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_minoltaAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::minoltaAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyTag9405Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyTag9405Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyCameraInfoAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyCameraInfoAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyCameraInfo2Attribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyCameraInfo2Attribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyCameraSettingsAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyCameraSettingsAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyCameraSettingsAttribs2_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyCameraSettingsAttribs2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sonyCameraSettingsAttribs3_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::sonyCameraSettingsAttribs3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_olympusAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::olympusAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kodakIfdAttribs_get() {
  void * jresult ;
  rtexif::TagAttrib *result = 0 ;
  
  result = (rtexif::TagAttrib *)(rtexif::TagAttrib *)rtexif::kodakIfdAttribs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_parseKodakIfdTextualInfo(void * jarg1, void * jarg2) {
  rtexif::Tag *arg1 = (rtexif::Tag *) 0 ;
  rtexif::Tag *arg2 = (rtexif::Tag *) 0 ;
  
  arg1 = (rtexif::Tag *)jarg1; 
  arg2 = (rtexif::Tag *)jarg2; 
  rtexif::parseKodakIfdTextualInfo(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawMetaDataLocation_exifBase_set(void * jarg1, int jarg2) {
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->exifBase = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RawMetaDataLocation_exifBase_get(void * jarg1) {
  int jresult ;
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  int result;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  result = (int) ((arg1)->exifBase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawMetaDataLocation_ciffBase_set(void * jarg1, int jarg2) {
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ciffBase = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RawMetaDataLocation_ciffBase_get(void * jarg1) {
  int jresult ;
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  int result;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  result = (int) ((arg1)->ciffBase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawMetaDataLocation_ciffLength_set(void * jarg1, int jarg2) {
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ciffLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RawMetaDataLocation_ciffLength_get(void * jarg1) {
  int jresult ;
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  int result;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  result = (int) ((arg1)->ciffLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RawMetaDataLocation() {
  void * jresult ;
  rtengine::RawMetaDataLocation *result = 0 ;
  
  result = (rtengine::RawMetaDataLocation *)new rtengine::RawMetaDataLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RawMetaDataLocation(void * jarg1) {
  rtengine::RawMetaDataLocation *arg1 = (rtengine::RawMetaDataLocation *) 0 ;
  
  arg1 = (rtengine::RawMetaDataLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_R90_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_R180_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_R270_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_VFLIP_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_HFLIP_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TR_ROT_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHECK_BOUNDS_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sImage8_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)rtengine::sImage8;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sImage16_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)rtengine::sImage16;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sImagefloat_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)rtengine::sImagefloat;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_getCoarseBitMask(void * jarg1) {
  int jresult ;
  rtengine::procparams::CoarseTransformParams *arg1 = 0 ;
  int result;
  
  arg1 = (rtengine::procparams::CoarseTransformParams *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::CoarseTransformParams const & type is null", 0);
    return 0;
  } 
  result = (int)rtengine::getCoarseBitMask((rtengine::procparams::CoarseTransformParams const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageDatas(void * jarg1) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_allocate(void * jarg1, int jarg2, int jarg3) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->allocate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_rotate(void * jarg1, int jarg2) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->rotate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_flushData(void * jarg1) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  (arg1)->flushData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_hflip(void * jarg1) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  (arg1)->hflip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_vflip(void * jarg1) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  (arg1)->vflip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_readData(void * jarg1, void * jarg2) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->readData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_writeData(void * jarg1, void * jarg2) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->writeData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_normalizeInt(void * jarg1, int jarg2, int jarg3) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->normalizeInt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_normalizeFloat(void * jarg1, float jarg2, float jarg3) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->normalizeFloat(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_computeHistogramAutoWB(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  int *arg5 = 0 ;
  LUTu *arg6 = 0 ;
  int arg7 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (LUTu *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUTu & type is null", 0);
    return ;
  } 
  arg7 = (int)jarg7; 
  (arg1)->computeHistogramAutoWB(*arg2,*arg3,*arg4,*arg5,*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_getSpotWBData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, int jarg11) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  std::vector< Coord2D > *arg8 = 0 ;
  std::vector< Coord2D > *arg9 = 0 ;
  std::vector< Coord2D > *arg10 = 0 ;
  int arg11 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (std::vector< Coord2D > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Coord2D > & type is null", 0);
    return ;
  } 
  arg9 = (std::vector< Coord2D > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Coord2D > & type is null", 0);
    return ;
  } 
  arg10 = (std::vector< Coord2D > *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Coord2D > & type is null", 0);
    return ;
  } 
  arg11 = (int)jarg11; 
  (arg1)->getSpotWBData(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageDatas_getAutoWBMultipliers(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getAutoWBMultipliers(*arg2,*arg3,*arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageDatas_getType(void * jarg1) {
  char * jresult ;
  rtengine::ImageDatas *arg1 = (rtengine::ImageDatas *) 0 ;
  char *result = 0 ;
  
  arg1 = (rtengine::ImageDatas *)jarg1; 
  result = (char *)((rtengine::ImageDatas const *)arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageDatas() {
  void * jresult ;
  rtengine::ImageDatas *result = 0 ;
  
  result = (rtengine::ImageDatas *)new rtengine::ImageDatas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImage(void * jarg1) {
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  
  arg1 = (rtengine::IImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IImage_getMutex(void * jarg1) {
  void * jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  MyMutex *result = 0 ;
  
  arg1 = (rtengine::IImage *)jarg1; 
  result = (MyMutex *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IImage_getProfile(void * jarg1) {
  void * jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  cmsHPROFILE result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  result = (arg1)->getProfile();
  jresult = new cmsHPROFILE((const cmsHPROFILE &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_getBitsPerPixel(void * jarg1) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  result = (int)(arg1)->getBitsPerPixel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveToFile(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveToFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsPNG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsPNG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsPNG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsPNG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsJPEG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsJPEG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsJPEG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsJPEG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsTIFF__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsTIFF__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IImage_saveAsTIFF__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::IImage *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsTIFF(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IImage_setSaveProgressListener(void * jarg1, void * jarg2) {
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::IImage *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setSaveProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IImage_free(void * jarg1) {
  rtengine::IImage *arg1 = (rtengine::IImage *) 0 ;
  
  arg1 = (rtengine::IImage *)jarg1; 
  (arg1)->free();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImagefloat(void * jarg1) {
  rtengine::IImagefloat *arg1 = (rtengine::IImagefloat *) 0 ;
  
  arg1 = (rtengine::IImagefloat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImage8(void * jarg1) {
  rtengine::IImage8 *arg1 = (rtengine::IImage8 *) 0 ;
  
  arg1 = (rtengine::IImage8 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImage16(void * jarg1) {
  rtengine::IImage16 *arg1 = (rtengine::IImage16 *) 0 ;
  
  arg1 = (rtengine::IImage16 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bilinearInterp(void * jarg1, int jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  rtengine::bilinearInterp((unsigned char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nearestInterp(void * jarg1, int jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  rtengine::nearestInterp((unsigned char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_rotate(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  rtengine::rotate(arg1,*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_hflip(void * jarg1, int jarg2, int jarg3) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  rtengine::hflip(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vflip(void * jarg1, int jarg2, int jarg3) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  rtengine::vflip(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MyMutex() {
  void * jresult ;
  MyMutex *result = 0 ;
  
  result = (MyMutex *)new MyMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyMutex__lock(void * jarg1) {
  MyMutex *arg1 = (MyMutex *) 0 ;
  
  arg1 = (MyMutex *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MyMutex_trylock(void * jarg1) {
  unsigned int jresult ;
  MyMutex *arg1 = (MyMutex *) 0 ;
  bool result;
  
  arg1 = (MyMutex *)jarg1; 
  result = (bool)(arg1)->trylock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyMutex_unlock(void * jarg1) {
  MyMutex *arg1 = (MyMutex *) 0 ;
  
  arg1 = (MyMutex *)jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MyMutex(void * jarg1) {
  MyMutex *arg1 = (MyMutex *) 0 ;
  
  arg1 = (MyMutex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyRWMutex_writerCount_set(void * jarg1, unsigned long jarg2) {
  MyRWMutex *arg1 = (MyRWMutex *) 0 ;
  size_t arg2 ;
  
  arg1 = (MyRWMutex *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->writerCount = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MyRWMutex_writerCount_get(void * jarg1) {
  unsigned long jresult ;
  MyRWMutex *arg1 = (MyRWMutex *) 0 ;
  size_t result;
  
  arg1 = (MyRWMutex *)jarg1; 
  result =  ((arg1)->writerCount);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyRWMutex_readerCount_set(void * jarg1, unsigned long jarg2) {
  MyRWMutex *arg1 = (MyRWMutex *) 0 ;
  size_t arg2 ;
  
  arg1 = (MyRWMutex *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->readerCount = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MyRWMutex_readerCount_get(void * jarg1) {
  unsigned long jresult ;
  MyRWMutex *arg1 = (MyRWMutex *) 0 ;
  size_t result;
  
  arg1 = (MyRWMutex *)jarg1; 
  result =  ((arg1)->readerCount);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MyRWMutex() {
  void * jresult ;
  MyRWMutex *result = 0 ;
  
  result = (MyRWMutex *)new MyRWMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MyRWMutex(void * jarg1) {
  MyRWMutex *arg1 = (MyRWMutex *) 0 ;
  
  arg1 = (MyRWMutex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MyReaderLock(void * jarg1) {
  void * jresult ;
  MyRWMutex *arg1 = 0 ;
  MyReaderLock *result = 0 ;
  
  arg1 = (MyRWMutex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MyRWMutex & type is null", 0);
    return 0;
  } 
  result = (MyReaderLock *)new MyReaderLock(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyReaderLock_acquire(void * jarg1) {
  MyReaderLock *arg1 = (MyReaderLock *) 0 ;
  
  arg1 = (MyReaderLock *)jarg1; 
  (arg1)->acquire();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MyReaderLock(void * jarg1) {
  MyReaderLock *arg1 = (MyReaderLock *) 0 ;
  
  arg1 = (MyReaderLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyReaderLock_release(void * jarg1) {
  MyReaderLock *arg1 = (MyReaderLock *) 0 ;
  
  arg1 = (MyReaderLock *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MyWriterLock(void * jarg1) {
  void * jresult ;
  MyRWMutex *arg1 = 0 ;
  MyWriterLock *result = 0 ;
  
  arg1 = (MyRWMutex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MyRWMutex & type is null", 0);
    return 0;
  } 
  result = (MyWriterLock *)new MyWriterLock(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyWriterLock_acquire(void * jarg1) {
  MyWriterLock *arg1 = (MyWriterLock *) 0 ;
  
  arg1 = (MyWriterLock *)jarg1; 
  (arg1)->acquire();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MyWriterLock(void * jarg1) {
  MyWriterLock *arg1 = (MyWriterLock *) 0 ;
  
  arg1 = (MyWriterLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MyWriterLock_release(void * jarg1) {
  MyWriterLock *arg1 = (MyWriterLock *) 0 ;
  
  arg1 = (MyWriterLock *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT int SWIGSTDCALL CSharp_STARTUPDIR_CURRENT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STARTUPDIR_HOME_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STARTUPDIR_CUSTOM_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STARTUPDIR_LAST_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DEFPROFILE_RAW_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("${G}/Default");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DEFPROFILE_IMG_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("Neutral");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DEFPROFILE_INTERNAL_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("Neutral");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_format_set(void * jarg1, char * jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (SaveFormat *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SaveFormat_format_get(void * jarg1) {
  char * jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->format);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_pngBits_set(void * jarg1, int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pngBits = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SaveFormat_pngBits_get(void * jarg1) {
  int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (int) ((arg1)->pngBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_pngCompression_set(void * jarg1, int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pngCompression = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SaveFormat_pngCompression_get(void * jarg1) {
  int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (int) ((arg1)->pngCompression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_jpegQuality_set(void * jarg1, int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jpegQuality = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SaveFormat_jpegQuality_get(void * jarg1) {
  int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (int) ((arg1)->jpegQuality);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_jpegSubSamp_set(void * jarg1, int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jpegSubSamp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SaveFormat_jpegSubSamp_get(void * jarg1) {
  int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (int) ((arg1)->jpegSubSamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_tiffBits_set(void * jarg1, int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tiffBits = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SaveFormat_tiffBits_get(void * jarg1) {
  int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  int result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (int) ((arg1)->tiffBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_tiffUncompressed_set(void * jarg1, unsigned int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  bool arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tiffUncompressed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SaveFormat_tiffUncompressed_get(void * jarg1) {
  unsigned int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  bool result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (bool) ((arg1)->tiffUncompressed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveFormat_saveParams_set(void * jarg1, unsigned int jarg2) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  bool arg2 ;
  
  arg1 = (SaveFormat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->saveParams = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SaveFormat_saveParams_get(void * jarg1) {
  unsigned int jresult ;
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  bool result;
  
  arg1 = (SaveFormat *)jarg1; 
  result = (bool) ((arg1)->saveParams);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SaveFormat() {
  void * jresult ;
  SaveFormat *result = 0 ;
  
  result = (SaveFormat *)new SaveFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SaveFormat(void * jarg1) {
  SaveFormat *arg1 = (SaveFormat *) 0 ;
  
  arg1 = (SaveFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_savesParamsAtExit_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->savesParamsAtExit = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_savesParamsAtExit_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->savesParamsAtExit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveFormat_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  SaveFormat *arg2 = (SaveFormat *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (SaveFormat *)jarg2; 
  if (arg1) (arg1)->saveFormat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_saveFormat_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  SaveFormat *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (SaveFormat *)& ((arg1)->saveFormat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveFormatBatch_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  SaveFormat *arg2 = (SaveFormat *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (SaveFormat *)jarg2; 
  if (arg1) (arg1)->saveFormatBatch = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_saveFormatBatch_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  SaveFormat *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (SaveFormat *)& ((arg1)->saveFormatBatch);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_savePathTemplate_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->savePathTemplate = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_savePathTemplate_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->savePathTemplate);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_savePathFolder_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->savePathFolder = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_savePathFolder_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->savePathFolder);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveUsePathTemplate_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->saveUsePathTemplate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_saveUsePathTemplate_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->saveUsePathTemplate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_defProfRaw_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->defProfRaw = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_defProfRaw_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->defProfRaw);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_defProfImg_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->defProfImg = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_defProfImg_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->defProfImg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_dateFormat_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dateFormat = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_dateFormat_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->dateFormat);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_adjusterDelay_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->adjusterDelay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_adjusterDelay_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->adjusterDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_startupDir_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->startupDir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_startupDir_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->startupDir);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_dirBrowserSortType_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Gtk::SortType arg2 ;
  Gtk::SortType *argp2 ;
  
  arg1 = (Options *)jarg1; 
  argp2 = (Gtk::SortType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Gtk::SortType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dirBrowserSortType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_dirBrowserSortType_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  Gtk::SortType result;
  
  arg1 = (Options *)jarg1; 
  result =  ((arg1)->dirBrowserSortType);
  jresult = new Gtk::SortType((const Gtk::SortType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_startupPath_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->startupPath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_startupPath_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->startupPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_profilePath_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->profilePath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_profilePath_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->profilePath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_useBundledProfiles_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useBundledProfiles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_useBundledProfiles_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->useBundledProfiles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_loadSaveProfilePath_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->loadSaveProfilePath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_loadSaveProfilePath_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->loadSaveProfilePath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastSaveAsPath_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastSaveAsPath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastSaveAsPath_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastSaveAsPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveAsDialogWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->saveAsDialogWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_saveAsDialogWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->saveAsDialogWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveAsDialogHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->saveAsDialogHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_saveAsDialogHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->saveAsDialogHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_toolPanelWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->toolPanelWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_toolPanelWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->toolPanelWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_browserToolPanelWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->browserToolPanelWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_browserToolPanelWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->browserToolPanelWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_browserToolPanelHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->browserToolPanelHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_browserToolPanelHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->browserToolPanelHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_browserToolPanelOpened_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->browserToolPanelOpened = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_browserToolPanelOpened_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->browserToolPanelOpened);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_browserDirPanelOpened_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->browserDirPanelOpened = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_browserDirPanelOpened_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->browserDirPanelOpened);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_editorFilmStripOpened_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->editorFilmStripOpened = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_editorFilmStripOpened_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->editorFilmStripOpened);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_historyPanelWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->historyPanelWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_historyPanelWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->historyPanelWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_font_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->font = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_font_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->font);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_windowWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->windowWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_windowWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->windowWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_windowHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->windowHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_windowHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->windowHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_windowX_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->windowX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_windowX_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->windowX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_windowY_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->windowY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_windowY_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->windowY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_windowMaximized_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->windowMaximized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_windowMaximized_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->windowMaximized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_detailWindowWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailWindowWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_detailWindowWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->detailWindowWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_detailWindowHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detailWindowHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_detailWindowHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->detailWindowHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_dirBrowserWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dirBrowserWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_dirBrowserWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->dirBrowserWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_dirBrowserHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dirBrowserHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_dirBrowserHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->dirBrowserHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_preferencesWidth_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->preferencesWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_preferencesWidth_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->preferencesWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_preferencesHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->preferencesHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_preferencesHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->preferencesHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastScale_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lastScale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_lastScale_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->lastScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_panAccelFactor_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->panAccelFactor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_panAccelFactor_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->panAccelFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastCropSize_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lastCropSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_lastCropSize_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->lastCropSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fbOnlyRaw_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fbOnlyRaw = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fbOnlyRaw_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fbOnlyRaw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fbShowDateTime_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fbShowDateTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fbShowDateTime_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fbShowDateTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fbShowBasicExif_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fbShowBasicExif = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fbShowBasicExif_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fbShowBasicExif);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fbShowExpComp_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fbShowExpComp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fbShowExpComp_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fbShowExpComp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fbShowHidden_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fbShowHidden = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fbShowHidden_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fbShowHidden);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fbArrangement_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fbArrangement = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_fbArrangement_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->fbArrangement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_multiUser_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->multiUser = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_multiUser_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->multiUser);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_rtdir_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  Options::rtdir = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_rtdir_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &Options::rtdir;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_version_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->version = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_version_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->version);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_thumbSize_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thumbSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_thumbSize_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->thumbSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_thumbSizeTab_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thumbSizeTab = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_thumbSizeTab_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->thumbSizeTab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_thumbSizeQueue_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thumbSizeQueue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_thumbSizeQueue_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->thumbSizeQueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_sameThumbSize_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sameThumbSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_sameThumbSize_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->sameThumbSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showHistory_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showHistory = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showHistory_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showHistory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showFilePanelState_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->showFilePanelState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_showFilePanelState_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->showFilePanelState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showInfo_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showInfo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showInfo_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_mainNBVertical_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mainNBVertical = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_mainNBVertical_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->mainNBVertical);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_cropPPI_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cropPPI = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_cropPPI_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->cropPPI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showClippedHighlights_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showClippedHighlights = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showClippedHighlights_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showClippedHighlights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showClippedShadows_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showClippedShadows = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showClippedShadows_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showClippedShadows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_highlightThreshold_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->highlightThreshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_highlightThreshold_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->highlightThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_shadowThreshold_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->shadowThreshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_shadowThreshold_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->shadowThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_blinkClipped_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->blinkClipped = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_blinkClipped_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->blinkClipped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_bgcolor_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bgcolor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_bgcolor_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->bgcolor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_language_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->language = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_language_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->language);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_languageAutoDetect_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->languageAutoDetect = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_languageAutoDetect_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->languageAutoDetect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_theme_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->theme = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_theme_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->theme);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_slimUI_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->slimUI = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_slimUI_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->slimUI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_useSystemTheme_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useSystemTheme = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_useSystemTheme_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->useSystemTheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_cacheBaseDir_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  Options::cacheBaseDir = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_cacheBaseDir_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &Options::cacheBaseDir;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_autoSuffix_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoSuffix = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_autoSuffix_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->autoSuffix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_forceFormatOpts_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->forceFormatOpts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_forceFormatOpts_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->forceFormatOpts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveMethodNum_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->saveMethodNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_saveMethodNum_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->saveMethodNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveParamsFile_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->saveParamsFile = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_saveParamsFile_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->saveParamsFile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_saveParamsCache_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->saveParamsCache = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_saveParamsCache_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->saveParamsCache);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_paramsLoadLocation_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  PPLoadLocation arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (PPLoadLocation)jarg2; 
  if (arg1) (arg1)->paramsLoadLocation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_paramsLoadLocation_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  PPLoadLocation result;
  
  arg1 = (Options *)jarg1; 
  result = (PPLoadLocation) ((arg1)->paramsLoadLocation);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_procQueueEnabled_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->procQueueEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_procQueueEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->procQueueEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_gimpDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gimpDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_gimpDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->gimpDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_psDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->psDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_psDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->psDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_customEditorProg_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->customEditorProg = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_customEditorProg_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->customEditorProg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_CPBPath_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CPBPath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_CPBPath_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->CPBPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_CPBKeys_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  CPBKeyType arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (CPBKeyType)jarg2; 
  if (arg1) (arg1)->CPBKeys = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_CPBKeys_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  CPBKeyType result;
  
  arg1 = (Options *)jarg1; 
  result = (CPBKeyType) ((arg1)->CPBKeys);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_editorToSendTo_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->editorToSendTo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_editorToSendTo_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->editorToSendTo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_maxThumbnailHeight_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxThumbnailHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_maxThumbnailHeight_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->maxThumbnailHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_maxCacheEntries_set(void * jarg1, unsigned long jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::size_t arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  if (arg1) (arg1)->maxCacheEntries = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Options_maxCacheEntries_get(void * jarg1) {
  unsigned long jresult ;
  Options *arg1 = (Options *) 0 ;
  std::size_t result;
  
  arg1 = (Options *)jarg1; 
  result =  ((arg1)->maxCacheEntries);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_thumbnailFormat_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  ThFileType arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (ThFileType)jarg2; 
  if (arg1) (arg1)->thumbnailFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_thumbnailFormat_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  ThFileType result;
  
  arg1 = (Options *)jarg1; 
  result = (ThFileType) ((arg1)->thumbnailFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_thumbInterp_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->thumbInterp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_thumbInterp_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->thumbInterp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_liveThumbnails_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->liveThumbnails = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_liveThumbnails_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->liveThumbnails);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_parseExtensions_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *arg2 = (std::vector< Glib::ustring > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< Glib::ustring > *)jarg2; 
  if (arg1) (arg1)->parseExtensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_parseExtensions_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< Glib::ustring > *)& ((arg1)->parseExtensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_parseExtensionsEnabled_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< int > *)jarg2; 
  if (arg1) (arg1)->parseExtensionsEnabled = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_parseExtensionsEnabled_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< int > *)& ((arg1)->parseExtensionsEnabled);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_parsedExtensions_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *arg2 = (std::vector< Glib::ustring > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< Glib::ustring > *)jarg2; 
  if (arg1) (arg1)->parsedExtensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_parsedExtensions_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< Glib::ustring > *)& ((arg1)->parsedExtensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_tpOpen_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< int > *)jarg2; 
  if (arg1) (arg1)->tpOpen = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_tpOpen_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< int > *)& ((arg1)->tpOpen);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_baBehav_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< int > *)jarg2; 
  if (arg1) (arg1)->baBehav = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_baBehav_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< int > *)& ((arg1)->baBehav);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_rtSettings_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  rtengine::Settings *arg2 = (rtengine::Settings *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (rtengine::Settings *)jarg2; 
  if (arg1) (arg1)->rtSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_rtSettings_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  rtengine::Settings *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (rtengine::Settings *)& ((arg1)->rtSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_favoriteDirs_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *arg2 = (std::vector< Glib::ustring > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< Glib::ustring > *)jarg2; 
  if (arg1) (arg1)->favoriteDirs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_favoriteDirs_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< Glib::ustring > *)& ((arg1)->favoriteDirs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_renameTemplates_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *arg2 = (std::vector< Glib::ustring > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< Glib::ustring > *)jarg2; 
  if (arg1) (arg1)->renameTemplates = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_renameTemplates_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< Glib::ustring > *)& ((arg1)->renameTemplates);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_renameUseTemplates_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->renameUseTemplates = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_renameUseTemplates_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->renameUseTemplates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_internalThumbIfUntouched_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->internalThumbIfUntouched = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_internalThumbIfUntouched_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->internalThumbIfUntouched);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_overwriteOutputFile_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overwriteOutputFile = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_overwriteOutputFile_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->overwriteOutputFile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_thumbnailZoomRatios_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->thumbnailZoomRatios = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_thumbnailZoomRatios_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->thumbnailZoomRatios);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_overlayedFileNames_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overlayedFileNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_overlayedFileNames_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->overlayedFileNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_filmStripOverlayedFileNames_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->filmStripOverlayedFileNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_filmStripOverlayedFileNames_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->filmStripOverlayedFileNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showFileNames_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showFileNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showFileNames_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showFileNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_filmStripShowFileNames_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->filmStripShowFileNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_filmStripShowFileNames_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->filmStripShowFileNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_tabbedUI_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tabbedUI = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_tabbedUI_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->tabbedUI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_previewSizeTab_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->previewSizeTab = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_previewSizeTab_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->previewSizeTab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_previewSizeBrowser_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->previewSizeBrowser = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_previewSizeBrowser_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->previewSizeBrowser);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_rememberZoomAndPan_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rememberZoomAndPan = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_rememberZoomAndPan_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->rememberZoomAndPan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_multiDisplayMode_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->multiDisplayMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_multiDisplayMode_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->multiDisplayMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_cutOverlayBrush_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->cutOverlayBrush = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_cutOverlayBrush_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->cutOverlayBrush);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_navGuideBrush_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  if (arg1) (arg1)->navGuideBrush = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_navGuideBrush_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< double > *)& ((arg1)->navGuideBrush);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_sndBatchQueueDone_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->sndBatchQueueDone = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_sndBatchQueueDone_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->sndBatchQueueDone);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_sndLngEditProcDone_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->sndLngEditProcDone = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_sndLngEditProcDone_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->sndLngEditProcDone);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_sndLngEditProcDoneSecs_set(void * jarg1, double jarg2) {
  Options *arg1 = (Options *) 0 ;
  double arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sndLngEditProcDoneSecs = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Options_sndLngEditProcDoneSecs_get(void * jarg1) {
  double jresult ;
  Options *arg1 = (Options *) 0 ;
  double result;
  
  arg1 = (Options *)jarg1; 
  result = (double) ((arg1)->sndLngEditProcDoneSecs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_sndEnable_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sndEnable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_sndEnable_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->sndEnable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_tunnelMetaData_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tunnelMetaData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_tunnelMetaData_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->tunnelMetaData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_histogramPosition_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->histogramPosition = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_histogramPosition_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->histogramPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_histogramBar_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->histogramBar = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_histogramBar_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->histogramBar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_histogramFullMode_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->histogramFullMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_histogramFullMode_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->histogramFullMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showProfileSelector_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showProfileSelector = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showProfileSelector_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showProfileSelector);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_FileBrowserToolbarSingleRow_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FileBrowserToolbarSingleRow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_FileBrowserToolbarSingleRow_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->FileBrowserToolbarSingleRow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_hideTPVScrollbar_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hideTPVScrollbar = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_hideTPVScrollbar_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->hideTPVScrollbar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_UseIconNoText_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseIconNoText = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_UseIconNoText_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->UseIconNoText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_whiteBalanceSpotSize_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->whiteBalanceSpotSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_whiteBalanceSpotSize_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->whiteBalanceSpotSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_curvebboxpos_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->curvebboxpos = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_curvebboxpos_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->curvebboxpos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_showFilmStripToolBar_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showFilmStripToolBar = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_showFilmStripToolBar_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->showFilmStripToolBar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_clutsDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->clutsDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_clutsDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->clutsDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_rgbDenoiseThreadLimit_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rgbDenoiseThreadLimit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_rgbDenoiseThreadLimit_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->rgbDenoiseThreadLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_maxInspectorBuffers_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxInspectorBuffers = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_maxInspectorBuffers_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->maxInspectorBuffers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_clutCacheSize_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->clutCacheSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_clutCacheSize_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->clutCacheSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_filledProfile_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->filledProfile = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_filledProfile_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->filledProfile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_prevdemo_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  prevdemo_t arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (prevdemo_t)jarg2; 
  if (arg1) (arg1)->prevdemo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_prevdemo_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  prevdemo_t result;
  
  arg1 = (Options *)jarg1; 
  result = (prevdemo_t) ((arg1)->prevdemo);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_serializeTiffRead_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->serializeTiffRead = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_serializeTiffRead_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->serializeTiffRead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_menuGroupRank_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->menuGroupRank = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_menuGroupRank_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->menuGroupRank);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_menuGroupLabel_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->menuGroupLabel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_menuGroupLabel_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->menuGroupLabel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_menuGroupFileOperations_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->menuGroupFileOperations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_menuGroupFileOperations_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->menuGroupFileOperations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_menuGroupProfileOperations_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->menuGroupProfileOperations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_menuGroupProfileOperations_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->menuGroupProfileOperations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_menuGroupExtProg_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->menuGroupExtProg = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_menuGroupExtProg_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->menuGroupExtProg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_sharpening_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_sharpening = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_sharpening_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_sharpening);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_sharpenEdge_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_sharpenEdge = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_sharpenEdge_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_sharpenEdge);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_sharpenMicro_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_sharpenMicro = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_sharpenMicro_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_sharpenMicro);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_defringe_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_defringe = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_defringe_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_defringe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_dirpyrDenoise_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_dirpyrDenoise = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_dirpyrDenoise_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_dirpyrDenoise);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_sh_hq_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_sh_hq = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_sh_hq_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_sh_hq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_dirpyrequalizer_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_dirpyrequalizer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_dirpyrequalizer_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_dirpyrequalizer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_wavelet_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_wavelet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_wavelet_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_wavelet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_raw_bayer_method_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_raw_bayer_method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_raw_bayer_method_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_raw_bayer_method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_dcb_iterations_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_bayer_dcb_iterations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_dcb_iterations_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_bayer_dcb_iterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_dcb_enhance_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_bayer_dcb_enhance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_dcb_enhance_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_bayer_dcb_enhance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_lmmse_iterations_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_bayer_lmmse_iterations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_lmmse_iterations_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_bayer_lmmse_iterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_linenoise_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_bayer_linenoise = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_linenoise_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_bayer_linenoise);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_greenthresh_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_bayer_greenthresh = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_bayer_greenthresh_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_bayer_greenthresh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_raw_xtrans_method_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_raw_xtrans_method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_raw_xtrans_method_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_raw_xtrans_method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_ccSteps_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_ccSteps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_ccSteps_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_ccSteps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_ca_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_ca = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_ca_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_ca);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_df_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_df = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_df_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_df);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_ff_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_bypass_raw_ff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_bypass_raw_ff_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_bypass_raw_ff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_icm_input_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_icm_input = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_icm_input_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_icm_input);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_icm_working_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_icm_working = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_icm_working_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_icm_working);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_icm_output_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_icm_output = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_icm_output_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_icm_output);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_icm_gamma_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_icm_gamma = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_icm_gamma_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_icm_gamma);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_enabled_set(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fastexport_resize_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_fastexport_resize_enabled_get(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool) ((arg1)->fastexport_resize_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_scale_set(void * jarg1, double jarg2) {
  Options *arg1 = (Options *) 0 ;
  double arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fastexport_resize_scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Options_fastexport_resize_scale_get(void * jarg1) {
  double jresult ;
  Options *arg1 = (Options *) 0 ;
  double result;
  
  arg1 = (Options *)jarg1; 
  result = (double) ((arg1)->fastexport_resize_scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_appliesTo_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_resize_appliesTo = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_resize_appliesTo_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_resize_appliesTo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_method_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fastexport_resize_method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_fastexport_resize_method_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->fastexport_resize_method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_dataspec_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fastexport_resize_dataspec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_fastexport_resize_dataspec_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->fastexport_resize_dataspec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_width_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fastexport_resize_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_fastexport_resize_width_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->fastexport_resize_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_fastexport_resize_height_set(void * jarg1, int jarg2) {
  Options *arg1 = (Options *) 0 ;
  int arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fastexport_resize_height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_fastexport_resize_height_get(void * jarg1) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  result = (int) ((arg1)->fastexport_resize_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastIccDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastIccDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastIccDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastIccDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastDarkframeDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastDarkframeDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastDarkframeDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastDarkframeDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastFlatfieldDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastFlatfieldDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastFlatfieldDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastFlatfieldDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastRgbCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastRgbCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastRgbCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastRgbCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastLabCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastLabCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastLabCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastLabCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastDenoiseCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastDenoiseCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastDenoiseCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastDenoiseCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastWaveletCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastWaveletCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastWaveletCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastWaveletCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastPFCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastPFCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastPFCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastPFCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastHsvCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastHsvCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastHsvCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastHsvCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastToneCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastToneCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastToneCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastToneCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastColorToningCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastColorToningCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastColorToningCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastColorToningCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastVibranceCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastVibranceCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastVibranceCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastVibranceCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastProfilingReferenceDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastProfilingReferenceDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastProfilingReferenceDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastProfilingReferenceDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_lastBWCurvesDir_set(void * jarg1, char * jarg2) {
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (Options *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastBWCurvesDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_lastBWCurvesDir_get(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->lastBWCurvesDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_maxRecentFolders_set(void * jarg1, unsigned long jarg2) {
  Options *arg1 = (Options *) 0 ;
  size_t arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->maxRecentFolders = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Options_maxRecentFolders_get(void * jarg1) {
  unsigned long jresult ;
  Options *arg1 = (Options *) 0 ;
  size_t result;
  
  arg1 = (Options *)jarg1; 
  result =  ((arg1)->maxRecentFolders);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_recentFolders_set(void * jarg1, void * jarg2) {
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *arg2 = (std::vector< Glib::ustring > *) 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (std::vector< Glib::ustring > *)jarg2; 
  if (arg1) (arg1)->recentFolders = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_recentFolders_get(void * jarg1) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  std::vector< Glib::ustring > *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  result = (std::vector< Glib::ustring > *)& ((arg1)->recentFolders);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Options() {
  void * jresult ;
  Options *result = 0 ;
  
  result = (Options *)new Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Options_copyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  Options *arg1 = (Options *) 0 ;
  Options *arg2 = (Options *) 0 ;
  Options *result = 0 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = (Options *)jarg2; 
  result = (Options *)(arg1)->copyFrom(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_filterOutParsedExtensions(void * jarg1) {
  Options *arg1 = (Options *) 0 ;
  
  arg1 = (Options *)jarg1; 
  (arg1)->filterOutParsedExtensions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_setDefaults(void * jarg1) {
  Options *arg1 = (Options *) 0 ;
  
  arg1 = (Options *)jarg1; 
  (arg1)->setDefaults();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_readFromFile(void * jarg1, char * jarg2) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->readFromFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_saveToFile(void * jarg1, char * jarg2) {
  int jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (Options *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveToFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_load() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Options::load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_save() {
  Options::save();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_getPreferredProfilePath(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring result;
  
  arg1 = (Options *)jarg1; 
  result = (arg1)->getPreferredProfilePath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_getUserProfilePath(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring result;
  
  arg1 = (Options *)jarg1; 
  result = (arg1)->getUserProfilePath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_getGlobalProfilePath(void * jarg1) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring result;
  
  arg1 = (Options *)jarg1; 
  result = (arg1)->getGlobalProfilePath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Options_findProfilePath(void * jarg1, void * jarg2) {
  char * jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring *arg2 = 0 ;
  Glib::ustring result;
  
  arg1 = (Options *)jarg1; 
  arg2 = (Glib::ustring *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Glib::ustring & type is null", 0);
    return 0;
  } 
  result = (arg1)->findProfilePath(*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_has_retained_extention(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring arg2 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->has_retained_extention(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_is_extention_enabled(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  Glib::ustring arg2 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->is_extention_enabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_is_defProfRawMissing(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool)(arg1)->is_defProfRawMissing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_is_defProfImgMissing(void * jarg1) {
  unsigned int jresult ;
  Options *arg1 = (Options *) 0 ;
  bool result;
  
  arg1 = (Options *)jarg1; 
  result = (bool)(arg1)->is_defProfImgMissing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_setDefProfRawMissing(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDefProfRawMissing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_setDefProfImgMissing(void * jarg1, unsigned int jarg2) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = (Options *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDefProfImgMissing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Options(void * jarg1) {
  Options *arg1 = (Options *) 0 ;
  
  arg1 = (Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_options_set(void * jarg1) {
  Options *arg1 = (Options *) 0 ;
  
  arg1 = (Options *)jarg1; 
  options = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_options_get() {
  void * jresult ;
  Options *result = 0 ;
  
  result = (Options *)&options;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_argv0_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  argv0 = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_argv0_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &argv0;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_argv1_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  argv1 = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_argv1_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &argv1;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_versionString_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  versionString = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_versionString_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &versionString;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_versionSuffixString_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  versionSuffixString = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_versionSuffixString_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &versionSuffixString;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_paramFileExtension_set(char * jarg1) {
  Glib::ustring *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  paramFileExtension = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_paramFileExtension_get() {
  char * jresult ;
  Glib::ustring *result = 0 ;
  
  result = (Glib::ustring *) &paramFileExtension;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_iccDirectory_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->iccDirectory = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_iccDirectory_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->iccDirectory);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_colorimetricIntent_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->colorimetricIntent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_colorimetricIntent_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->colorimetricIntent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_viewingdevice_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viewingdevice = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_viewingdevice_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->viewingdevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_viewingdevicegrey_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viewingdevicegrey = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_viewingdevicegrey_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->viewingdevicegrey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_viewinggreySc_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viewinggreySc = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_viewinggreySc_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->viewinggreySc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_leveldnv_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->leveldnv = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_leveldnv_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->leveldnv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_leveldnti_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->leveldnti = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_leveldnti_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->leveldnti);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_leveldnaut_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->leveldnaut = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_leveldnaut_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->leveldnaut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_leveldnliss_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->leveldnliss = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_leveldnliss_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->leveldnliss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_leveldnautsimpl_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->leveldnautsimpl = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_leveldnautsimpl_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->leveldnautsimpl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_monitorProfile_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->monitorProfile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_monitorProfile_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->monitorProfile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_autoMonitorProfile_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoMonitorProfile = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_autoMonitorProfile_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->autoMonitorProfile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_autocielab_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autocielab = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_autocielab_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->autocielab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_rgbcurveslumamode_gamut_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rgbcurveslumamode_gamut = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_rgbcurveslumamode_gamut_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->rgbcurveslumamode_gamut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_verbose_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_verbose_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_darkFramesPath_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->darkFramesPath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_darkFramesPath_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->darkFramesPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_flatFieldsPath_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->flatFieldsPath = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_flatFieldsPath_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->flatFieldsPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_adobe_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->adobe = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_adobe_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->adobe);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_prophoto_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->prophoto = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_prophoto_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->prophoto);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_prophoto10_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->prophoto10 = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_prophoto10_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->prophoto10);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_widegamut_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->widegamut = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_widegamut_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->widegamut);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_beta_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->beta = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_beta_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->beta);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_best_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->best = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_best_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->best);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_bruce_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bruce = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_bruce_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->bruce);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_srgb_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srgb = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_srgb_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->srgb);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_srgb10_set(void * jarg1, char * jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *arg2 = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srgb10 = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Settings_srgb10_get(void * jarg1) {
  char * jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring *result = 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (Glib::ustring *) & ((arg1)->srgb10);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_gamutICC_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gamutICC = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_gamutICC_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->gamutICC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_gamutLch_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gamutLch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_gamutLch_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->gamutLch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ciecamfloat_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ciecamfloat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_ciecamfloat_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->ciecamfloat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_HistogramWorking_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HistogramWorking = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_HistogramWorking_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->HistogramWorking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_amchroma_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->amchroma = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_amchroma_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->amchroma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_protectred_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->protectred = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_protectred_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->protectred);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_protectredh_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->protectredh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_protectredh_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->protectredh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_nrauto_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nrauto = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_nrauto_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->nrauto);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_nrautomax_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nrautomax = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_nrautomax_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->nrautomax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_nrhigh_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nrhigh = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_nrhigh_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->nrhigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_nrwavlevel_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nrwavlevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_nrwavlevel_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->nrwavlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_daubech_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->daubech = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_daubech_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->daubech);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ciebadpixgauss_set(void * jarg1, unsigned int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ciebadpixgauss = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Settings_ciebadpixgauss_get(void * jarg1) {
  unsigned int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  bool result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (bool) ((arg1)->ciebadpixgauss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_CRI_color_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CRI_color = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_CRI_color_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->CRI_color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_denoiselabgamma_set(void * jarg1, int jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->denoiselabgamma = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_denoiselabgamma_get(void * jarg1) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (int) ((arg1)->denoiselabgamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_artifact_cbdl_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->artifact_cbdl = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_artifact_cbdl_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->artifact_cbdl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_level0_cbdl_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->level0_cbdl = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_level0_cbdl_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->level0_cbdl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_level123_cbdl_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->level123_cbdl = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_level123_cbdl_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->level123_cbdl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_bot_left_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bot_left = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_bot_left_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->bot_left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_top_left_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->top_left = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_top_left_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->top_left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_top_right_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->top_right = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_top_right_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->top_right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_bot_right_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bot_right = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_bot_right_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->bot_right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ed_detec_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ed_detec = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_ed_detec_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->ed_detec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ed_detecStr_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ed_detecStr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_ed_detecStr_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->ed_detecStr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ed_low_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ed_low = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_ed_low_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->ed_low);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ed_lipinfl_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ed_lipinfl = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_ed_lipinfl_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->ed_lipinfl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_ed_lipampl_set(void * jarg1, double jarg2) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ed_lipampl = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Settings_ed_lipampl_get(void * jarg1) {
  double jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  double result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  result = (double) ((arg1)->ed_lipampl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Settings_create() {
  void * jresult ;
  rtengine::Settings *result = 0 ;
  
  result = (rtengine::Settings *)rtengine::Settings::create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Settings_destroy(void * jarg1) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  rtengine::Settings::destroy(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Settings() {
  void * jresult ;
  rtengine::Settings *result = 0 ;
  
  result = (rtengine::Settings *)new rtengine::Settings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Settings(void * jarg1) {
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  
  arg1 = (rtengine::Settings *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LUT_CLIP_BELOW_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LUT_CLIP_ABOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HueLUT__SWIG_0() {
  void * jresult ;
  HueLUT *result = 0 ;
  
  result = (HueLUT *)new HueLUT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HueLUT__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  HueLUT *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (HueLUT *)new HueLUT(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HueLUT_create(void * jarg1) {
  HueLUT *arg1 = (HueLUT *) 0 ;
  
  arg1 = (HueLUT *)jarg1; 
  (arg1)->create();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HueLUT(void * jarg1) {
  HueLUT *arg1 = (HueLUT *) 0 ;
  
  arg1 = (HueLUT *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageMetaData_hasExif(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (bool)((rtengine::ImageMetaData const *)arg1)->hasExif();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMetaData_getExifData(void * jarg1) {
  void * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (rtexif::TagDirectory *)((rtengine::ImageMetaData const *)arg1)->getExifData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageMetaData_hasIPTC(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (bool)((rtengine::ImageMetaData const *)arg1)->hasIPTC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMetaData_getIPTCData(void * jarg1) {
  void * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  SwigValueWrapper< std::map< Glib::ustring,std::vector< Glib::ustring >,std::less< Glib::ustring > > > result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getIPTCData();
  jresult = new rtengine::procparams::IPTCPairs((const rtengine::procparams::IPTCPairs &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMetaData_getDateTime(void * jarg1) {
  void * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  tm result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getDateTime();
  jresult = new tm((const tm &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMetaData_getDateTimeAsTS(void * jarg1) {
  void * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  time_t result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getDateTimeAsTS();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageMetaData_getISOSpeed(void * jarg1) {
  int jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  int result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (int)((rtengine::ImageMetaData const *)arg1)->getISOSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_getFNumber(void * jarg1) {
  double jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (double)((rtengine::ImageMetaData const *)arg1)->getFNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_getFocalLen(void * jarg1) {
  double jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (double)((rtengine::ImageMetaData const *)arg1)->getFocalLen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_getFocalLen35mm(void * jarg1) {
  double jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (double)((rtengine::ImageMetaData const *)arg1)->getFocalLen35mm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageMetaData_getFocusDist(void * jarg1) {
  float jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  float result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (float)((rtengine::ImageMetaData const *)arg1)->getFocusDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_getShutterSpeed(void * jarg1) {
  double jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (double)((rtengine::ImageMetaData const *)arg1)->getShutterSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_getExpComp(void * jarg1) {
  double jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = (double)((rtengine::ImageMetaData const *)arg1)->getExpComp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_getMake(void * jarg1) {
  char * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getMake();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_getModel(void * jarg1) {
  char * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getModel();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_getCamera(void * jarg1) {
  char * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getCamera();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_getLens(void * jarg1) {
  char * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getLens();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_getOrientation(void * jarg1) {
  char * jresult ;
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  result = ((rtengine::ImageMetaData const *)arg1)->getOrientation();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_apertureToString(double jarg1) {
  char * jresult ;
  double arg1 ;
  std::string result;
  
  arg1 = (double)jarg1; 
  result = rtengine::ImageMetaData::apertureToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_shutterToString(double jarg1) {
  char * jresult ;
  double arg1 ;
  std::string result;
  
  arg1 = (double)jarg1; 
  result = rtengine::ImageMetaData::shutterToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_apertureFromString(char * jarg1) {
  double jresult ;
  std::string arg1 ;
  double result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (double)rtengine::ImageMetaData::apertureFromString(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageMetaData_shutterFromString(char * jarg1) {
  double jresult ;
  std::string arg1 ;
  double result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (double)rtengine::ImageMetaData::shutterFromString(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageMetaData_expcompToString(double jarg1, unsigned int jarg2) {
  char * jresult ;
  double arg1 ;
  bool arg2 ;
  std::string result;
  
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = rtengine::ImageMetaData::expcompToString(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageMetaData(void * jarg1) {
  rtengine::ImageMetaData *arg1 = (rtengine::ImageMetaData *) 0 ;
  
  arg1 = (rtengine::ImageMetaData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMetaData_fromFile(char * jarg1, void * jarg2) {
  void * jresult ;
  Glib::ustring *arg1 = 0 ;
  rtengine::RawMetaDataLocation *arg2 = (rtengine::RawMetaDataLocation *) 0 ;
  rtengine::ImageMetaData *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (rtengine::RawMetaDataLocation *)jarg2; 
  result = (rtengine::ImageMetaData *)rtengine::ImageMetaData::fromFile((Glib::ustring const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProgressListener(void * jarg1) {
  rtengine::ProgressListener *arg1 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::ProgressListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressListener_setProgress(void * jarg1, double jarg2) {
  rtengine::ProgressListener *arg1 = (rtengine::ProgressListener *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::ProgressListener *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setProgress(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressListener_setProgressStr(void * jarg1, char * jarg2) {
  rtengine::ProgressListener *arg1 = (rtengine::ProgressListener *) 0 ;
  Glib::ustring arg2 ;
  
  arg1 = (rtengine::ProgressListener *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg2)->assign(jarg2); 
  (arg1)->setProgressStr(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressListener_setProgressState(void * jarg1, unsigned int jarg2) {
  rtengine::ProgressListener *arg1 = (rtengine::ProgressListener *) 0 ;
  bool arg2 ;
  
  arg1 = (rtengine::ProgressListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setProgressState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressListener_error(void * jarg1, char * jarg2) {
  rtengine::ProgressListener *arg1 = (rtengine::ProgressListener *) 0 ;
  Glib::ustring arg2 ;
  
  arg1 = (rtengine::ProgressListener *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg2)->assign(jarg2); 
  (arg1)->error(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProgressListener() {
  void * jresult ;
  rtengine::ProgressListener *result = 0 ;
  
  result = (rtengine::ProgressListener *)new rtengine::ProgressListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_InitialImage_getFileName(void * jarg1) {
  char * jresult ;
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  Glib::ustring result;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  result = (arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitialImage_getEmbeddedProfile(void * jarg1) {
  void * jresult ;
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  cmsHPROFILE result;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  result = (arg1)->getEmbeddedProfile();
  jresult = new cmsHPROFILE((const cmsHPROFILE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitialImage_getMetaData(void * jarg1) {
  void * jresult ;
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  rtengine::ImageMetaData *result = 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  result = (rtengine::ImageMetaData *)(arg1)->getMetaData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitialImage_getImageSource(void * jarg1) {
  void * jresult ;
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  rtengine::ImageSource *result = 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  result = (rtengine::ImageSource *)(arg1)->getImageSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InitialImage_increaseRef(void * jarg1) {
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  (arg1)->increaseRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_InitialImage_decreaseRef(void * jarg1) {
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  (arg1)->decreaseRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InitialImage(void * jarg1) {
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitialImage_load__SWIG_0(char * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Glib::ustring *arg1 = 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  rtengine::ProgressListener *arg4 = (rtengine::ProgressListener *) 0 ;
  rtengine::InitialImage *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int *)jarg3; 
  arg4 = (rtengine::ProgressListener *)jarg4; 
  result = (rtengine::InitialImage *)rtengine::InitialImage::load((Glib::ustring const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitialImage_load__SWIG_1(char * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  Glib::ustring *arg1 = 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  rtengine::InitialImage *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int *)jarg3; 
  result = (rtengine::InitialImage *)rtengine::InitialImage::load((Glib::ustring const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PreviewImageListener(void * jarg1) {
  rtengine::PreviewImageListener *arg1 = (rtengine::PreviewImageListener *) 0 ;
  
  arg1 = (rtengine::PreviewImageListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PreviewImageListener_setImage(void * jarg1, void * jarg2, double jarg3, void * jarg4) {
  rtengine::PreviewImageListener *arg1 = (rtengine::PreviewImageListener *) 0 ;
  rtengine::IImage8 *arg2 = (rtengine::IImage8 *) 0 ;
  double arg3 ;
  rtengine::procparams::CropParams arg4 ;
  rtengine::procparams::CropParams *argp4 ;
  
  arg1 = (rtengine::PreviewImageListener *)jarg1; 
  arg2 = (rtengine::IImage8 *)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (rtengine::procparams::CropParams *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::CropParams", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setImage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PreviewImageListener_delImage(void * jarg1, void * jarg2) {
  rtengine::PreviewImageListener *arg1 = (rtengine::PreviewImageListener *) 0 ;
  rtengine::IImage8 *arg2 = (rtengine::IImage8 *) 0 ;
  
  arg1 = (rtengine::PreviewImageListener *)jarg1; 
  arg2 = (rtengine::IImage8 *)jarg2; 
  (arg1)->delImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PreviewImageListener_imageReady(void * jarg1, void * jarg2) {
  rtengine::PreviewImageListener *arg1 = (rtengine::PreviewImageListener *) 0 ;
  rtengine::procparams::CropParams arg2 ;
  rtengine::procparams::CropParams *argp2 ;
  
  arg1 = (rtengine::PreviewImageListener *)jarg1; 
  argp2 = (rtengine::procparams::CropParams *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::CropParams", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->imageReady(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PreviewImageListener() {
  void * jresult ;
  rtengine::PreviewImageListener *result = 0 ;
  
  result = (rtengine::PreviewImageListener *)new rtengine::PreviewImageListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DetailedCropListener(void * jarg1) {
  rtengine::DetailedCropListener *arg1 = (rtengine::DetailedCropListener *) 0 ;
  
  arg1 = (rtengine::DetailedCropListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DetailedCropListener_setDetailedCrop(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  rtengine::DetailedCropListener *arg1 = (rtengine::DetailedCropListener *) 0 ;
  rtengine::IImage8 *arg2 = (rtengine::IImage8 *) 0 ;
  rtengine::IImage8 *arg3 = (rtengine::IImage8 *) 0 ;
  rtengine::procparams::ColorManagementParams arg4 ;
  rtengine::procparams::CropParams arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  rtengine::procparams::ColorManagementParams *argp4 ;
  rtengine::procparams::CropParams *argp5 ;
  
  arg1 = (rtengine::DetailedCropListener *)jarg1; 
  arg2 = (rtengine::IImage8 *)jarg2; 
  arg3 = (rtengine::IImage8 *)jarg3; 
  argp4 = (rtengine::procparams::ColorManagementParams *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ColorManagementParams", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (rtengine::procparams::CropParams *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::CropParams", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  (arg1)->setDetailedCrop(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DetailedCropListener_getWindow(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  rtengine::DetailedCropListener *arg1 = (rtengine::DetailedCropListener *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  bool result;
  
  arg1 = (rtengine::DetailedCropListener *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getWindow(*arg2,*arg3,*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DetailedCropListener() {
  void * jresult ;
  rtengine::DetailedCropListener *result = 0 ;
  
  result = (rtengine::DetailedCropListener *)new rtengine::DetailedCropListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SizeListener(void * jarg1) {
  rtengine::SizeListener *arg1 = (rtengine::SizeListener *) 0 ;
  
  arg1 = (rtengine::SizeListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeListener_sizeChanged(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  rtengine::SizeListener *arg1 = (rtengine::SizeListener *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (rtengine::SizeListener *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sizeChanged(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeListener() {
  void * jresult ;
  rtengine::SizeListener *result = 0 ;
  
  result = (rtengine::SizeListener *)new rtengine::SizeListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HistogramListener(void * jarg1) {
  rtengine::HistogramListener *arg1 = (rtengine::HistogramListener *) 0 ;
  
  arg1 = (rtengine::HistogramListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HistogramListener_histogramChanged(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14) {
  rtengine::HistogramListener *arg1 = (rtengine::HistogramListener *) 0 ;
  LUT< unsigned int > *arg2 = 0 ;
  LUT< unsigned int > *arg3 = 0 ;
  LUT< unsigned int > *arg4 = 0 ;
  LUT< unsigned int > *arg5 = 0 ;
  LUT< unsigned int > *arg6 = 0 ;
  LUT< unsigned int > *arg7 = 0 ;
  LUT< unsigned int > *arg8 = 0 ;
  LUT< unsigned int > *arg9 = 0 ;
  LUT< unsigned int > *arg10 = 0 ;
  LUT< unsigned int > *arg11 = 0 ;
  LUT< unsigned int > *arg12 = 0 ;
  LUT< unsigned int > *arg13 = 0 ;
  LUT< unsigned int > *arg14 = 0 ;
  
  arg1 = (rtengine::HistogramListener *)jarg1; 
  arg2 = (LUT< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg3 = (LUT< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg4 = (LUT< unsigned int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg5 = (LUT< unsigned int > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg6 = (LUT< unsigned int > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg7 = (LUT< unsigned int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg8 = (LUT< unsigned int > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg9 = (LUT< unsigned int > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg10 = (LUT< unsigned int > *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg11 = (LUT< unsigned int > *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg12 = (LUT< unsigned int > *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg13 = (LUT< unsigned int > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg14 = (LUT< unsigned int > *)jarg14;
  if (!arg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  (arg1)->histogramChanged(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13,*arg14);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HistogramListener() {
  void * jresult ;
  rtengine::HistogramListener *result = 0 ;
  
  result = (rtengine::HistogramListener *)new rtengine::HistogramListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoExpListener(void * jarg1) {
  rtengine::AutoExpListener *arg1 = (rtengine::AutoExpListener *) 0 ;
  
  arg1 = (rtengine::AutoExpListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoExpListener_autoExpChanged(void * jarg1, double jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  rtengine::AutoExpListener *arg1 = (rtengine::AutoExpListener *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  
  arg1 = (rtengine::AutoExpListener *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->autoExpChanged(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoExpListener() {
  void * jresult ;
  rtengine::AutoExpListener *result = 0 ;
  
  result = (rtengine::AutoExpListener *)new rtengine::AutoExpListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoCamListener(void * jarg1) {
  rtengine::AutoCamListener *arg1 = (rtengine::AutoCamListener *) 0 ;
  
  arg1 = (rtengine::AutoCamListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoCamListener_autoCamChanged(void * jarg1, double jarg2) {
  rtengine::AutoCamListener *arg1 = (rtengine::AutoCamListener *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::AutoCamListener *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->autoCamChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoCamListener_adapCamChanged(void * jarg1, double jarg2) {
  rtengine::AutoCamListener *arg1 = (rtengine::AutoCamListener *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::AutoCamListener *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->adapCamChanged(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoCamListener() {
  void * jresult ;
  rtengine::AutoCamListener *result = 0 ;
  
  result = (rtengine::AutoCamListener *)new rtengine::AutoCamListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoChromaListener(void * jarg1) {
  rtengine::AutoChromaListener *arg1 = (rtengine::AutoChromaListener *) 0 ;
  
  arg1 = (rtengine::AutoChromaListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoChromaListener_chromaChanged(void * jarg1, double jarg2, double jarg3, double jarg4) {
  rtengine::AutoChromaListener *arg1 = (rtengine::AutoChromaListener *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (rtengine::AutoChromaListener *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->chromaChanged(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoChromaListener_noiseChanged(void * jarg1, double jarg2, double jarg3) {
  rtengine::AutoChromaListener *arg1 = (rtengine::AutoChromaListener *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (rtengine::AutoChromaListener *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->noiseChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoChromaListener_noiseTilePrev(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  rtengine::AutoChromaListener *arg1 = (rtengine::AutoChromaListener *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (rtengine::AutoChromaListener *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->noiseTilePrev(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoChromaListener() {
  void * jresult ;
  rtengine::AutoChromaListener *result = 0 ;
  
  result = (rtengine::AutoChromaListener *)new rtengine::AutoChromaListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoColorTonListener(void * jarg1) {
  rtengine::AutoColorTonListener *arg1 = (rtengine::AutoColorTonListener *) 0 ;
  
  arg1 = (rtengine::AutoColorTonListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoColorTonListener_autoColorTonChanged(void * jarg1, int jarg2, int jarg3, int jarg4) {
  rtengine::AutoColorTonListener *arg1 = (rtengine::AutoColorTonListener *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (rtengine::AutoColorTonListener *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->autoColorTonChanged(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoColorTonListener() {
  void * jresult ;
  rtengine::AutoColorTonListener *result = 0 ;
  
  result = (rtengine::AutoColorTonListener *)new rtengine::AutoColorTonListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoBWListener(void * jarg1) {
  rtengine::AutoBWListener *arg1 = (rtengine::AutoBWListener *) 0 ;
  
  arg1 = (rtengine::AutoBWListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoBWListener_BWChanged(void * jarg1, double jarg2, double jarg3, double jarg4) {
  rtengine::AutoBWListener *arg1 = (rtengine::AutoBWListener *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (rtengine::AutoBWListener *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->BWChanged(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoBWListener() {
  void * jresult ;
  rtengine::AutoBWListener *result = 0 ;
  
  result = (rtengine::AutoBWListener *)new rtengine::AutoBWListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WaveletListener(void * jarg1) {
  rtengine::WaveletListener *arg1 = (rtengine::WaveletListener *) 0 ;
  
  arg1 = (rtengine::WaveletListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaveletListener_wavChanged(void * jarg1, double jarg2) {
  rtengine::WaveletListener *arg1 = (rtengine::WaveletListener *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::WaveletListener *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->wavChanged(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WaveletListener() {
  void * jresult ;
  rtengine::WaveletListener *result = 0 ;
  
  result = (rtengine::WaveletListener *)new rtengine::WaveletListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DetailedCrop(void * jarg1) {
  rtengine::DetailedCrop *arg1 = (rtengine::DetailedCrop *) 0 ;
  
  arg1 = (rtengine::DetailedCrop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DetailedCrop_setWindow(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  rtengine::DetailedCrop *arg1 = (rtengine::DetailedCrop *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (rtengine::DetailedCrop *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->setWindow(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DetailedCrop_tryUpdate(void * jarg1) {
  unsigned int jresult ;
  rtengine::DetailedCrop *arg1 = (rtengine::DetailedCrop *) 0 ;
  bool result;
  
  arg1 = (rtengine::DetailedCrop *)jarg1; 
  result = (bool)(arg1)->tryUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DetailedCrop_fullUpdate(void * jarg1) {
  rtengine::DetailedCrop *arg1 = (rtengine::DetailedCrop *) 0 ;
  
  arg1 = (rtengine::DetailedCrop *)jarg1; 
  (arg1)->fullUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DetailedCrop_setListener(void * jarg1, void * jarg2) {
  rtengine::DetailedCrop *arg1 = (rtengine::DetailedCrop *) 0 ;
  rtengine::DetailedCropListener *arg2 = (rtengine::DetailedCropListener *) 0 ;
  
  arg1 = (rtengine::DetailedCrop *)jarg1; 
  arg2 = (rtengine::DetailedCropListener *)jarg2; 
  (arg1)->setListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DetailedCrop_destroy(void * jarg1) {
  rtengine::DetailedCrop *arg1 = (rtengine::DetailedCrop *) 0 ;
  
  arg1 = (rtengine::DetailedCrop *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DetailedCrop() {
  void * jresult ;
  rtengine::DetailedCrop *result = 0 ;
  
  result = (rtengine::DetailedCrop *)new rtengine::DetailedCrop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StagedImageProcessor_getInitialImage(void * jarg1) {
  void * jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::InitialImage *result = 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (rtengine::InitialImage *)(arg1)->getInitialImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_getParams(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::procparams::ProcParams *arg2 = (rtengine::procparams::ProcParams *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::procparams::ProcParams *)jarg2; 
  (arg1)->getParams(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StagedImageProcessor_beginUpdateParams(void * jarg1) {
  void * jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::procparams::ProcParams *result = 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (rtengine::procparams::ProcParams *)(arg1)->beginUpdateParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_endUpdateParams__SWIG_0(void * jarg1, int jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::ProcEvent arg2 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::ProcEvent)jarg2; 
  (arg1)->endUpdateParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_endUpdateParams__SWIG_1(void * jarg1, int jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->endUpdateParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_startProcessing(void * jarg1, int jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->startProcessing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_stopProcessing(void * jarg1) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  (arg1)->stopProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setPreviewScale(void * jarg1, int jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPreviewScale(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StagedImageProcessor_getPreviewScale(void * jarg1) {
  int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (int)(arg1)->getPreviewScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StagedImageProcessor_getFullWidth(void * jarg1) {
  int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (int)(arg1)->getFullWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StagedImageProcessor_getFullHeight(void * jarg1) {
  int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (int)(arg1)->getFullHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StagedImageProcessor_getPreviewWidth(void * jarg1) {
  int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (int)(arg1)->getPreviewWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StagedImageProcessor_getPreviewHeight(void * jarg1) {
  int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (int)(arg1)->getPreviewHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StagedImageProcessor_updateTryLock(void * jarg1) {
  unsigned int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  bool result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  result = (bool)(arg1)->updateTryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_updateUnLock(void * jarg1) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  (arg1)->updateUnLock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StagedImageProcessor_getAutoWB(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->getAutoWB(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_getCamWB(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getCamWB(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_getSpotWB(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getSpotWB(arg2,arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_getAutoCrop(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  double arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->getAutoCrop(arg2,*arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_saveInputICCReference(void * jarg1, char * jarg2, unsigned int jarg3) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  Glib::ustring *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return ;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  (arg1)->saveInputICCReference((Glib::ustring const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setProgressListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setSizeListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::SizeListener *arg2 = (rtengine::SizeListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::SizeListener *)jarg2; 
  (arg1)->setSizeListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_delSizeListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::SizeListener *arg2 = (rtengine::SizeListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::SizeListener *)jarg2; 
  (arg1)->delSizeListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setAutoExpListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::AutoExpListener *arg2 = (rtengine::AutoExpListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::AutoExpListener *)jarg2; 
  (arg1)->setAutoExpListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setHistogramListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::HistogramListener *arg2 = (rtengine::HistogramListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::HistogramListener *)jarg2; 
  (arg1)->setHistogramListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setPreviewImageListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::PreviewImageListener *arg2 = (rtengine::PreviewImageListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::PreviewImageListener *)jarg2; 
  (arg1)->setPreviewImageListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setAutoCamListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::AutoCamListener *arg2 = (rtengine::AutoCamListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::AutoCamListener *)jarg2; 
  (arg1)->setAutoCamListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setAutoBWListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::AutoBWListener *arg2 = (rtengine::AutoBWListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::AutoBWListener *)jarg2; 
  (arg1)->setAutoBWListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setAutoColorTonListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::AutoColorTonListener *arg2 = (rtengine::AutoColorTonListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::AutoColorTonListener *)jarg2; 
  (arg1)->setAutoColorTonListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setAutoChromaListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::AutoChromaListener *arg2 = (rtengine::AutoChromaListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::AutoChromaListener *)jarg2; 
  (arg1)->setAutoChromaListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_setWaveletListener(void * jarg1, void * jarg2) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  rtengine::WaveletListener *arg2 = (rtengine::WaveletListener *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  arg2 = (rtengine::WaveletListener *)jarg2; 
  (arg1)->setWaveletListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StagedImageProcessor(void * jarg1) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StagedImageProcessor_create(void * jarg1) {
  void * jresult ;
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  rtengine::StagedImageProcessor *result = 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  result = (rtengine::StagedImageProcessor *)rtengine::StagedImageProcessor::create(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StagedImageProcessor_destroy(void * jarg1) {
  rtengine::StagedImageProcessor *arg1 = (rtengine::StagedImageProcessor *) 0 ;
  
  arg1 = (rtengine::StagedImageProcessor *)jarg1; 
  rtengine::StagedImageProcessor::destroy(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_init(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  rtengine::Settings *arg1 = (rtengine::Settings *) 0 ;
  Glib::ustring arg2 ;
  Glib::ustring arg3 ;
  int result;
  
  arg1 = (rtengine::Settings *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  if(!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg3)->assign(jarg3); 
  result = (int)rtengine::init((rtengine::Settings const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cleanup() {
  rtengine::cleanup();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getWorkingProfiles() {
  void * jresult ;
  SwigValueWrapper< std::vector< Glib::ustring > > result;
  
  result = rtengine::getWorkingProfiles();
  jresult = new std::vector< Glib::ustring >((const std::vector< Glib::ustring > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getGamma() {
  void * jresult ;
  SwigValueWrapper< std::vector< Glib::ustring > > result;
  
  result = rtengine::getGamma();
  jresult = new std::vector< Glib::ustring >((const std::vector< Glib::ustring > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcessingJob_create__SWIG_0(char * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  Glib::ustring *arg1 = 0 ;
  bool arg2 ;
  rtengine::procparams::ProcParams *arg3 = 0 ;
  rtengine::ProcessingJob *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (rtengine::procparams::ProcParams *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::ProcParams const & type is null", 0);
    return 0;
  } 
  result = (rtengine::ProcessingJob *)rtengine::ProcessingJob::create((Glib::ustring const &)*arg1,arg2,(rtengine::procparams::ProcParams const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProcessingJob_create__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  rtengine::InitialImage *arg1 = (rtengine::InitialImage *) 0 ;
  rtengine::procparams::ProcParams *arg2 = 0 ;
  rtengine::ProcessingJob *result = 0 ;
  
  arg1 = (rtengine::InitialImage *)jarg1; 
  arg2 = (rtengine::procparams::ProcParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::ProcParams const & type is null", 0);
    return 0;
  } 
  result = (rtengine::ProcessingJob *)rtengine::ProcessingJob::create(arg1,(rtengine::procparams::ProcParams const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProcessingJob_destroy(void * jarg1) {
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  rtengine::ProcessingJob::destroy(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProcessingJob() {
  void * jresult ;
  rtengine::ProcessingJob *result = 0 ;
  
  result = (rtengine::ProcessingJob *)new rtengine::ProcessingJob();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProcessingJob(void * jarg1) {
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_processImage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  int *arg2 = 0 ;
  rtengine::ProgressListener *arg3 = (rtengine::ProgressListener *) 0 ;
  bool arg4 ;
  bool arg5 ;
  rtengine::IImage16 *result = 0 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg3 = (rtengine::ProgressListener *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (rtengine::IImage16 *)rtengine::processImage(arg1,*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_processImage__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  int *arg2 = 0 ;
  rtengine::ProgressListener *arg3 = (rtengine::ProgressListener *) 0 ;
  bool arg4 ;
  rtengine::IImage16 *result = 0 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg3 = (rtengine::ProgressListener *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (rtengine::IImage16 *)rtengine::processImage(arg1,*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_processImage__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  int *arg2 = 0 ;
  rtengine::ProgressListener *arg3 = (rtengine::ProgressListener *) 0 ;
  rtengine::IImage16 *result = 0 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg3 = (rtengine::ProgressListener *)jarg3; 
  result = (rtengine::IImage16 *)rtengine::processImage(arg1,*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_processImage__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  int *arg2 = 0 ;
  rtengine::IImage16 *result = 0 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  result = (rtengine::IImage16 *)rtengine::processImage(arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BatchProcessingListener_imageReady(void * jarg1, void * jarg2) {
  void * jresult ;
  rtengine::BatchProcessingListener *arg1 = (rtengine::BatchProcessingListener *) 0 ;
  rtengine::IImage16 *arg2 = (rtengine::IImage16 *) 0 ;
  rtengine::ProcessingJob *result = 0 ;
  
  arg1 = (rtengine::BatchProcessingListener *)jarg1; 
  arg2 = (rtengine::IImage16 *)jarg2; 
  result = (rtengine::ProcessingJob *)(arg1)->imageReady(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BatchProcessingListener_error(void * jarg1, char * jarg2) {
  rtengine::BatchProcessingListener *arg1 = (rtengine::BatchProcessingListener *) 0 ;
  Glib::ustring arg2 ;
  
  arg1 = (rtengine::BatchProcessingListener *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg2)->assign(jarg2); 
  (arg1)->error(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BatchProcessingListener(void * jarg1) {
  rtengine::BatchProcessingListener *arg1 = (rtengine::BatchProcessingListener *) 0 ;
  
  arg1 = (rtengine::BatchProcessingListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_startBatchProcessing(void * jarg1, void * jarg2, unsigned int jarg3) {
  rtengine::ProcessingJob *arg1 = (rtengine::ProcessingJob *) 0 ;
  rtengine::BatchProcessingListener *arg2 = (rtengine::BatchProcessingListener *) 0 ;
  bool arg3 ;
  
  arg1 = (rtengine::ProcessingJob *)jarg1; 
  arg2 = (rtengine::BatchProcessingListener *)jarg2; 
  arg3 = jarg3 ? true : false; 
  rtengine::startBatchProcessing(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_lcmsMutex_set(void * jarg1) {
  MyMutex *arg1 = (MyMutex *) 0 ;
  
  arg1 = (MyMutex *)jarg1; 
  rtengine::lcmsMutex = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_lcmsMutex_get() {
  void * jresult ;
  MyMutex *result = 0 ;
  
  result = (MyMutex *)rtengine::lcmsMutex;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MINTEMP_get() {
  int jresult ;
  int result;
  
  result = (int)(1500);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXTEMP_get() {
  int jresult ;
  int result;
  
  result = (int)(60000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MINGREEN_get() {
  double jresult ;
  double result;
  
  result = (double)(0.02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAXGREEN_get() {
  double jresult ;
  double result;
  
  result = (double)(5.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MINEQUAL_get() {
  double jresult ;
  double result;
  
  result = (double)(0.8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAXEQUAL_get() {
  double jresult ;
  double result;
  
  result = (double)(1.5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INITIALBLACKBODY_get() {
  int jresult ;
  int result;
  
  result = (int)(4000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorTemp__SWIG_0() {
  void * jresult ;
  rtengine::ColorTemp *result = 0 ;
  
  result = (rtengine::ColorTemp *)new rtengine::ColorTemp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorTemp__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  rtengine::ColorTemp *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (rtengine::ColorTemp *)new rtengine::ColorTemp(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorTemp__SWIG_2(double jarg1, double jarg2, double jarg3, char * jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Glib::ustring arg4 ;
  rtengine::ColorTemp *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg4)->assign(jarg4); 
  result = (rtengine::ColorTemp *)new rtengine::ColorTemp(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorTemp__SWIG_3(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  rtengine::ColorTemp *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (rtengine::ColorTemp *)new rtengine::ColorTemp(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_update(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->update(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_useDefaults(void * jarg1, double jarg2) {
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->useDefaults(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColorTemp_getMethod(void * jarg1) {
  char * jresult ;
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  result = (arg1)->getMethod();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorTemp_getTemp(void * jarg1) {
  double jresult ;
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double result;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  result = (double)(arg1)->getTemp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorTemp_getGreen(void * jarg1) {
  double jresult ;
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double result;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  result = (double)(arg1)->getGreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorTemp_getEqual(void * jarg1) {
  double jresult ;
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double result;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  result = (double)(arg1)->getEqual();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_getMultipliers(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getMultipliers(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_mul2temp(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7) {
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg7 = (double *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->mul2temp(arg2,arg3,arg4,arg5,*arg6,*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_temp2mul(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5, void * jarg6, void * jarg7) {
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg7 = (double *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->temp2mul(arg2,arg3,arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_temp2mulxyz(double jarg1, double jarg2, char * jarg3, void * jarg4, void * jarg5) {
  double arg1 ;
  double arg2 ;
  std::string arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::temp2mulxyz(arg1,arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorTemp_XYZtoCorColorTemp(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5) {
  int jresult ;
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  int result;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->XYZtoCorColorTemp(arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_cieCAT02(double jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, double jarg13) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  double *arg11 = 0 ;
  double *arg12 = 0 ;
  double arg13 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg7 = (double *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg8 = (double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg9 = (double *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg10 = (double *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg11 = (double *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg12 = (double *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg13 = (double)jarg13; 
  rtengine::ColorTemp::cieCAT02(arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,arg13);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorTemp_blackbody_spect(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)rtengine::ColorTemp::blackbody_spect(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorTemp_daylight_spect(double jarg1, double jarg2, double jarg3) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)rtengine::ColorTemp::daylight_spect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Cloudy6200_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Cloudy6200_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Daylight5300_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Daylight5300_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Shade7600_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Shade7600_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_A2856_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::A2856_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF1_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF1_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF2_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF2_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF3_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF3_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF4_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF4_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF5_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF5_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF6_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF6_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF7_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF7_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF8_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF8_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF9_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF9_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF10_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF10_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF11_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF11_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_FluoF12_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::FluoF12_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_HMI_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::HMI_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_GTI_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::GTI_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_JudgeIII_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::JudgeIII_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Solux3500_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Solux3500_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Solux4100_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Solux4100_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Solux4700_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Solux4700_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_NG_Solux4700_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::NG_Solux4700_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_NG_LEDLSI2040_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::NG_LEDLSI2040_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_NG_CRSSP12WWMR16_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::NG_CRSSP12WWMR16_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Flash5500_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Flash5500_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Flash6000_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Flash6000_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_Flash6500_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::Flash6500_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ColorTemp_get_spectral_color(double jarg1, void * jarg2) {
  double jresult ;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double *)jarg2; 
  result = (double)rtengine::ColorTemp::get_spectral_color(arg1,(double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechredC3_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechredC3_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechOraA2_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechOraA2_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechYelD3_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechYelD3_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechGreE2_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechGreE2_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechGreB3_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechGreB3_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechCyaF3_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechCyaF3_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechPurD2_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechPurD2_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechMagE3_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechMagE3_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechSkiA138_13_14_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechSkiA138_13_14_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechGraC4_67_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechGraC4_67_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechSkiB166_18_18_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechSkiB166_18_18_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechBluC150_m5_m22_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechBluC150_m5_m22_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechDCBluN881_m7_m14_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechDCBluN881_m7_m14_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechSGSkiF763_14_26_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechSGSkiF763_14_26_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechSGSkiK285_11_17_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechSGSkiK285_11_17_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechWhiA496_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechWhiA496_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechGreD1_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechGreD1_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColorchechSGBlaN3_6_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColorchechSGBlaN3_6_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_JDC468_GraK14_44_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::JDC468_GraK14_44_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_JDC468_BluH10_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::JDC468_BluH10_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin35_15_17_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin35_15_17_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin57_22_18_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin57_22_18_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin40_17_17_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin40_17_17_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin91_4_14_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin91_4_14_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin87_8_8_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin87_8_8_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin89_8_21_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin89_8_21_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin75_8_4_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin75_8_4_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin75_10_33_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin75_10_33_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin65_33_11_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin65_33_11_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin65_7_24_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin65_7_24_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin57_19_6_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin57_19_6_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin57_4_19_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin57_4_19_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin57_10_28_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin57_10_28_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin40_7_19_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin40_7_19_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin40_17_6_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin40_17_6_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin40_4_11_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin40_4_11_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin33_6_15_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin33_6_15_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin33_15_5_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin33_15_5_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin33_10_15_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin33_10_15_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin24_5_6_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin24_5_6_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin26_18_18_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin26_18_18_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin24_7_5_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin24_7_5_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin20_4_2_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin20_4_2_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin98_m2_10_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin98_m2_10_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin90_m1_20_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin90_m1_20_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin95_0_4_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin95_0_4_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin81_2_14_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin81_2_14_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin87_3_10_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin87_3_10_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin77_12_21_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin77_12_21_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSkin70_7_32_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSkin70_7_32_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSky60_0_m31_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSky60_0_m31_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorTemp_ColabSky42_0_m24_spect_get() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)(double *)rtengine::ColorTemp::ColabSky42_0_m24_spect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_spectrum_to_xyz_daylight(double jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::spectrum_to_xyz_daylight(arg1,arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_spectrum_to_xyz_blackbody(double jarg1, void * jarg2, void * jarg3, void * jarg4) {
  double arg1 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::spectrum_to_xyz_blackbody(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_spectrum_to_xyz_preset(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  double *arg1 = (double *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::spectrum_to_xyz_preset((double const *)arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_spectrum_to_color_xyz_daylight(void * jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5, void * jarg6) {
  double *arg1 = (double *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::spectrum_to_color_xyz_daylight((double const *)arg1,arg2,arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_spectrum_to_color_xyz_blackbody(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  double *arg1 = (double *) 0 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::spectrum_to_color_xyz_blackbody((double const *)arg1,arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorTemp_spectrum_to_color_xyz_preset(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  rtengine::ColorTemp::spectrum_to_color_xyz_preset((double const *)arg1,(double const *)arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorTemp(void * jarg1) {
  rtengine::ColorTemp *arg1 = (rtengine::ColorTemp *) 0 ;
  
  arg1 = (rtengine::ColorTemp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Coord2D_x_set(void * jarg1, double jarg2) {
  rtengine::Coord2D *arg1 = (rtengine::Coord2D *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Coord2D *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Coord2D_x_get(void * jarg1) {
  double jresult ;
  rtengine::Coord2D *arg1 = (rtengine::Coord2D *) 0 ;
  double result;
  
  arg1 = (rtengine::Coord2D *)jarg1; 
  result = (double) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Coord2D_y_set(void * jarg1, double jarg2) {
  rtengine::Coord2D *arg1 = (rtengine::Coord2D *) 0 ;
  double arg2 ;
  
  arg1 = (rtengine::Coord2D *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Coord2D_y_get(void * jarg1) {
  double jresult ;
  rtengine::Coord2D *arg1 = (rtengine::Coord2D *) 0 ;
  double result;
  
  arg1 = (rtengine::Coord2D *)jarg1; 
  result = (double) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Coord2D__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  rtengine::Coord2D *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (rtengine::Coord2D *)new rtengine::Coord2D(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Coord2D__SWIG_1() {
  void * jresult ;
  rtengine::Coord2D *result = 0 ;
  
  result = (rtengine::Coord2D *)new rtengine::Coord2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Coord2D_set(void * jarg1, double jarg2, double jarg3) {
  rtengine::Coord2D *arg1 = (rtengine::Coord2D *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (rtengine::Coord2D *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Coord2D(void * jarg1) {
  rtengine::Coord2D *arg1 = (rtengine::Coord2D *) 0 ;
  
  arg1 = (rtengine::Coord2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DCPProfile(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  Glib::ustring arg1 ;
  bool arg2 ;
  rtengine::DCPProfile *result = 0 ;
  
  if(!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg1)->assign(jarg1); 
  arg2 = jarg2 ? true : false; 
  result = (rtengine::DCPProfile *)new rtengine::DCPProfile(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DCPProfile(void * jarg1) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DCPProfile_getHasToneCurve(void * jarg1) {
  unsigned int jresult ;
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  bool result;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  result = (bool)(arg1)->getHasToneCurve();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DCPProfile_getHasLookTable(void * jarg1) {
  unsigned int jresult ;
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  bool result;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  result = (bool)(arg1)->getHasLookTable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DCPProfile_getHasHueSatMap(void * jarg1) {
  unsigned int jresult ;
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  bool result;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  result = (bool)(arg1)->getHasHueSatMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DCPProfile_getHasBaselineExposureOffset(void * jarg1) {
  unsigned int jresult ;
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  bool result;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  result = (bool)(arg1)->getHasBaselineExposureOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_getIlluminants(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  int *arg2 = 0 ;
  double *arg3 = 0 ;
  int *arg4 = 0 ;
  double *arg5 = 0 ;
  bool *arg6 = 0 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg6 = (bool *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  (arg1)->getIlluminants(*arg2,*arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_Apply__SWIG_0(void * jarg1, void * jarg2, int jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  Imagefloat *arg2 = (Imagefloat *) 0 ;
  int arg3 ;
  Glib::ustring arg4 ;
  rtengine::ColorTemp *arg5 = 0 ;
  double *arg6 ;
  double (*arg7)[3] ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  arg2 = (Imagefloat *)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg4)->assign(jarg4); 
  arg5 = (rtengine::ColorTemp *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6; 
  arg7 = (double (*)[3])jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  ((rtengine::DCPProfile const *)arg1)->Apply(arg2,arg3,arg4,*arg5,arg6,(double (*)[3])arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_Apply__SWIG_1(void * jarg1, void * jarg2, int jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  Imagefloat *arg2 = (Imagefloat *) 0 ;
  int arg3 ;
  Glib::ustring arg4 ;
  rtengine::ColorTemp *arg5 = 0 ;
  double *arg6 ;
  double (*arg7)[3] ;
  bool arg8 ;
  bool arg9 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  arg2 = (Imagefloat *)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg4)->assign(jarg4); 
  arg5 = (rtengine::ColorTemp *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6; 
  arg7 = (double (*)[3])jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  ((rtengine::DCPProfile const *)arg1)->Apply(arg2,arg3,arg4,*arg5,arg6,(double (*)[3])arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_Apply__SWIG_2(void * jarg1, void * jarg2, int jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  Imagefloat *arg2 = (Imagefloat *) 0 ;
  int arg3 ;
  Glib::ustring arg4 ;
  rtengine::ColorTemp *arg5 = 0 ;
  double *arg6 ;
  double (*arg7)[3] ;
  bool arg8 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  arg2 = (Imagefloat *)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg4)->assign(jarg4); 
  arg5 = (rtengine::ColorTemp *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6; 
  arg7 = (double (*)[3])jarg7; 
  arg8 = jarg8 ? true : false; 
  ((rtengine::DCPProfile const *)arg1)->Apply(arg2,arg3,arg4,*arg5,arg6,(double (*)[3])arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_Apply__SWIG_3(void * jarg1, void * jarg2, int jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  Imagefloat *arg2 = (Imagefloat *) 0 ;
  int arg3 ;
  Glib::ustring arg4 ;
  rtengine::ColorTemp *arg5 = 0 ;
  double *arg6 ;
  double (*arg7)[3] ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  arg2 = (Imagefloat *)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg4)->assign(jarg4); 
  arg5 = (rtengine::ColorTemp *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6; 
  arg7 = (double (*)[3])jarg7; 
  ((rtengine::DCPProfile const *)arg1)->Apply(arg2,arg3,arg4,*arg5,arg6,(double (*)[3])arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_setStep2ApplyState(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  Glib::ustring arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setStep2ApplyState(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPProfile_step2ApplyTile(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6, int jarg7) {
  rtengine::DCPProfile *arg1 = (rtengine::DCPProfile *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (rtengine::DCPProfile *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  ((rtengine::DCPProfile const *)arg1)->step2ApplyTile(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DCPStore_init(void * jarg1, char * jarg2) {
  rtengine::DCPStore *arg1 = (rtengine::DCPStore *) 0 ;
  Glib::ustring arg2 ;
  
  arg1 = (rtengine::DCPStore *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return ;
  } 
  (&arg2)->assign(jarg2); 
  (arg1)->init(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DCPStore_isValidDCPFileName(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  rtengine::DCPStore *arg1 = (rtengine::DCPStore *) 0 ;
  Glib::ustring arg2 ;
  bool result;
  
  arg1 = (rtengine::DCPStore *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (bool)((rtengine::DCPStore const *)arg1)->isValidDCPFileName(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DCPStore_getProfile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  rtengine::DCPStore *arg1 = (rtengine::DCPStore *) 0 ;
  Glib::ustring arg2 ;
  bool arg3 ;
  rtengine::DCPProfile *result = 0 ;
  
  arg1 = (rtengine::DCPStore *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  result = (rtengine::DCPProfile *)(arg1)->getProfile(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DCPStore_getProfile__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  rtengine::DCPStore *arg1 = (rtengine::DCPStore *) 0 ;
  Glib::ustring arg2 ;
  rtengine::DCPProfile *result = 0 ;
  
  arg1 = (rtengine::DCPStore *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (rtengine::DCPProfile *)(arg1)->getProfile(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DCPStore_getStdProfile(void * jarg1, char * jarg2) {
  void * jresult ;
  rtengine::DCPStore *arg1 = (rtengine::DCPStore *) 0 ;
  Glib::ustring arg2 ;
  rtengine::DCPProfile *result = 0 ;
  
  arg1 = (rtengine::DCPStore *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (rtengine::DCPProfile *)(arg1)->getStdProfile(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DCPStore_getInstance() {
  void * jresult ;
  rtengine::DCPStore *result = 0 ;
  
  result = (rtengine::DCPStore *)rtengine::DCPStore::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DCPStore() {
  void * jresult ;
  rtengine::DCPStore *result = 0 ;
  
  result = (rtengine::DCPStore *)new rtengine::DCPStore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DCPStore(void * jarg1) {
  rtengine::DCPStore *arg1 = (rtengine::DCPStore *) 0 ;
  
  arg1 = (rtengine::DCPStore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageData__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  Glib::ustring arg1 ;
  rtengine::RawMetaDataLocation *arg2 = (rtengine::RawMetaDataLocation *) 0 ;
  rtengine::ImageData *result = 0 ;
  
  if(!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg1)->assign(jarg1); 
  arg2 = (rtengine::RawMetaDataLocation *)jarg2; 
  result = (rtengine::ImageData *)new rtengine::ImageData(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageData__SWIG_1(char * jarg1) {
  void * jresult ;
  Glib::ustring arg1 ;
  rtengine::ImageData *result = 0 ;
  
  if(!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg1)->assign(jarg1); 
  result = (rtengine::ImageData *)new rtengine::ImageData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageData(void * jarg1) {
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageData_getExifData(void * jarg1) {
  void * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  rtexif::TagDirectory *result = 0 ;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (rtexif::TagDirectory *)((rtengine::ImageData const *)arg1)->getExifData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageData_getIPTCData(void * jarg1) {
  void * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  SwigValueWrapper< std::map< Glib::ustring,std::vector< Glib::ustring >,std::less< Glib::ustring > > > result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getIPTCData();
  jresult = new rtengine::procparams::IPTCPairs((const rtengine::procparams::IPTCPairs &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageData_hasExif(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (bool)((rtengine::ImageData const *)arg1)->hasExif();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageData_hasIPTC(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (bool)((rtengine::ImageData const *)arg1)->hasIPTC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageData_getDateTime(void * jarg1) {
  void * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  tm result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getDateTime();
  jresult = new tm((const tm &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageData_getDateTimeAsTS(void * jarg1) {
  void * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  time_t result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getDateTimeAsTS();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageData_getISOSpeed(void * jarg1) {
  int jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  int result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (int)((rtengine::ImageData const *)arg1)->getISOSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageData_getFNumber(void * jarg1) {
  double jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (double)((rtengine::ImageData const *)arg1)->getFNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageData_getFocalLen(void * jarg1) {
  double jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (double)((rtengine::ImageData const *)arg1)->getFocalLen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageData_getFocalLen35mm(void * jarg1) {
  double jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (double)((rtengine::ImageData const *)arg1)->getFocalLen35mm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageData_getFocusDist(void * jarg1) {
  float jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  float result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (float)((rtengine::ImageData const *)arg1)->getFocusDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageData_getShutterSpeed(void * jarg1) {
  double jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (double)((rtengine::ImageData const *)arg1)->getShutterSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageData_getExpComp(void * jarg1) {
  double jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = (double)((rtengine::ImageData const *)arg1)->getExpComp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageData_getMake(void * jarg1) {
  char * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getMake();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageData_getModel(void * jarg1) {
  char * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getModel();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageData_getLens(void * jarg1) {
  char * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getLens();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageData_getSerialNumber(void * jarg1) {
  char * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getSerialNumber();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageData_getOrientation(void * jarg1) {
  char * jresult ;
  rtengine::ImageData *arg1 = (rtengine::ImageData *) 0 ;
  std::string result;
  
  arg1 = (rtengine::ImageData *)jarg1; 
  result = ((rtengine::ImageData const *)arg1)->getOrientation();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image8__SWIG_0() {
  void * jresult ;
  rtengine::Image8 *result = 0 ;
  
  result = (rtengine::Image8 *)new rtengine::Image8();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image8__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  rtengine::Image8 *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtengine::Image8 *)new rtengine::Image8(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Image8(void * jarg1) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image8_copy(void * jarg1) {
  void * jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  rtengine::Image8 *result = 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  result = (rtengine::Image8 *)(arg1)->copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Image8_getType(void * jarg1) {
  char * jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  char *result = 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  result = (char *)((rtengine::Image8 const *)arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_getBPS(void * jarg1) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  result = (int)(arg1)->getBPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8_getScanline(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->getScanline(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8_setScanline__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->setScanline(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8_setScanline__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->setScanline(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8_setScanline__SWIG_2(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setScanline(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image8_getMutex(void * jarg1) {
  void * jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  MyMutex *result = 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  result = (MyMutex *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image8_getProfile(void * jarg1) {
  void * jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  cmsHPROFILE result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  result = (arg1)->getProfile();
  jresult = new cmsHPROFILE((const cmsHPROFILE &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_getBitsPerPixel(void * jarg1) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  result = (int)(arg1)->getBitsPerPixel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveToFile(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveToFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsPNG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsPNG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsPNG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsPNG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsJPEG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsJPEG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsJPEG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsJPEG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsTIFF__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsTIFF__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8_saveAsTIFF__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsTIFF(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8_setSaveProgressListener(void * jarg1, void * jarg2) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setSaveProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8_free(void * jarg1) {
  rtengine::Image8 *arg1 = (rtengine::Image8 *) 0 ;
  
  arg1 = (rtengine::Image8 *)jarg1; 
  (arg1)->free();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image16__SWIG_0() {
  void * jresult ;
  rtengine::Image16 *result = 0 ;
  
  result = (rtengine::Image16 *)new rtengine::Image16();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image16__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  rtengine::Image16 *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtengine::Image16 *)new rtengine::Image16(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Image16(void * jarg1) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image16_copy(void * jarg1) {
  void * jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  rtengine::Image16 *result = 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (rtengine::Image16 *)(arg1)->copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image16_to8(void * jarg1) {
  void * jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  rtengine::Image8 *result = 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (rtengine::Image8 *)(arg1)->to8();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image16_tofloat(void * jarg1) {
  void * jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Imagefloat *result = 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (Imagefloat *)(arg1)->tofloat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Image16_getType(void * jarg1) {
  char * jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  char *result = 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (char *)((rtengine::Image16 const *)arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_getBPS(void * jarg1) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (int)(arg1)->getBPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_getScanline(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->getScanline(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_setScanline__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->setScanline(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_setScanline__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->setScanline(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_setScanline__SWIG_2(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setScanline(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image16_getMutex(void * jarg1) {
  void * jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  MyMutex *result = 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (MyMutex *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image16_getProfile(void * jarg1) {
  void * jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  cmsHPROFILE result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (arg1)->getProfile();
  jresult = new cmsHPROFILE((const cmsHPROFILE &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_getBitsPerPixel(void * jarg1) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  result = (int)(arg1)->getBitsPerPixel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveToFile(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveToFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsPNG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsPNG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsPNG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsPNG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsJPEG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsJPEG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsJPEG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsJPEG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsTIFF__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsTIFF__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image16_saveAsTIFF__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsTIFF(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_setSaveProgressListener(void * jarg1, void * jarg2) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setSaveProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_free(void * jarg1) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  (arg1)->free();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image16_ExecCMSTransform(void * jarg1, void * jarg2) {
  rtengine::Image16 *arg1 = (rtengine::Image16 *) 0 ;
  cmsHTRANSFORM arg2 ;
  cmsHTRANSFORM *argp2 ;
  
  arg1 = (rtengine::Image16 *)jarg1; 
  argp2 = (cmsHTRANSFORM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cmsHTRANSFORM", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ExecCMSTransform(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Imagefloat__SWIG_0() {
  void * jresult ;
  rtengine::Imagefloat *result = 0 ;
  
  result = (rtengine::Imagefloat *)new rtengine::Imagefloat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Imagefloat__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  rtengine::Imagefloat *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (rtengine::Imagefloat *)new rtengine::Imagefloat(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Imagefloat(void * jarg1) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Imagefloat_copy(void * jarg1) {
  void * jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  rtengine::Imagefloat *result = 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (rtengine::Imagefloat *)(arg1)->copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Imagefloat_to8(void * jarg1) {
  void * jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  rtengine::Image8 *result = 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (rtengine::Image8 *)(arg1)->to8();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Imagefloat_to16(void * jarg1) {
  void * jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  rtengine::Image16 *result = 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (rtengine::Image16 *)(arg1)->to16();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Imagefloat_getType(void * jarg1) {
  char * jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  char *result = 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (char *)((rtengine::Imagefloat const *)arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_getBPS(void * jarg1) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (int)(arg1)->getBPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_getScanline(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->getScanline(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_setScanline__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->setScanline(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_setScanline__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->setScanline(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_setScanline__SWIG_2(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setScanline(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Imagefloat_getMutex(void * jarg1) {
  void * jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  MyMutex *result = 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (MyMutex *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Imagefloat_getProfile(void * jarg1) {
  void * jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  cmsHPROFILE result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (arg1)->getProfile();
  jresult = new cmsHPROFILE((const cmsHPROFILE &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_getBitsPerPixel(void * jarg1) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  result = (int)(arg1)->getBitsPerPixel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveToFile(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveToFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsPNG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsPNG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsPNG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsPNG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsPNG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsJPEG__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsJPEG__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsJPEG(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsJPEG__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsJPEG(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsTIFF__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsTIFF__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->saveAsTIFF(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Imagefloat_saveAsTIFF__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->saveAsTIFF(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_setSaveProgressListener(void * jarg1, void * jarg2) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setSaveProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_free(void * jarg1) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  (arg1)->free();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_normalizeFloat(void * jarg1, float jarg2, float jarg3) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->normalizeFloat(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_normalizeFloatTo1(void * jarg1) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  (arg1)->normalizeFloatTo1();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_normalizeFloatTo65535(void * jarg1) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  (arg1)->normalizeFloatTo65535();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_calcCroppedHistogram(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  rtengine::procparams::ProcParams *arg2 = 0 ;
  float arg3 ;
  LUT< unsigned int > *arg4 = 0 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  arg2 = (rtengine::procparams::ProcParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::ProcParams const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (LUT< unsigned int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  (arg1)->calcCroppedHistogram((rtengine::procparams::ProcParams const &)*arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Imagefloat_ExecCMSTransform(void * jarg1, void * jarg2) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  cmsHTRANSFORM arg2 ;
  cmsHTRANSFORM *argp2 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  argp2 = (cmsHTRANSFORM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cmsHTRANSFORM", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ExecCMSTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageMatrices_rgb_cam_set(void * jarg1, void * jarg2) {
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*arg2)[3] ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  arg2 = (double (*)[3])jarg2; 
  {
    double (*inp)[3] = (double (*)[3])(arg2);
    double (*dest)[3] = (double (*)[3])(arg1->rgb_cam);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMatrices_rgb_cam_get(void * jarg1) {
  void * jresult ;
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*result)[3] = 0 ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  result = (double (*)[3])(double (*)[3]) ((arg1)->rgb_cam);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageMatrices_cam_rgb_set(void * jarg1, void * jarg2) {
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*arg2)[3] ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  arg2 = (double (*)[3])jarg2; 
  {
    double (*inp)[3] = (double (*)[3])(arg2);
    double (*dest)[3] = (double (*)[3])(arg1->cam_rgb);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMatrices_cam_rgb_get(void * jarg1) {
  void * jresult ;
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*result)[3] = 0 ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  result = (double (*)[3])(double (*)[3]) ((arg1)->cam_rgb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageMatrices_xyz_cam_set(void * jarg1, void * jarg2) {
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*arg2)[3] ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  arg2 = (double (*)[3])jarg2; 
  {
    double (*inp)[3] = (double (*)[3])(arg2);
    double (*dest)[3] = (double (*)[3])(arg1->xyz_cam);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMatrices_xyz_cam_get(void * jarg1) {
  void * jresult ;
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*result)[3] = 0 ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  result = (double (*)[3])(double (*)[3]) ((arg1)->xyz_cam);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageMatrices_cam_xyz_set(void * jarg1, void * jarg2) {
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*arg2)[3] ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  arg2 = (double (*)[3])jarg2; 
  {
    double (*inp)[3] = (double (*)[3])(arg2);
    double (*dest)[3] = (double (*)[3])(arg1->cam_xyz);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMatrices_cam_xyz_get(void * jarg1) {
  void * jresult ;
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  double (*result)[3] = 0 ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  result = (double (*)[3])(double (*)[3]) ((arg1)->cam_xyz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageMatrices() {
  void * jresult ;
  rtengine::ImageMatrices *result = 0 ;
  
  result = (rtengine::ImageMatrices *)new rtengine::ImageMatrices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageMatrices(void * jarg1) {
  rtengine::ImageMatrices *arg1 = (rtengine::ImageMatrices *) 0 ;
  
  arg1 = (rtengine::ImageMatrices *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageSource(void * jarg1) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageSource_load__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  Glib::ustring arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageSource_load__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_preprocess(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::procparams::RAWParams *arg2 = 0 ;
  rtengine::procparams::LensProfParams *arg3 = 0 ;
  rtengine::procparams::CoarseTransformParams *arg4 = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  arg3 = (rtengine::procparams::LensProfParams *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::LensProfParams const & type is null", 0);
    return ;
  } 
  arg4 = (rtengine::procparams::CoarseTransformParams *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::CoarseTransformParams const & type is null", 0);
    return ;
  } 
  (arg1)->preprocess((rtengine::procparams::RAWParams const &)*arg2,(rtengine::procparams::LensProfParams const &)*arg3,(rtengine::procparams::CoarseTransformParams const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_demosaic(void * jarg1, void * jarg2) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::procparams::RAWParams *arg2 = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  (arg1)->demosaic((rtengine::procparams::RAWParams const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_flushRawData(void * jarg1) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  (arg1)->flushRawData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_flushRGB(void * jarg1) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  (arg1)->flushRGB();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_HLRecovery_Global(void * jarg1, void * jarg2) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::procparams::ToneCurveParams arg2 ;
  rtengine::procparams::ToneCurveParams *argp2 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  argp2 = (rtengine::procparams::ToneCurveParams *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ToneCurveParams", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HLRecovery_Global(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_HLRecovery_inpaint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  float **arg2 = (float **) 0 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (float **)jarg2; 
  arg3 = (float **)jarg3; 
  arg4 = (float **)jarg4; 
  (arg1)->HLRecovery_inpaint(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageSource_IsrgbSourceModified(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (bool)(arg1)->IsrgbSourceModified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getSensorType(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  eSensorType result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (arg1)->getSensorType();
  jresult = new eSensorType((const eSensorType &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageSource_isWBProviderReady(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (bool)(arg1)->isWBProviderReady();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_convertColorSpace(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::Imagefloat *arg2 = (rtengine::Imagefloat *) 0 ;
  rtengine::procparams::ColorManagementParams arg3 ;
  rtengine::ColorTemp *arg4 = 0 ;
  rtengine::procparams::ColorManagementParams *argp3 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (rtengine::Imagefloat *)jarg2; 
  argp3 = (rtengine::procparams::ColorManagementParams *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ColorManagementParams", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (rtengine::ColorTemp *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  (arg1)->convertColorSpace(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_getAutoWBMultipliers(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getAutoWBMultipliers(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getWB(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::ColorTemp result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (arg1)->getWB();
  jresult = new rtengine::ColorTemp((const rtengine::ColorTemp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getSpotWB(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  std::vector< rtengine::Coord2D > *arg2 = 0 ;
  std::vector< rtengine::Coord2D > *arg3 = 0 ;
  std::vector< rtengine::Coord2D > *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  rtengine::ColorTemp result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (std::vector< rtengine::Coord2D > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtengine::Coord2D > & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< rtengine::Coord2D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtengine::Coord2D > & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< rtengine::Coord2D > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtengine::Coord2D > & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->getSpotWB(*arg2,*arg3,*arg4,arg5,arg6);
  jresult = new rtengine::ColorTemp((const rtengine::ColorTemp &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageSource_getDefGain(void * jarg1) {
  double jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (double)(arg1)->getDefGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_getFullSize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->getFullSize(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_getFullSize__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->getFullSize(*arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageSource_getRotateDegree(void * jarg1) {
  int jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  int result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (int)((rtengine::ImageSource const *)arg1)->getRotateDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getImageData(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::ImageData *result = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (rtengine::ImageData *)(arg1)->getImageData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getImageMatrices(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::ImageMatrices *result = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (rtengine::ImageMatrices *)(arg1)->getImageMatrices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageSource_isRAW(void * jarg1) {
  unsigned int jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  bool result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (bool)((rtengine::ImageSource const *)arg1)->isRAW();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getDCP(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::procparams::ColorManagementParams arg2 ;
  rtengine::ColorTemp *arg3 = 0 ;
  rtengine::procparams::ColorManagementParams *argp2 ;
  rtengine::DCPProfile *result = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  argp2 = (rtengine::procparams::ColorManagementParams *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ColorManagementParams", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (rtengine::ColorTemp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return 0;
  } 
  result = (rtengine::DCPProfile *)(arg1)->getDCP(arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_setProgressListener(void * jarg1, void * jarg2) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_increaseRef(void * jarg1) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  (arg1)->increaseRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_decreaseRef(void * jarg1) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  (arg1)->decreaseRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_getAutoExpHistogram(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  LUT< unsigned int > *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (LUT< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->getAutoExpHistogram(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageSource_getRAWHistogram(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  LUT< unsigned int > *arg2 = 0 ;
  LUT< unsigned int > *arg3 = 0 ;
  LUT< unsigned int > *arg4 = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  arg2 = (LUT< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg3 = (LUT< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg4 = (LUT< unsigned int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  (arg1)->getRAWHistogram(*arg2,*arg3,*arg4);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ImageSource_getDirPyrDenoiseExpComp(void * jarg1) {
  double jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  double result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (double)(arg1)->getDirPyrDenoiseExpComp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImageSource_getFileName(void * jarg1) {
  char * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  Glib::ustring result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getEmbeddedProfile(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  cmsHPROFILE result;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (arg1)->getEmbeddedProfile();
  jresult = new cmsHPROFILE((const cmsHPROFILE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getMetaData(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::ImageMetaData *result = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (rtengine::ImageMetaData *)(arg1)->getMetaData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageSource_getImageSource(void * jarg1) {
  void * jresult ;
  rtengine::ImageSource *arg1 = (rtengine::ImageSource *) 0 ;
  rtengine::ImageSource *result = 0 ;
  
  arg1 = (rtengine::ImageSource *)jarg1; 
  result = (rtengine::ImageSource *)(arg1)->getImageSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HR_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RawImageSource() {
  void * jresult ;
  rtengine::RawImageSource *result = 0 ;
  
  result = (rtengine::RawImageSource *)new rtengine::RawImageSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RawImageSource(void * jarg1) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RawImageSource_load__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  Glib::ustring arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RawImageSource_load__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  Glib::ustring arg2 ;
  int result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  if(!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_preprocess(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::procparams::RAWParams *arg2 = 0 ;
  rtengine::procparams::LensProfParams *arg3 = 0 ;
  rtengine::procparams::CoarseTransformParams *arg4 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  arg3 = (rtengine::procparams::LensProfParams *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::LensProfParams const & type is null", 0);
    return ;
  } 
  arg4 = (rtengine::procparams::CoarseTransformParams *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::CoarseTransformParams const & type is null", 0);
    return ;
  } 
  (arg1)->preprocess((rtengine::procparams::RAWParams const &)*arg2,(rtengine::procparams::LensProfParams const &)*arg3,(rtengine::procparams::CoarseTransformParams const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_demosaic(void * jarg1, void * jarg2) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::procparams::RAWParams *arg2 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  (arg1)->demosaic((rtengine::procparams::RAWParams const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_flushRawData(void * jarg1) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  (arg1)->flushRawData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_flushRGB(void * jarg1) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  (arg1)->flushRGB();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_HLRecovery_Global(void * jarg1, void * jarg2) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::procparams::ToneCurveParams arg2 ;
  rtengine::procparams::ToneCurveParams *argp2 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  argp2 = (rtengine::procparams::ToneCurveParams *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ToneCurveParams", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HLRecovery_Global(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_refinement_lassus(void * jarg1, int jarg2) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->refinement_lassus(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_refinement(void * jarg1, int jarg2) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  int arg2 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->refinement(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RawImageSource_IsrgbSourceModified(void * jarg1) {
  unsigned int jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  bool result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (bool)(arg1)->IsrgbSourceModified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_processFlatField(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::procparams::RAWParams *arg2 = 0 ;
  RawImage *arg3 = (RawImage *) 0 ;
  unsigned short *arg4 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  arg3 = (RawImage *)jarg3; 
  arg4 = (unsigned short *)jarg4; 
  (arg1)->processFlatField((rtengine::procparams::RAWParams const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_copyOriginalPixels(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::procparams::RAWParams *arg2 = 0 ;
  RawImage *arg3 = (RawImage *) 0 ;
  RawImage *arg4 = (RawImage *) 0 ;
  RawImage *arg5 = (RawImage *) 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (rtengine::procparams::RAWParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  arg3 = (RawImage *)jarg3; 
  arg4 = (RawImage *)jarg4; 
  arg5 = (RawImage *)jarg5; 
  (arg1)->copyOriginalPixels((rtengine::procparams::RAWParams const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_cfaboxblur(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  RawImage *arg2 = (RawImage *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (RawImage *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->cfaboxblur(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_scaleColors(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  rtengine::procparams::RAWParams *arg6 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (rtengine::procparams::RAWParams *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::procparams::RAWParams const & type is null", 0);
    return ;
  } 
  (arg1)->scaleColors(arg2,arg3,arg4,arg5,(rtengine::procparams::RAWParams const &)*arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RawImageSource_getSensorType(void * jarg1) {
  void * jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  eSensorType result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (arg1)->getSensorType();
  jresult = new eSensorType((const eSensorType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RawImageSource_getWB(void * jarg1) {
  void * jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::ColorTemp result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (arg1)->getWB();
  jresult = new rtengine::ColorTemp((const rtengine::ColorTemp &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_getAutoWBMultipliers(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getAutoWBMultipliers(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RawImageSource_getSpotWB(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  void * jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  std::vector< rtengine::Coord2D > *arg2 = 0 ;
  std::vector< rtengine::Coord2D > *arg3 = 0 ;
  std::vector< rtengine::Coord2D > *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  rtengine::ColorTemp result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (std::vector< rtengine::Coord2D > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtengine::Coord2D > & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< rtengine::Coord2D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtengine::Coord2D > & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< rtengine::Coord2D > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtengine::Coord2D > & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->getSpotWB(*arg2,*arg3,*arg4,arg5,arg6);
  jresult = new rtengine::ColorTemp((const rtengine::ColorTemp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RawImageSource_isWBProviderReady(void * jarg1) {
  unsigned int jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  bool result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (bool)(arg1)->isWBProviderReady();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RawImageSource_getDefGain(void * jarg1) {
  double jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  double result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (double)(arg1)->getDefGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_getFullSize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->getFullSize(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_getFullSize__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->getFullSize(*arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RawImageSource_getRotateDegree(void * jarg1) {
  int jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  int result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (int)((rtengine::RawImageSource const *)arg1)->getRotateDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RawImageSource_getImageData(void * jarg1) {
  void * jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::ImageData *result = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (rtengine::ImageData *)(arg1)->getImageData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RawImageSource_getImageMatrices(void * jarg1) {
  void * jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::ImageMatrices *result = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (rtengine::ImageMatrices *)(arg1)->getImageMatrices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RawImageSource_isRAW(void * jarg1) {
  unsigned int jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  bool result;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  result = (bool)((rtengine::RawImageSource const *)arg1)->isRAW();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_setProgressListener(void * jarg1, void * jarg2) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::ProgressListener *arg2 = (rtengine::ProgressListener *) 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (rtengine::ProgressListener *)jarg2; 
  (arg1)->setProgressListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_getAutoExpHistogram(void * jarg1, void * jarg2, void * jarg3) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  LUT< unsigned int > *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (LUT< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->getAutoExpHistogram(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_getRAWHistogram(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  LUT< unsigned int > *arg2 = 0 ;
  LUT< unsigned int > *arg3 = 0 ;
  LUT< unsigned int > *arg4 = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (LUT< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg3 = (LUT< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  arg4 = (LUT< unsigned int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LUT< unsigned int > & type is null", 0);
    return ;
  } 
  (arg1)->getRAWHistogram(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RawImageSource_getDCP(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::procparams::ColorManagementParams arg2 ;
  rtengine::ColorTemp *arg3 = 0 ;
  rtengine::procparams::ColorManagementParams *argp2 ;
  rtengine::DCPProfile *result = 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  argp2 = (rtengine::procparams::ColorManagementParams *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ColorManagementParams", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (rtengine::ColorTemp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return 0;
  } 
  result = (rtengine::DCPProfile *)(arg1)->getDCP(arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_convertColorSpace(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  rtengine::Imagefloat *arg2 = (rtengine::Imagefloat *) 0 ;
  rtengine::procparams::ColorManagementParams arg3 ;
  rtengine::ColorTemp *arg4 = 0 ;
  rtengine::procparams::ColorManagementParams *argp3 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (rtengine::Imagefloat *)jarg2; 
  argp3 = (rtengine::procparams::ColorManagementParams *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ColorManagementParams", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (rtengine::ColorTemp *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  (arg1)->convertColorSpace(arg2,arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RawImageSource_findInputProfile(char * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Glib::ustring arg1 ;
  cmsHPROFILE arg2 ;
  std::string arg3 ;
  rtengine::DCPProfile **arg4 = (rtengine::DCPProfile **) 0 ;
  cmsHPROFILE *arg5 = 0 ;
  cmsHPROFILE *argp2 ;
  bool result;
  
  if(!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null Glib::ustring", 0);
    return 0;
  } 
  (&arg1)->assign(jarg1); 
  argp2 = (cmsHPROFILE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cmsHPROFILE", 0);
    return 0;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (rtengine::DCPProfile **)jarg4; 
  arg5 = (cmsHPROFILE *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cmsHPROFILE & type is null", 0);
    return 0;
  } 
  result = (bool)rtengine::RawImageSource::findInputProfile(arg1,arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_colorSpaceConversion(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, char * jarg8) {
  rtengine::Imagefloat *arg1 = (rtengine::Imagefloat *) 0 ;
  rtengine::procparams::ColorManagementParams arg2 ;
  rtengine::ColorTemp *arg3 = 0 ;
  double *arg4 ;
  cmsHPROFILE arg5 ;
  cmsHPROFILE arg6 ;
  double (*arg7)[3] ;
  std::string arg8 ;
  rtengine::procparams::ColorManagementParams *argp2 ;
  cmsHPROFILE *argp5 ;
  cmsHPROFILE *argp6 ;
  
  arg1 = (rtengine::Imagefloat *)jarg1; 
  argp2 = (rtengine::procparams::ColorManagementParams *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtengine::procparams::ColorManagementParams", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (rtengine::ColorTemp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtengine::ColorTemp & type is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4; 
  argp5 = (cmsHPROFILE *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cmsHPROFILE", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (cmsHPROFILE *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cmsHPROFILE", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (double (*)[3])jarg7; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg8)->assign(jarg8); 
  rtengine::RawImageSource::colorSpaceConversion(arg1,arg2,*arg3,arg4,arg5,arg6,(double (*)[3])arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_inverse33(void * jarg1, void * jarg2) {
  double (*arg1)[3] = (double (*)[3]) 0 ;
  double (*arg2)[3] = (double (*)[3]) 0 ;
  
  arg1 = (double (*)[3])jarg1; 
  arg2 = (double (*)[3])jarg2; 
  rtengine::RawImageSource::inverse33((double const (*)[3])arg1,(double (*)[3])arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_boxblur2(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  float **arg2 = (float **) 0 ;
  float **arg3 = (float **) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (float **)jarg2; 
  arg3 = (float **)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->boxblur2(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_boxblur_resamp(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  float **arg2 = (float **) 0 ;
  float **arg3 = (float **) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (float **)jarg2; 
  arg3 = (float **)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->boxblur_resamp(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_HLRecovery_inpaint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  rtengine::RawImageSource *arg1 = (rtengine::RawImageSource *) 0 ;
  float **arg2 = (float **) 0 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  arg1 = (rtengine::RawImageSource *)jarg1; 
  arg2 = (float **)jarg2; 
  arg3 = (float **)jarg3; 
  arg4 = (float **)jarg4; 
  (arg1)->HLRecovery_inpaint(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_HLRecovery_Luminance(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, float jarg8) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float arg8 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  rtengine::RawImageSource::HLRecovery_Luminance(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_HLRecovery_CIELab(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, float jarg8, void * jarg9, void * jarg10) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float arg8 ;
  double (*arg9)[3] ;
  double (*arg10)[3] ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (double (*)[3])jarg9; 
  arg10 = (double (*)[3])jarg10; 
  rtengine::RawImageSource::HLRecovery_CIELab(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(double (*)[3])arg9,(double (*)[3])arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_HLRecovery_blend(void * jarg1, void * jarg2, void * jarg3, int jarg4, float jarg5, void * jarg6) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float arg5 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float *)jarg6; 
  rtengine::RawImageSource::HLRecovery_blend(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_init() {
  rtengine::RawImageSource::init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RawImageSource_cleanup() {
  rtengine::RawImageSource::cleanup();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PreviewImage(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Glib::ustring *arg1 = 0 ;
  Glib::ustring *arg2 = 0 ;
  rtengine::PreviewImage::PreviewImageMode arg3 ;
  rtengine::PreviewImage *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null ustring", 0);
    return 0;
  }
  Glib::ustring arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (rtengine::PreviewImage::PreviewImageMode)jarg3; 
  result = (rtengine::PreviewImage *)new rtengine::PreviewImage((Glib::ustring const &)*arg1,(Glib::ustring const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PreviewImage_getImagePtr(void * jarg1) {
  void * jresult ;
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  result = (unsigned char *)(arg1)->getImagePtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PreviewImage_getWidth(void * jarg1) {
  int jresult ;
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  int result;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  result = (int)(arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PreviewImage_getHeight(void * jarg1) {
  int jresult ;
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  int result;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  result = (int)(arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PreviewImage_getStride(void * jarg1) {
  int jresult ;
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  int result;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  result = (int)(arg1)->getStride();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PreviewImage_IsValid(void * jarg1) {
  unsigned int jresult ;
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  bool result;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PreviewImage_getPixelFormat(void * jarg1) {
  int jresult ;
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  Cairo::Format result;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  result = (Cairo::Format)(arg1)->getPixelFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PreviewImage(void * jarg1) {
  rtengine::PreviewImage *arg1 = (rtengine::PreviewImage *) 0 ;
  
  arg1 = (rtengine::PreviewImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAIRO_FORMAT_ARGB32_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAIRO_FORMAT_RGB24_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAIRO_FORMAT_A8_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAIRO_FORMAT_A1_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAIRO_FORMAT_RGB16_565_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAIRO_FORMAT_RGB30_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT rtengine::procparams::PartialProfile * SWIGSTDCALL CSharp_AutoPartialProfile_SWIGUpcast(rtengine::procparams::AutoPartialProfile *jarg1) {
    return (rtengine::procparams::PartialProfile *)jarg1;
}

SWIGEXPORT rtexif::TagDirectory * SWIGSTDCALL CSharp_TagDirectoryTable_SWIGUpcast(rtexif::TagDirectoryTable *jarg1) {
    return (rtexif::TagDirectory *)jarg1;
}

SWIGEXPORT rtexif::Interpreter * SWIGSTDCALL CSharp_ChoiceInterpreter_SWIGUpcast(rtexif::ChoiceInterpreter *jarg1) {
    return (rtexif::Interpreter *)jarg1;
}

SWIGEXPORT rtengine::IImage * SWIGSTDCALL CSharp_IImagefloat_SWIGUpcast(rtengine::IImagefloat *jarg1) {
    return (rtengine::IImage *)jarg1;
}

SWIGEXPORT rtengine::IImage * SWIGSTDCALL CSharp_IImage8_SWIGUpcast(rtengine::IImage8 *jarg1) {
    return (rtengine::IImage *)jarg1;
}

SWIGEXPORT rtengine::IImage * SWIGSTDCALL CSharp_IImage16_SWIGUpcast(rtengine::IImage16 *jarg1) {
    return (rtengine::IImage *)jarg1;
}

SWIGEXPORT rtengine::ProgressListener * SWIGSTDCALL CSharp_BatchProcessingListener_SWIGUpcast(rtengine::BatchProcessingListener *jarg1) {
    return (rtengine::ProgressListener *)jarg1;
}

SWIGEXPORT rtengine::ImageMetaData * SWIGSTDCALL CSharp_ImageData_SWIGUpcast(rtengine::ImageData *jarg1) {
    return (rtengine::ImageMetaData *)jarg1;
}

SWIGEXPORT rtengine::IImage8 * SWIGSTDCALL CSharp_Image8_SWIGUpcast(rtengine::Image8 *jarg1) {
    return (rtengine::IImage8 *)jarg1;
}

SWIGEXPORT rtengine::IImage16 * SWIGSTDCALL CSharp_Image16_SWIGUpcast(rtengine::Image16 *jarg1) {
    return (rtengine::IImage16 *)jarg1;
}

SWIGEXPORT rtengine::IImagefloat * SWIGSTDCALL CSharp_Imagefloat_SWIGUpcast(rtengine::Imagefloat *jarg1) {
    return (rtengine::IImagefloat *)jarg1;
}

SWIGEXPORT rtengine::InitialImage * SWIGSTDCALL CSharp_ImageSource_SWIGUpcast(rtengine::ImageSource *jarg1) {
    return (rtengine::InitialImage *)jarg1;
}

SWIGEXPORT rtengine::ImageSource * SWIGSTDCALL CSharp_RawImageSource_SWIGUpcast(rtengine::RawImageSource *jarg1) {
    return (rtengine::ImageSource *)jarg1;
}

#ifdef __cplusplus
}
#endif

