//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class BlackWhiteParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BlackWhiteParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BlackWhiteParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BlackWhiteParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_BlackWhiteParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_std__vectorT_double_t beforeCurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_beforeCurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_beforeCurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public BlackWhiteParams.eTCModeId beforeCurveMode {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_beforeCurveMode_set(swigCPtr, (int)value);
    } 
    get {
      BlackWhiteParams.eTCModeId ret = (BlackWhiteParams.eTCModeId)libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_beforeCurveMode_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t afterCurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_afterCurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_afterCurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public BlackWhiteParams.eTCModeId afterCurveMode {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_afterCurveMode_set(swigCPtr, (int)value);
    } 
    get {
      BlackWhiteParams.eTCModeId ret = (BlackWhiteParams.eTCModeId)libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_afterCurveMode_get(swigCPtr);
      return ret;
    } 
  }

  public string algo {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_algo_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_algo_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t luminanceCurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_luminanceCurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_luminanceCurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public bool autoc {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_autoc_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_autoc_get(swigCPtr);
      return ret;
    } 
  }

  public bool enabledcc {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_enabledcc_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_enabledcc_get(swigCPtr);
      return ret;
    } 
  }

  public bool enabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public string filter {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_filter_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_filter_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string setting {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_setting_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_setting_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string method {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_method_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_method_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int mixerRed {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerRed_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerRed_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerOrange {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerOrange_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerOrange_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerYellow {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerYellow_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerYellow_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerGreen {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerGreen_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerGreen_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerCyan {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerCyan_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerCyan_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerBlue {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerBlue_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerBlue_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerMagenta {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerMagenta_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerMagenta_get(swigCPtr);
      return ret;
    } 
  }

  public int mixerPurple {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerPurple_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_mixerPurple_get(swigCPtr);
      return ret;
    } 
  }

  public int gammaRed {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_gammaRed_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_gammaRed_get(swigCPtr);
      return ret;
    } 
  }

  public int gammaGreen {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_gammaGreen_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_gammaGreen_get(swigCPtr);
      return ret;
    } 
  }

  public int gammaBlue {
    set {
      libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_gammaBlue_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.BlackWhiteParams_gammaBlue_get(swigCPtr);
      return ret;
    } 
  }

  public BlackWhiteParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_BlackWhiteParams(), true) {
  }

  public enum eTCModeId {
    TC_MODE_STD_BW,
    TC_MODE_WEIGHTEDSTD_BW,
    TC_MODE_FILMLIKE_BW,
    TC_MODE_SATANDVALBLENDING_BW
  }

}

}
