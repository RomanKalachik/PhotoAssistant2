//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class SharpeningParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SharpeningParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SharpeningParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SharpeningParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_SharpeningParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool enabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public double radius {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_radius_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_radius_get(swigCPtr);
      return ret;
    } 
  }

  public int amount {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_amount_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_amount_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t threshold {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_threshold_set(swigCPtr, SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_threshold_get(swigCPtr);
      SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t(cPtr, false);
      return ret;
    } 
  }

  public bool edgesonly {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_edgesonly_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_edgesonly_get(swigCPtr);
      return ret;
    } 
  }

  public double edges_radius {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_edges_radius_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_edges_radius_get(swigCPtr);
      return ret;
    } 
  }

  public int edges_tolerance {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_edges_tolerance_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_edges_tolerance_get(swigCPtr);
      return ret;
    } 
  }

  public bool halocontrol {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_halocontrol_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_halocontrol_get(swigCPtr);
      return ret;
    } 
  }

  public int halocontrol_amount {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_halocontrol_amount_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_halocontrol_amount_get(swigCPtr);
      return ret;
    } 
  }

  public string method {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_method_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_method_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int deconvamount {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconvamount_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconvamount_get(swigCPtr);
      return ret;
    } 
  }

  public double deconvradius {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconvradius_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconvradius_get(swigCPtr);
      return ret;
    } 
  }

  public int deconviter {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconviter_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconviter_get(swigCPtr);
      return ret;
    } 
  }

  public int deconvdamping {
    set {
      libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconvdamping_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.SharpeningParams_deconvdamping_get(swigCPtr);
      return ret;
    } 
  }

  public SharpeningParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_SharpeningParams(), true) {
  }

}

}
