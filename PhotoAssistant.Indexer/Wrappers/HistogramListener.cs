//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class HistogramListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HistogramListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HistogramListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HistogramListener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_HistogramListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void histogramChanged(SWIGTYPE_p_LUTT_unsigned_int_t histRed, SWIGTYPE_p_LUTT_unsigned_int_t histGreen, SWIGTYPE_p_LUTT_unsigned_int_t histBlue, SWIGTYPE_p_LUTT_unsigned_int_t histLuma, SWIGTYPE_p_LUTT_unsigned_int_t histToneCurve, SWIGTYPE_p_LUTT_unsigned_int_t histLCurve, SWIGTYPE_p_LUTT_unsigned_int_t histCCurve, SWIGTYPE_p_LUTT_unsigned_int_t histLCAM, SWIGTYPE_p_LUTT_unsigned_int_t histCCAM, SWIGTYPE_p_LUTT_unsigned_int_t histRedRaw, SWIGTYPE_p_LUTT_unsigned_int_t histGreenRaw, SWIGTYPE_p_LUTT_unsigned_int_t histBlueRaw, SWIGTYPE_p_LUTT_unsigned_int_t histChroma) {
    libPhotoAssistantImageProcessingPINVOKE.HistogramListener_histogramChanged(swigCPtr, SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histRed), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histGreen), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histBlue), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histLuma), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histToneCurve), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histLCurve), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histCCurve), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histLCAM), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histCCAM), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histRedRaw), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histGreenRaw), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histBlueRaw), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histChroma));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public HistogramListener() : this(libPhotoAssistantImageProcessingPINVOKE.new_HistogramListener(), true) {
  }

}

}
