//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class Options : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Options(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Options obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Options() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_Options(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool savesParamsAtExit {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_savesParamsAtExit_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_savesParamsAtExit_get(swigCPtr);
      return ret;
    } 
  }

  public SaveFormat saveFormat {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveFormat_set(swigCPtr, SaveFormat.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_saveFormat_get(swigCPtr);
      SaveFormat ret = (cPtr == global::System.IntPtr.Zero) ? null : new SaveFormat(cPtr, false);
      return ret;
    } 
  }

  public SaveFormat saveFormatBatch {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveFormatBatch_set(swigCPtr, SaveFormat.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_saveFormatBatch_get(swigCPtr);
      SaveFormat ret = (cPtr == global::System.IntPtr.Zero) ? null : new SaveFormat(cPtr, false);
      return ret;
    } 
  }

  public string savePathTemplate {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_savePathTemplate_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_savePathTemplate_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string savePathFolder {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_savePathFolder_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_savePathFolder_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool saveUsePathTemplate {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveUsePathTemplate_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveUsePathTemplate_get(swigCPtr);
      return ret;
    } 
  }

  public string defProfRaw {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_defProfRaw_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_defProfRaw_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string defProfImg {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_defProfImg_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_defProfImg_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string dateFormat {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_dateFormat_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_dateFormat_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int adjusterDelay {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_adjusterDelay_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_adjusterDelay_get(swigCPtr);
      return ret;
    } 
  }

  public int startupDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_startupDir_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_startupDir_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Gtk__SortType dirBrowserSortType {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_dirBrowserSortType_set(swigCPtr, SWIGTYPE_p_Gtk__SortType.getCPtr(value));
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Gtk__SortType ret = new SWIGTYPE_p_Gtk__SortType(libPhotoAssistantImageProcessingPINVOKE.Options_dirBrowserSortType_get(swigCPtr), true);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string startupPath {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_startupPath_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_startupPath_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string profilePath {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_profilePath_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_profilePath_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool useBundledProfiles {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_useBundledProfiles_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_useBundledProfiles_get(swigCPtr);
      return ret;
    } 
  }

  public string loadSaveProfilePath {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_loadSaveProfilePath_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_loadSaveProfilePath_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastSaveAsPath {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastSaveAsPath_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastSaveAsPath_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int saveAsDialogWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveAsDialogWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveAsDialogWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int saveAsDialogHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveAsDialogHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveAsDialogHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int toolPanelWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_toolPanelWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_toolPanelWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int browserToolPanelWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_browserToolPanelWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_browserToolPanelWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int browserToolPanelHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_browserToolPanelHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_browserToolPanelHeight_get(swigCPtr);
      return ret;
    } 
  }

  public bool browserToolPanelOpened {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_browserToolPanelOpened_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_browserToolPanelOpened_get(swigCPtr);
      return ret;
    } 
  }

  public bool browserDirPanelOpened {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_browserDirPanelOpened_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_browserDirPanelOpened_get(swigCPtr);
      return ret;
    } 
  }

  public bool editorFilmStripOpened {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_editorFilmStripOpened_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_editorFilmStripOpened_get(swigCPtr);
      return ret;
    } 
  }

  public int historyPanelWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_historyPanelWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_historyPanelWidth_get(swigCPtr);
      return ret;
    } 
  }

  public string font {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_font_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_font_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int windowWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_windowWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_windowWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int windowHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_windowHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_windowHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int windowX {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_windowX_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_windowX_get(swigCPtr);
      return ret;
    } 
  }

  public int windowY {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_windowY_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_windowY_get(swigCPtr);
      return ret;
    } 
  }

  public bool windowMaximized {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_windowMaximized_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_windowMaximized_get(swigCPtr);
      return ret;
    } 
  }

  public int detailWindowWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_detailWindowWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_detailWindowWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int detailWindowHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_detailWindowHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_detailWindowHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int dirBrowserWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_dirBrowserWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_dirBrowserWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int dirBrowserHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_dirBrowserHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_dirBrowserHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int preferencesWidth {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_preferencesWidth_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_preferencesWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int preferencesHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_preferencesHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_preferencesHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int lastScale {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastScale_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastScale_get(swigCPtr);
      return ret;
    } 
  }

  public int panAccelFactor {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_panAccelFactor_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_panAccelFactor_get(swigCPtr);
      return ret;
    } 
  }

  public int lastCropSize {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastCropSize_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastCropSize_get(swigCPtr);
      return ret;
    } 
  }

  public bool fbOnlyRaw {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fbOnlyRaw_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fbOnlyRaw_get(swigCPtr);
      return ret;
    } 
  }

  public bool fbShowDateTime {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fbShowDateTime_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fbShowDateTime_get(swigCPtr);
      return ret;
    } 
  }

  public bool fbShowBasicExif {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fbShowBasicExif_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fbShowBasicExif_get(swigCPtr);
      return ret;
    } 
  }

  public bool fbShowExpComp {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fbShowExpComp_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fbShowExpComp_get(swigCPtr);
      return ret;
    } 
  }

  public bool fbShowHidden {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fbShowHidden_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fbShowHidden_get(swigCPtr);
      return ret;
    } 
  }

  public int fbArrangement {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fbArrangement_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_fbArrangement_get(swigCPtr);
      return ret;
    } 
  }

  public bool multiUser {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_multiUser_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_multiUser_get(swigCPtr);
      return ret;
    } 
  }

  public static string rtdir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_rtdir_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_rtdir_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string version {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_version_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_version_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int thumbSize {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_thumbSize_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_thumbSize_get(swigCPtr);
      return ret;
    } 
  }

  public int thumbSizeTab {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_thumbSizeTab_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_thumbSizeTab_get(swigCPtr);
      return ret;
    } 
  }

  public int thumbSizeQueue {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_thumbSizeQueue_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_thumbSizeQueue_get(swigCPtr);
      return ret;
    } 
  }

  public bool sameThumbSize {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_sameThumbSize_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_sameThumbSize_get(swigCPtr);
      return ret;
    } 
  }

  public bool showHistory {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showHistory_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showHistory_get(swigCPtr);
      return ret;
    } 
  }

  public int showFilePanelState {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showFilePanelState_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_showFilePanelState_get(swigCPtr);
      return ret;
    } 
  }

  public bool showInfo {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showInfo_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showInfo_get(swigCPtr);
      return ret;
    } 
  }

  public bool mainNBVertical {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_mainNBVertical_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_mainNBVertical_get(swigCPtr);
      return ret;
    } 
  }

  public int cropPPI {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_cropPPI_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_cropPPI_get(swigCPtr);
      return ret;
    } 
  }

  public bool showClippedHighlights {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showClippedHighlights_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showClippedHighlights_get(swigCPtr);
      return ret;
    } 
  }

  public bool showClippedShadows {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showClippedShadows_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showClippedShadows_get(swigCPtr);
      return ret;
    } 
  }

  public int highlightThreshold {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_highlightThreshold_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_highlightThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public int shadowThreshold {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_shadowThreshold_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_shadowThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public bool blinkClipped {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_blinkClipped_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_blinkClipped_get(swigCPtr);
      return ret;
    } 
  }

  public int bgcolor {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_bgcolor_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_bgcolor_get(swigCPtr);
      return ret;
    } 
  }

  public string language {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_language_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_language_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool languageAutoDetect {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_languageAutoDetect_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_languageAutoDetect_get(swigCPtr);
      return ret;
    } 
  }

  public string theme {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_theme_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_theme_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool slimUI {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_slimUI_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_slimUI_get(swigCPtr);
      return ret;
    } 
  }

  public bool useSystemTheme {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_useSystemTheme_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_useSystemTheme_get(swigCPtr);
      return ret;
    } 
  }

  public static string cacheBaseDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_cacheBaseDir_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_cacheBaseDir_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool autoSuffix {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_autoSuffix_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_autoSuffix_get(swigCPtr);
      return ret;
    } 
  }

  public bool forceFormatOpts {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_forceFormatOpts_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_forceFormatOpts_get(swigCPtr);
      return ret;
    } 
  }

  public int saveMethodNum {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveMethodNum_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveMethodNum_get(swigCPtr);
      return ret;
    } 
  }

  public bool saveParamsFile {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveParamsFile_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveParamsFile_get(swigCPtr);
      return ret;
    } 
  }

  public bool saveParamsCache {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_saveParamsCache_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveParamsCache_get(swigCPtr);
      return ret;
    } 
  }

  public PPLoadLocation paramsLoadLocation {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_paramsLoadLocation_set(swigCPtr, (int)value);
    } 
    get {
      PPLoadLocation ret = (PPLoadLocation)libPhotoAssistantImageProcessingPINVOKE.Options_paramsLoadLocation_get(swigCPtr);
      return ret;
    } 
  }

  public bool procQueueEnabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_procQueueEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_procQueueEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public string gimpDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_gimpDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_gimpDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string psDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_psDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_psDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string customEditorProg {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_customEditorProg_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_customEditorProg_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string CPBPath {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_CPBPath_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_CPBPath_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CPBKeyType CPBKeys {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_CPBKeys_set(swigCPtr, (int)value);
    } 
    get {
      CPBKeyType ret = (CPBKeyType)libPhotoAssistantImageProcessingPINVOKE.Options_CPBKeys_get(swigCPtr);
      return ret;
    } 
  }

  public int editorToSendTo {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_editorToSendTo_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_editorToSendTo_get(swigCPtr);
      return ret;
    } 
  }

  public int maxThumbnailHeight {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_maxThumbnailHeight_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_maxThumbnailHeight_get(swigCPtr);
      return ret;
    } 
  }

  public uint maxCacheEntries {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_maxCacheEntries_set(swigCPtr, value);
    } 
    get {
      uint ret = libPhotoAssistantImageProcessingPINVOKE.Options_maxCacheEntries_get(swigCPtr);
      return ret;
    } 
  }

  public ThFileType thumbnailFormat {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_thumbnailFormat_set(swigCPtr, (int)value);
    } 
    get {
      ThFileType ret = (ThFileType)libPhotoAssistantImageProcessingPINVOKE.Options_thumbnailFormat_get(swigCPtr);
      return ret;
    } 
  }

  public int thumbInterp {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_thumbInterp_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_thumbInterp_get(swigCPtr);
      return ret;
    } 
  }

  public bool liveThumbnails {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_liveThumbnails_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_liveThumbnails_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Glib__ustring_t parseExtensions {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_parseExtensions_set(swigCPtr, SWIGTYPE_p_std__vectorT_Glib__ustring_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_parseExtensions_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Glib__ustring_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t parseExtensionsEnabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_parseExtensionsEnabled_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_parseExtensionsEnabled_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Glib__ustring_t parsedExtensions {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_parsedExtensions_set(swigCPtr, SWIGTYPE_p_std__vectorT_Glib__ustring_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_parsedExtensions_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Glib__ustring_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t tpOpen {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_tpOpen_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_tpOpen_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t baBehav {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_baBehav_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_baBehav_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      return ret;
    } 
  }

  public Settings rtSettings {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_rtSettings_set(swigCPtr, Settings.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_rtSettings_get(swigCPtr);
      Settings ret = (cPtr == global::System.IntPtr.Zero) ? null : new Settings(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Glib__ustring_t favoriteDirs {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_favoriteDirs_set(swigCPtr, SWIGTYPE_p_std__vectorT_Glib__ustring_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_favoriteDirs_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Glib__ustring_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Glib__ustring_t renameTemplates {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_renameTemplates_set(swigCPtr, SWIGTYPE_p_std__vectorT_Glib__ustring_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_renameTemplates_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Glib__ustring_t(cPtr, false);
      return ret;
    } 
  }

  public bool renameUseTemplates {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_renameUseTemplates_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_renameUseTemplates_get(swigCPtr);
      return ret;
    } 
  }

  public bool internalThumbIfUntouched {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_internalThumbIfUntouched_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_internalThumbIfUntouched_get(swigCPtr);
      return ret;
    } 
  }

  public bool overwriteOutputFile {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_overwriteOutputFile_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_overwriteOutputFile_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t thumbnailZoomRatios {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_thumbnailZoomRatios_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_thumbnailZoomRatios_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public bool overlayedFileNames {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_overlayedFileNames_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_overlayedFileNames_get(swigCPtr);
      return ret;
    } 
  }

  public bool filmStripOverlayedFileNames {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_filmStripOverlayedFileNames_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_filmStripOverlayedFileNames_get(swigCPtr);
      return ret;
    } 
  }

  public bool showFileNames {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showFileNames_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showFileNames_get(swigCPtr);
      return ret;
    } 
  }

  public bool filmStripShowFileNames {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_filmStripShowFileNames_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_filmStripShowFileNames_get(swigCPtr);
      return ret;
    } 
  }

  public bool tabbedUI {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_tabbedUI_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_tabbedUI_get(swigCPtr);
      return ret;
    } 
  }

  public int previewSizeTab {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_previewSizeTab_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_previewSizeTab_get(swigCPtr);
      return ret;
    } 
  }

  public int previewSizeBrowser {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_previewSizeBrowser_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_previewSizeBrowser_get(swigCPtr);
      return ret;
    } 
  }

  public bool rememberZoomAndPan {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_rememberZoomAndPan_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_rememberZoomAndPan_get(swigCPtr);
      return ret;
    } 
  }

  public int multiDisplayMode {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_multiDisplayMode_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_multiDisplayMode_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t cutOverlayBrush {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_cutOverlayBrush_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_cutOverlayBrush_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t navGuideBrush {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_navGuideBrush_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_navGuideBrush_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public string sndBatchQueueDone {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_sndBatchQueueDone_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_sndBatchQueueDone_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string sndLngEditProcDone {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_sndLngEditProcDone_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_sndLngEditProcDone_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double sndLngEditProcDoneSecs {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_sndLngEditProcDoneSecs_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.Options_sndLngEditProcDoneSecs_get(swigCPtr);
      return ret;
    } 
  }

  public bool sndEnable {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_sndEnable_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_sndEnable_get(swigCPtr);
      return ret;
    } 
  }

  public bool tunnelMetaData {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_tunnelMetaData_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_tunnelMetaData_get(swigCPtr);
      return ret;
    } 
  }

  public int histogramPosition {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_histogramPosition_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_histogramPosition_get(swigCPtr);
      return ret;
    } 
  }

  public bool histogramBar {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_histogramBar_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_histogramBar_get(swigCPtr);
      return ret;
    } 
  }

  public bool histogramFullMode {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_histogramFullMode_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_histogramFullMode_get(swigCPtr);
      return ret;
    } 
  }

  public bool showProfileSelector {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showProfileSelector_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showProfileSelector_get(swigCPtr);
      return ret;
    } 
  }

  public bool FileBrowserToolbarSingleRow {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_FileBrowserToolbarSingleRow_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_FileBrowserToolbarSingleRow_get(swigCPtr);
      return ret;
    } 
  }

  public bool hideTPVScrollbar {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_hideTPVScrollbar_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_hideTPVScrollbar_get(swigCPtr);
      return ret;
    } 
  }

  public bool UseIconNoText {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_UseIconNoText_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_UseIconNoText_get(swigCPtr);
      return ret;
    } 
  }

  public int whiteBalanceSpotSize {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_whiteBalanceSpotSize_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_whiteBalanceSpotSize_get(swigCPtr);
      return ret;
    } 
  }

  public int curvebboxpos {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_curvebboxpos_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_curvebboxpos_get(swigCPtr);
      return ret;
    } 
  }

  public bool showFilmStripToolBar {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_showFilmStripToolBar_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_showFilmStripToolBar_get(swigCPtr);
      return ret;
    } 
  }

  public string clutsDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_clutsDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_clutsDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int rgbDenoiseThreadLimit {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_rgbDenoiseThreadLimit_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_rgbDenoiseThreadLimit_get(swigCPtr);
      return ret;
    } 
  }

  public int maxInspectorBuffers {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_maxInspectorBuffers_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_maxInspectorBuffers_get(swigCPtr);
      return ret;
    } 
  }

  public int clutCacheSize {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_clutCacheSize_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_clutCacheSize_get(swigCPtr);
      return ret;
    } 
  }

  public bool filledProfile {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_filledProfile_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_filledProfile_get(swigCPtr);
      return ret;
    } 
  }

  public prevdemo_t prevdemo {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_prevdemo_set(swigCPtr, (int)value);
    } 
    get {
      prevdemo_t ret = (prevdemo_t)libPhotoAssistantImageProcessingPINVOKE.Options_prevdemo_get(swigCPtr);
      return ret;
    } 
  }

  public bool serializeTiffRead {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_serializeTiffRead_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_serializeTiffRead_get(swigCPtr);
      return ret;
    } 
  }

  public bool menuGroupRank {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupRank_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupRank_get(swigCPtr);
      return ret;
    } 
  }

  public bool menuGroupLabel {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupLabel_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupLabel_get(swigCPtr);
      return ret;
    } 
  }

  public bool menuGroupFileOperations {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupFileOperations_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupFileOperations_get(swigCPtr);
      return ret;
    } 
  }

  public bool menuGroupProfileOperations {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupProfileOperations_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupProfileOperations_get(swigCPtr);
      return ret;
    } 
  }

  public bool menuGroupExtProg {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupExtProg_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_menuGroupExtProg_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_sharpening {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sharpening_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sharpening_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_sharpenEdge {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sharpenEdge_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sharpenEdge_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_sharpenMicro {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sharpenMicro_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sharpenMicro_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_defringe {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_defringe_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_defringe_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_dirpyrDenoise {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_dirpyrDenoise_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_dirpyrDenoise_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_sh_hq {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sh_hq_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_sh_hq_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_dirpyrequalizer {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_dirpyrequalizer_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_dirpyrequalizer_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_wavelet {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_wavelet_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_wavelet_get(swigCPtr);
      return ret;
    } 
  }

  public string fastexport_raw_bayer_method {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_raw_bayer_method_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_raw_bayer_method_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_bayer_dcb_iterations {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_dcb_iterations_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_dcb_iterations_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_bayer_dcb_enhance {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_dcb_enhance_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_dcb_enhance_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_bayer_lmmse_iterations {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_lmmse_iterations_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_lmmse_iterations_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_bayer_linenoise {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_linenoise_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_linenoise_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_bayer_greenthresh {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_greenthresh_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_bayer_greenthresh_get(swigCPtr);
      return ret;
    } 
  }

  public string fastexport_raw_xtrans_method {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_raw_xtrans_method_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_raw_xtrans_method_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_ccSteps {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_ccSteps_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_ccSteps_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_ca {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_ca_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_ca_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_df {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_df_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_df_get(swigCPtr);
      return ret;
    } 
  }

  public bool fastexport_bypass_raw_ff {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_ff_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_bypass_raw_ff_get(swigCPtr);
      return ret;
    } 
  }

  public string fastexport_icm_input {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_input_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_input_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string fastexport_icm_working {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_working_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_working_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string fastexport_icm_output {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_output_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_output_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string fastexport_icm_gamma {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_gamma_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_icm_gamma_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool fastexport_resize_enabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public double fastexport_resize_scale {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_scale_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_scale_get(swigCPtr);
      return ret;
    } 
  }

  public string fastexport_resize_appliesTo {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_appliesTo_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_appliesTo_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string fastexport_resize_method {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_method_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_method_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int fastexport_resize_dataspec {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_dataspec_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_dataspec_get(swigCPtr);
      return ret;
    } 
  }

  public int fastexport_resize_width {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_width_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_width_get(swigCPtr);
      return ret;
    } 
  }

  public int fastexport_resize_height {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_height_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.Options_fastexport_resize_height_get(swigCPtr);
      return ret;
    } 
  }

  public string lastIccDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastIccDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastIccDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastDarkframeDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastDarkframeDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastDarkframeDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastFlatfieldDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastFlatfieldDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastFlatfieldDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastRgbCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastRgbCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastRgbCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastLabCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastLabCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastLabCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastDenoiseCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastDenoiseCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastDenoiseCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastWaveletCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastWaveletCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastWaveletCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastPFCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastPFCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastPFCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastHsvCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastHsvCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastHsvCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastToneCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastToneCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastToneCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastColorToningCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastColorToningCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastColorToningCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastVibranceCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastVibranceCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastVibranceCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastProfilingReferenceDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastProfilingReferenceDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastProfilingReferenceDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastBWCurvesDir {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_lastBWCurvesDir_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.Options_lastBWCurvesDir_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint maxRecentFolders {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_maxRecentFolders_set(swigCPtr, value);
    } 
    get {
      uint ret = libPhotoAssistantImageProcessingPINVOKE.Options_maxRecentFolders_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Glib__ustring_t recentFolders {
    set {
      libPhotoAssistantImageProcessingPINVOKE.Options_recentFolders_set(swigCPtr, SWIGTYPE_p_std__vectorT_Glib__ustring_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_recentFolders_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Glib__ustring_t(cPtr, false);
      return ret;
    } 
  }

  public Options() : this(libPhotoAssistantImageProcessingPINVOKE.new_Options(), true) {
  }

  public Options copyFrom(Options other) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Options_copyFrom(swigCPtr, Options.getCPtr(other));
    Options ret = (cPtr == global::System.IntPtr.Zero) ? null : new Options(cPtr, false);
    return ret;
  }

  public void filterOutParsedExtensions() {
    libPhotoAssistantImageProcessingPINVOKE.Options_filterOutParsedExtensions(swigCPtr);
  }

  public void setDefaults() {
    libPhotoAssistantImageProcessingPINVOKE.Options_setDefaults(swigCPtr);
  }

  public int readFromFile(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Options_readFromFile(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int saveToFile(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Options_saveToFile(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool load() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_load();
    return ret;
  }

  public static void save() {
    libPhotoAssistantImageProcessingPINVOKE.Options_save();
  }

  public string getPreferredProfilePath() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.Options_getPreferredProfilePath(swigCPtr);
    return ret;
  }

  public string getUserProfilePath() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.Options_getUserProfilePath(swigCPtr);
    return ret;
  }

  public string getGlobalProfilePath() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.Options_getGlobalProfilePath(swigCPtr);
    return ret;
  }

  public string findProfilePath(SWIGTYPE_p_Glib__ustring profName) {
    string ret = libPhotoAssistantImageProcessingPINVOKE.Options_findProfilePath(swigCPtr, SWIGTYPE_p_Glib__ustring.getCPtr(profName));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_retained_extention(string fname) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_has_retained_extention(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_extention_enabled(string ext) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_is_extention_enabled(swigCPtr, ext);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_defProfRawMissing() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_is_defProfRawMissing(swigCPtr);
    return ret;
  }

  public bool is_defProfImgMissing() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.Options_is_defProfImgMissing(swigCPtr);
    return ret;
  }

  public void setDefProfRawMissing(bool value) {
    libPhotoAssistantImageProcessingPINVOKE.Options_setDefProfRawMissing(swigCPtr, value);
  }

  public void setDefProfImgMissing(bool value) {
    libPhotoAssistantImageProcessingPINVOKE.Options_setDefProfImgMissing(swigCPtr, value);
  }

}

}
