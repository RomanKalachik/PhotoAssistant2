//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class AutoChromaListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AutoChromaListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AutoChromaListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AutoChromaListener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_AutoChromaListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void chromaChanged(double autchroma, double autred, double autblue) {
    libPhotoAssistantImageProcessingPINVOKE.AutoChromaListener_chromaChanged(swigCPtr, autchroma, autred, autblue);
  }

  public virtual void noiseChanged(double nresid, double highresid) {
    libPhotoAssistantImageProcessingPINVOKE.AutoChromaListener_noiseChanged(swigCPtr, nresid, highresid);
  }

  public virtual void noiseTilePrev(int tileX, int tileY, int prevX, int prevY, int sizeT, int sizeP) {
    libPhotoAssistantImageProcessingPINVOKE.AutoChromaListener_noiseTilePrev(swigCPtr, tileX, tileY, prevX, prevY, sizeT, sizeP);
  }

  public AutoChromaListener() : this(libPhotoAssistantImageProcessingPINVOKE.new_AutoChromaListener(), true) {
  }

}

}
