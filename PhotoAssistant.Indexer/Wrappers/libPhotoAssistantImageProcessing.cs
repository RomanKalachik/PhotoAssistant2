//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class libPhotoAssistantImageProcessing {
  public static int MAXVAL {
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.MAXVAL_get();
      return ret;
    } 
  }

  public static float MAXVALF {
    get {
      float ret = libPhotoAssistantImageProcessingPINVOKE.MAXVALF_get();
      return ret;
    } 
  }

  public static double MAXVALD {
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.MAXVALD_get();
      return ret;
    } 
  }

  public static ByteOrder HOSTORDER {
    get {
      ByteOrder ret = (ByteOrder)libPhotoAssistantImageProcessingPINVOKE.HOSTORDER_get();
      return ret;
    } 
  }

  public static bool extractLensInfo(SWIGTYPE_p_std__string fullname, SWIGTYPE_p_double minFocal, SWIGTYPE_p_double maxFocal, SWIGTYPE_p_double maxApertureAtMinFocal, SWIGTYPE_p_double maxApertureAtMaxFocal) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.extractLensInfo(SWIGTYPE_p_std__string.getCPtr(fullname), SWIGTYPE_p_double.getCPtr(minFocal), SWIGTYPE_p_double.getCPtr(maxFocal), SWIGTYPE_p_double.getCPtr(maxApertureAtMinFocal), SWIGTYPE_p_double.getCPtr(maxApertureAtMaxFocal));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ushort sget2(SWIGTYPE_p_unsigned_char s, ByteOrder order) {
    ushort ret = libPhotoAssistantImageProcessingPINVOKE.sget2(SWIGTYPE_p_unsigned_char.getCPtr(s), (int)order);
    return ret;
  }

  public static int sget4(SWIGTYPE_p_unsigned_char s, ByteOrder order) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.sget4(SWIGTYPE_p_unsigned_char.getCPtr(s), (int)order);
    return ret;
  }

  public static short int2_to_signed(ushort i) {
    short ret = libPhotoAssistantImageProcessingPINVOKE.int2_to_signed(i);
    return ret;
  }

  public static TagAttrib lookupAttrib(TagAttrib dir, string field) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.lookupAttrib(TagAttrib.getCPtr(dir), field);
    TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
    return ret;
  }

  public static Interpreter stdInterpreter {
    set {
      libPhotoAssistantImageProcessingPINVOKE.stdInterpreter_set(Interpreter.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.stdInterpreter_get();
      Interpreter ret = (cPtr == global::System.IntPtr.Zero) ? null : new Interpreter(cPtr, false);
      return ret;
    } 
  }

  public static int getTypeSize(TagType type) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.getTypeSize((int)type);
    return ret;
  }

  public static TagAttrib exifAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.exifAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib gpsAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.gpsAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib iopAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.iopAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib ifdAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ifdAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib nikon2Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.nikon2Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib nikon3Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.nikon3Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib canonAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.canonAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxLensDataAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxLensDataAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxLensInfoQAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxLensInfoQAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxLensCorrAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxLensCorrAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxAEInfoAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxAEInfoAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxAEInfo2Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxAEInfo2Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxAEInfo3Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxAEInfo3Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxCameraSettingsAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxCameraSettingsAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxFlashInfoAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxFlashInfoAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxSRInfoAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxSRInfoAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxSRInfo2Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxSRInfo2Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxBatteryInfoAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxBatteryInfoAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib pentaxCameraInfoAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.pentaxCameraInfoAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib fujiAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.fujiAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib minoltaAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.minoltaAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyTag9405Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyTag9405Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyCameraInfoAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyCameraInfoAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyCameraInfo2Attribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyCameraInfo2Attribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyCameraSettingsAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyCameraSettingsAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyCameraSettingsAttribs2 {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyCameraSettingsAttribs2_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib sonyCameraSettingsAttribs3 {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.sonyCameraSettingsAttribs3_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib olympusAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.olympusAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static TagAttrib kodakIfdAttribs {
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.kodakIfdAttribs_get();
      TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
      return ret;
    } 
  }

  public static void parseKodakIfdTextualInfo(Tag textualInfo, Tag exif) {
    libPhotoAssistantImageProcessingPINVOKE.parseKodakIfdTextualInfo(Tag.getCPtr(textualInfo), Tag.getCPtr(exif));
  }

  public static string sImage8 {
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.sImage8_get();
      return ret;
    } 
  }

  public static string sImage16 {
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.sImage16_get();
      return ret;
    } 
  }

  public static string sImagefloat {
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.sImagefloat_get();
      return ret;
    } 
  }

  public static int getCoarseBitMask(CoarseTransformParams coarse) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.getCoarseBitMask(CoarseTransformParams.getCPtr(coarse));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void bilinearInterp(SWIGTYPE_p_unsigned_char src, int sw, int sh, SWIGTYPE_p_unsigned_char dst, int dw, int dh) {
    libPhotoAssistantImageProcessingPINVOKE.bilinearInterp(SWIGTYPE_p_unsigned_char.getCPtr(src), sw, sh, SWIGTYPE_p_unsigned_char.getCPtr(dst), dw, dh);
  }

  public static void nearestInterp(SWIGTYPE_p_unsigned_char src, int sw, int sh, SWIGTYPE_p_unsigned_char dst, int dw, int dh) {
    libPhotoAssistantImageProcessingPINVOKE.nearestInterp(SWIGTYPE_p_unsigned_char.getCPtr(src), sw, sh, SWIGTYPE_p_unsigned_char.getCPtr(dst), dw, dh);
  }

  public static void rotate(SWIGTYPE_p_unsigned_char img, SWIGTYPE_p_int w, SWIGTYPE_p_int h, int deg) {
    libPhotoAssistantImageProcessingPINVOKE.rotate(SWIGTYPE_p_unsigned_char.getCPtr(img), SWIGTYPE_p_int.getCPtr(w), SWIGTYPE_p_int.getCPtr(h), deg);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void hflip(SWIGTYPE_p_unsigned_char img, int w, int h) {
    libPhotoAssistantImageProcessingPINVOKE.hflip(SWIGTYPE_p_unsigned_char.getCPtr(img), w, h);
  }

  public static void vflip(SWIGTYPE_p_unsigned_char img, int w, int h) {
    libPhotoAssistantImageProcessingPINVOKE.vflip(SWIGTYPE_p_unsigned_char.getCPtr(img), w, h);
  }

  public static Options options {
    set {
      libPhotoAssistantImageProcessingPINVOKE.options_set(Options.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.options_get();
      Options ret = (cPtr == global::System.IntPtr.Zero) ? null : new Options(cPtr, false);
      return ret;
    } 
  }

  public static string argv0 {
    set {
      libPhotoAssistantImageProcessingPINVOKE.argv0_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.argv0_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string argv1 {
    set {
      libPhotoAssistantImageProcessingPINVOKE.argv1_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.argv1_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string versionString {
    set {
      libPhotoAssistantImageProcessingPINVOKE.versionString_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.versionString_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string versionSuffixString {
    set {
      libPhotoAssistantImageProcessingPINVOKE.versionSuffixString_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.versionSuffixString_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string paramFileExtension {
    set {
      libPhotoAssistantImageProcessingPINVOKE.paramFileExtension_set(value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.paramFileExtension_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int init(Settings s, string baseDir, string userSettingsDir) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.init(Settings.getCPtr(s), baseDir, userSettingsDir);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void cleanup() {
    libPhotoAssistantImageProcessingPINVOKE.cleanup();
  }

  public static SWIGTYPE_p_std__vectorT_Glib__ustring_t getWorkingProfiles() {
    SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = new SWIGTYPE_p_std__vectorT_Glib__ustring_t(libPhotoAssistantImageProcessingPINVOKE.getWorkingProfiles(), true);
    return ret;
  }

  public static SWIGTYPE_p_std__vectorT_Glib__ustring_t getGamma() {
    SWIGTYPE_p_std__vectorT_Glib__ustring_t ret = new SWIGTYPE_p_std__vectorT_Glib__ustring_t(libPhotoAssistantImageProcessingPINVOKE.getGamma(), true);
    return ret;
  }

  public static IImage16 processImage(ProcessingJob job, SWIGTYPE_p_int errorCode, ProgressListener pl, bool tunnelMetaData, bool flush) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.processImage__SWIG_0(ProcessingJob.getCPtr(job), SWIGTYPE_p_int.getCPtr(errorCode), ProgressListener.getCPtr(pl), tunnelMetaData, flush);
    IImage16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImage16(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImage16 processImage(ProcessingJob job, SWIGTYPE_p_int errorCode, ProgressListener pl, bool tunnelMetaData) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.processImage__SWIG_1(ProcessingJob.getCPtr(job), SWIGTYPE_p_int.getCPtr(errorCode), ProgressListener.getCPtr(pl), tunnelMetaData);
    IImage16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImage16(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImage16 processImage(ProcessingJob job, SWIGTYPE_p_int errorCode, ProgressListener pl) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.processImage__SWIG_2(ProcessingJob.getCPtr(job), SWIGTYPE_p_int.getCPtr(errorCode), ProgressListener.getCPtr(pl));
    IImage16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImage16(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImage16 processImage(ProcessingJob job, SWIGTYPE_p_int errorCode) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.processImage__SWIG_3(ProcessingJob.getCPtr(job), SWIGTYPE_p_int.getCPtr(errorCode));
    IImage16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImage16(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void startBatchProcessing(ProcessingJob job, BatchProcessingListener bpl, bool tunnelMetaData) {
    libPhotoAssistantImageProcessingPINVOKE.startBatchProcessing(ProcessingJob.getCPtr(job), BatchProcessingListener.getCPtr(bpl), tunnelMetaData);
  }

  public static MyMutex lcmsMutex {
    set {
      libPhotoAssistantImageProcessingPINVOKE.lcmsMutex_set(MyMutex.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.lcmsMutex_get();
      MyMutex ret = (cPtr == global::System.IntPtr.Zero) ? null : new MyMutex(cPtr, false);
      return ret;
    } 
  }

  public static readonly int TR_NONE = libPhotoAssistantImageProcessingPINVOKE.TR_NONE_get();
  public static readonly int TR_R90 = libPhotoAssistantImageProcessingPINVOKE.TR_R90_get();
  public static readonly int TR_R180 = libPhotoAssistantImageProcessingPINVOKE.TR_R180_get();
  public static readonly int TR_R270 = libPhotoAssistantImageProcessingPINVOKE.TR_R270_get();
  public static readonly int TR_VFLIP = libPhotoAssistantImageProcessingPINVOKE.TR_VFLIP_get();
  public static readonly int TR_HFLIP = libPhotoAssistantImageProcessingPINVOKE.TR_HFLIP_get();
  public static readonly int TR_ROT = libPhotoAssistantImageProcessingPINVOKE.TR_ROT_get();
  public static readonly int CHECK_BOUNDS = libPhotoAssistantImageProcessingPINVOKE.CHECK_BOUNDS_get();
  public static readonly int STARTUPDIR_CURRENT = libPhotoAssistantImageProcessingPINVOKE.STARTUPDIR_CURRENT_get();
  public static readonly int STARTUPDIR_HOME = libPhotoAssistantImageProcessingPINVOKE.STARTUPDIR_HOME_get();
  public static readonly int STARTUPDIR_CUSTOM = libPhotoAssistantImageProcessingPINVOKE.STARTUPDIR_CUSTOM_get();
  public static readonly int STARTUPDIR_LAST = libPhotoAssistantImageProcessingPINVOKE.STARTUPDIR_LAST_get();
  public static readonly string DEFPROFILE_RAW = libPhotoAssistantImageProcessingPINVOKE.DEFPROFILE_RAW_get();
  public static readonly string DEFPROFILE_IMG = libPhotoAssistantImageProcessingPINVOKE.DEFPROFILE_IMG_get();
  public static readonly string DEFPROFILE_INTERNAL = libPhotoAssistantImageProcessingPINVOKE.DEFPROFILE_INTERNAL_get();
  public static readonly int LUT_CLIP_BELOW = libPhotoAssistantImageProcessingPINVOKE.LUT_CLIP_BELOW_get();
  public static readonly int LUT_CLIP_ABOVE = libPhotoAssistantImageProcessingPINVOKE.LUT_CLIP_ABOVE_get();
  public static readonly int MINTEMP = libPhotoAssistantImageProcessingPINVOKE.MINTEMP_get();
  public static readonly int MAXTEMP = libPhotoAssistantImageProcessingPINVOKE.MAXTEMP_get();
  public static readonly double MINGREEN = libPhotoAssistantImageProcessingPINVOKE.MINGREEN_get();
  public static readonly double MAXGREEN = libPhotoAssistantImageProcessingPINVOKE.MAXGREEN_get();
  public static readonly double MINEQUAL = libPhotoAssistantImageProcessingPINVOKE.MINEQUAL_get();
  public static readonly double MAXEQUAL = libPhotoAssistantImageProcessingPINVOKE.MAXEQUAL_get();
  public static readonly int INITIALBLACKBODY = libPhotoAssistantImageProcessingPINVOKE.INITIALBLACKBODY_get();
  public static readonly int HR_SCALE = libPhotoAssistantImageProcessingPINVOKE.HR_SCALE_get();
  public static readonly int CAIRO_FORMAT_ARGB32 = libPhotoAssistantImageProcessingPINVOKE.CAIRO_FORMAT_ARGB32_get();
  public static readonly int CAIRO_FORMAT_RGB24 = libPhotoAssistantImageProcessingPINVOKE.CAIRO_FORMAT_RGB24_get();
  public static readonly int CAIRO_FORMAT_A8 = libPhotoAssistantImageProcessingPINVOKE.CAIRO_FORMAT_A8_get();
  public static readonly int CAIRO_FORMAT_A1 = libPhotoAssistantImageProcessingPINVOKE.CAIRO_FORMAT_A1_get();
  public static readonly int CAIRO_FORMAT_RGB16_565 = libPhotoAssistantImageProcessingPINVOKE.CAIRO_FORMAT_RGB16_565_get();
  public static readonly int CAIRO_FORMAT_RGB30 = libPhotoAssistantImageProcessingPINVOKE.CAIRO_FORMAT_RGB30_get();
}

}
