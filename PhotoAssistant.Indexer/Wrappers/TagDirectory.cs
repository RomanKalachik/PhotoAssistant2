//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class TagDirectory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TagDirectory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TagDirectory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TagDirectory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_TagDirectory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public TagDirectory() : this(libPhotoAssistantImageProcessingPINVOKE.new_TagDirectory__SWIG_0(), true) {
  }

  public TagDirectory(TagDirectory p, SWIGTYPE_p_FILE f, int arg2, TagAttrib ta, ByteOrder border, bool skipIgnored) : this(libPhotoAssistantImageProcessingPINVOKE.new_TagDirectory__SWIG_1(TagDirectory.getCPtr(p), SWIGTYPE_p_FILE.getCPtr(f), arg2, TagAttrib.getCPtr(ta), (int)border, skipIgnored), true) {
  }

  public TagDirectory(TagDirectory p, SWIGTYPE_p_FILE f, int arg2, TagAttrib ta, ByteOrder border) : this(libPhotoAssistantImageProcessingPINVOKE.new_TagDirectory__SWIG_2(TagDirectory.getCPtr(p), SWIGTYPE_p_FILE.getCPtr(f), arg2, TagAttrib.getCPtr(ta), (int)border), true) {
  }

  public TagDirectory(TagDirectory p, TagAttrib ta, ByteOrder border) : this(libPhotoAssistantImageProcessingPINVOKE.new_TagDirectory__SWIG_3(TagDirectory.getCPtr(p), TagAttrib.getCPtr(ta), (int)border), true) {
  }

  public ByteOrder getOrder() {
    ByteOrder ret = (ByteOrder)libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getOrder(swigCPtr);
    return ret;
  }

  public TagDirectory getParent() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getParent(swigCPtr);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public TagDirectory getRoot() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getRoot(swigCPtr);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public int getCount() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getCount(swigCPtr);
    return ret;
  }

  public TagAttrib getAttrib(int id) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getAttrib__SWIG_0(swigCPtr, id);
    TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
    return ret;
  }

  public TagAttrib getAttrib(string name) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getAttrib__SWIG_1(swigCPtr, name);
    TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
    return ret;
  }

  public TagAttrib getAttribP(string name) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getAttribP(swigCPtr, name);
    TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
    return ret;
  }

  public TagAttrib getAttribTable() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getAttribTable(swigCPtr);
    TagAttrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagAttrib(cPtr, false);
    return ret;
  }

  public Tag getTag(string name) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getTag__SWIG_0(swigCPtr, name);
    Tag ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tag(cPtr, false);
    return ret;
  }

  public Tag getTagP(string name) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getTagP(swigCPtr, name);
    Tag ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tag(cPtr, false);
    return ret;
  }

  public Tag getTag(int ID) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getTag__SWIG_1(swigCPtr, ID);
    Tag ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tag(cPtr, false);
    return ret;
  }

  public virtual Tag findTag(string name) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_findTag(swigCPtr, name);
    Tag ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tag(cPtr, false);
    return ret;
  }

  public bool getXMPTagValue(string name, string value) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getXMPTagValue(swigCPtr, name, value);
    return ret;
  }

  public void keepTag(int ID) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_keepTag(swigCPtr, ID);
  }

  public virtual void addTag(Tag a) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_addTag(swigCPtr, Tag.getCPtr(a));
  }

  public virtual void addTagFront(Tag a) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_addTagFront(swigCPtr, Tag.getCPtr(a));
  }

  public virtual void replaceTag(Tag a) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_replaceTag(swigCPtr, Tag.getCPtr(a));
  }

  public Tag getTagByIndex(int ix) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_getTagByIndex(swigCPtr, ix);
    Tag ret = (cPtr == global::System.IntPtr.Zero) ? null : new Tag(cPtr, false);
    return ret;
  }

  public void setOrder(ByteOrder bo) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_setOrder(swigCPtr, (int)bo);
  }

  public virtual int calculateSize() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_calculateSize(swigCPtr);
    return ret;
  }

  public virtual int write(int start, SWIGTYPE_p_unsigned_char buffer) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_write(swigCPtr, start, SWIGTYPE_p_unsigned_char.getCPtr(buffer));
    return ret;
  }

  public virtual TagDirectory clone(TagDirectory parent) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_clone(swigCPtr, TagDirectory.getCPtr(parent));
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public virtual void applyChange(string field, string value) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_applyChange(swigCPtr, field, value);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printAll(uint level) {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_printAll__SWIG_0(swigCPtr, level);
  }

  public virtual void printAll() {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_printAll__SWIG_1(swigCPtr);
  }

  public virtual bool CPBDump(string commFName, string imageFName, string profileFName, string defaultPParams, SWIGTYPE_p_CacheImageData cfs, bool flagMode, SWIGTYPE_p_rtengine__SafeKeyFile keyFile, string tagDirName) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_CPBDump__SWIG_0(swigCPtr, commFName, imageFName, profileFName, defaultPParams, SWIGTYPE_p_CacheImageData.getCPtr(cfs), flagMode, SWIGTYPE_p_rtengine__SafeKeyFile.getCPtr(keyFile), tagDirName);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CPBDump(string commFName, string imageFName, string profileFName, string defaultPParams, SWIGTYPE_p_CacheImageData cfs, bool flagMode, SWIGTYPE_p_rtengine__SafeKeyFile keyFile) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_CPBDump__SWIG_1(swigCPtr, commFName, imageFName, profileFName, defaultPParams, SWIGTYPE_p_CacheImageData.getCPtr(cfs), flagMode, SWIGTYPE_p_rtengine__SafeKeyFile.getCPtr(keyFile));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CPBDump(string commFName, string imageFName, string profileFName, string defaultPParams, SWIGTYPE_p_CacheImageData cfs, bool flagMode) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.TagDirectory_CPBDump__SWIG_2(swigCPtr, commFName, imageFName, profileFName, defaultPParams, SWIGTYPE_p_CacheImageData.getCPtr(cfs), flagMode);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void sort() {
    libPhotoAssistantImageProcessingPINVOKE.TagDirectory_sort(swigCPtr);
  }

}

}
