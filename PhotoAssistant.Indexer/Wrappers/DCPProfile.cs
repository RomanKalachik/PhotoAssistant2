//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class DCPProfile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DCPProfile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DCPProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DCPProfile() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_DCPProfile(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DCPProfile(string fname, bool isRTProfile) : this(libPhotoAssistantImageProcessingPINVOKE.new_DCPProfile(fname, isRTProfile), true) {
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getHasToneCurve() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.DCPProfile_getHasToneCurve(swigCPtr);
    return ret;
  }

  public bool getHasLookTable() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.DCPProfile_getHasLookTable(swigCPtr);
    return ret;
  }

  public bool getHasHueSatMap() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.DCPProfile_getHasHueSatMap(swigCPtr);
    return ret;
  }

  public bool getHasBaselineExposureOffset() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.DCPProfile_getHasBaselineExposureOffset(swigCPtr);
    return ret;
  }

  public void getIlluminants(SWIGTYPE_p_int i1, SWIGTYPE_p_double temp1, SWIGTYPE_p_int i2, SWIGTYPE_p_double temp2, SWIGTYPE_p_bool willInterpolate_) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_getIlluminants(swigCPtr, SWIGTYPE_p_int.getCPtr(i1), SWIGTYPE_p_double.getCPtr(temp1), SWIGTYPE_p_int.getCPtr(i2), SWIGTYPE_p_double.getCPtr(temp2), SWIGTYPE_p_bool.getCPtr(willInterpolate_));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Apply(SWIGTYPE_p_Imagefloat pImg, int preferredIlluminant, string workingSpace, ColorTemp wb, SWIGTYPE_p_double pre_mul, SWIGTYPE_p_a_3__double camMatrix, bool useToneCurve, bool applyHueSatMap, bool applyLookTable) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_Apply__SWIG_0(swigCPtr, SWIGTYPE_p_Imagefloat.getCPtr(pImg), preferredIlluminant, workingSpace, ColorTemp.getCPtr(wb), SWIGTYPE_p_double.getCPtr(pre_mul), SWIGTYPE_p_a_3__double.getCPtr(camMatrix), useToneCurve, applyHueSatMap, applyLookTable);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Apply(SWIGTYPE_p_Imagefloat pImg, int preferredIlluminant, string workingSpace, ColorTemp wb, SWIGTYPE_p_double pre_mul, SWIGTYPE_p_a_3__double camMatrix, bool useToneCurve, bool applyHueSatMap) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_Apply__SWIG_1(swigCPtr, SWIGTYPE_p_Imagefloat.getCPtr(pImg), preferredIlluminant, workingSpace, ColorTemp.getCPtr(wb), SWIGTYPE_p_double.getCPtr(pre_mul), SWIGTYPE_p_a_3__double.getCPtr(camMatrix), useToneCurve, applyHueSatMap);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Apply(SWIGTYPE_p_Imagefloat pImg, int preferredIlluminant, string workingSpace, ColorTemp wb, SWIGTYPE_p_double pre_mul, SWIGTYPE_p_a_3__double camMatrix, bool useToneCurve) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_Apply__SWIG_2(swigCPtr, SWIGTYPE_p_Imagefloat.getCPtr(pImg), preferredIlluminant, workingSpace, ColorTemp.getCPtr(wb), SWIGTYPE_p_double.getCPtr(pre_mul), SWIGTYPE_p_a_3__double.getCPtr(camMatrix), useToneCurve);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Apply(SWIGTYPE_p_Imagefloat pImg, int preferredIlluminant, string workingSpace, ColorTemp wb, SWIGTYPE_p_double pre_mul, SWIGTYPE_p_a_3__double camMatrix) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_Apply__SWIG_3(swigCPtr, SWIGTYPE_p_Imagefloat.getCPtr(pImg), preferredIlluminant, workingSpace, ColorTemp.getCPtr(wb), SWIGTYPE_p_double.getCPtr(pre_mul), SWIGTYPE_p_a_3__double.getCPtr(camMatrix));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStep2ApplyState(string workingSpace, bool useToneCurve, bool applyLookTable, bool applyBaselineExposure) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_setStep2ApplyState(swigCPtr, workingSpace, useToneCurve, applyLookTable, applyBaselineExposure);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void step2ApplyTile(SWIGTYPE_p_float r, SWIGTYPE_p_float g, SWIGTYPE_p_float b, int width, int height, int tileWidth) {
    libPhotoAssistantImageProcessingPINVOKE.DCPProfile_step2ApplyTile(swigCPtr, SWIGTYPE_p_float.getCPtr(r), SWIGTYPE_p_float.getCPtr(g), SWIGTYPE_p_float.getCPtr(b), width, height, tileWidth);
  }

}

}
