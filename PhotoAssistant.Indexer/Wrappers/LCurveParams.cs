//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class LCurveParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LCurveParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LCurveParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LCurveParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_LCurveParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_std__vectorT_double_t lcurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lcurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lcurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t acurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_acurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_acurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t bcurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_bcurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_bcurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t cccurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_cccurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_cccurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t chcurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_chcurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_chcurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t lhcurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lhcurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lhcurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t hhcurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_hhcurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_hhcurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t lccurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lccurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lccurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t clcurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_clcurve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_clcurve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public int brightness {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_brightness_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_brightness_get(swigCPtr);
      return ret;
    } 
  }

  public int contrast {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_contrast_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_contrast_get(swigCPtr);
      return ret;
    } 
  }

  public int chromaticity {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_chromaticity_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_chromaticity_get(swigCPtr);
      return ret;
    } 
  }

  public bool avoidcolorshift {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_avoidcolorshift_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_avoidcolorshift_get(swigCPtr);
      return ret;
    } 
  }

  public double rstprotection {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_rstprotection_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_rstprotection_get(swigCPtr);
      return ret;
    } 
  }

  public bool lcredsk {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lcredsk_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.LCurveParams_lcredsk_get(swigCPtr);
      return ret;
    } 
  }

  public LCurveParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_LCurveParams(), true) {
  }

}

}
