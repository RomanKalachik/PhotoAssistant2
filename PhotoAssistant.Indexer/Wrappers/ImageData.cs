//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class ImageData : ImageMetaData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ImageData(global::System.IntPtr cPtr, bool cMemoryOwn) : base(libPhotoAssistantImageProcessingPINVOKE.ImageData_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImageData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ImageData() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_ImageData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ImageData(string fname, RawMetaDataLocation rml) : this(libPhotoAssistantImageProcessingPINVOKE.new_ImageData__SWIG_0(fname, RawMetaDataLocation.getCPtr(rml)), true) {
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public ImageData(string fname) : this(libPhotoAssistantImageProcessingPINVOKE.new_ImageData__SWIG_1(fname), true) {
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public override TagDirectory getExifData() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ImageData_getExifData(swigCPtr);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t getIPTCData() {
    SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t ret = new SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t(libPhotoAssistantImageProcessingPINVOKE.ImageData_getIPTCData(swigCPtr), true);
    return ret;
  }

  public override bool hasExif() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_hasExif(swigCPtr);
    return ret;
  }

  public override bool hasIPTC() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_hasIPTC(swigCPtr);
    return ret;
  }

  public override SWIGTYPE_p_tm getDateTime() {
    SWIGTYPE_p_tm ret = new SWIGTYPE_p_tm(libPhotoAssistantImageProcessingPINVOKE.ImageData_getDateTime(swigCPtr), true);
    return ret;
  }

  public override SWIGTYPE_p_time_t getDateTimeAsTS() {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(libPhotoAssistantImageProcessingPINVOKE.ImageData_getDateTimeAsTS(swigCPtr), true);
    return ret;
  }

  public override int getISOSpeed() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getISOSpeed(swigCPtr);
    return ret;
  }

  public override double getFNumber() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getFNumber(swigCPtr);
    return ret;
  }

  public override double getFocalLen() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getFocalLen(swigCPtr);
    return ret;
  }

  public override double getFocalLen35mm() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getFocalLen35mm(swigCPtr);
    return ret;
  }

  public override float getFocusDist() {
    float ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getFocusDist(swigCPtr);
    return ret;
  }

  public override double getShutterSpeed() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getShutterSpeed(swigCPtr);
    return ret;
  }

  public override double getExpComp() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getExpComp(swigCPtr);
    return ret;
  }

  public override string getMake() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getMake(swigCPtr);
    return ret;
  }

  public override string getModel() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getModel(swigCPtr);
    return ret;
  }

  public override string getLens() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getLens(swigCPtr);
    return ret;
  }

  public string getSerialNumber() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getSerialNumber(swigCPtr);
    return ret;
  }

  public override string getOrientation() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.ImageData_getOrientation(swigCPtr);
    return ret;
  }

}

}
