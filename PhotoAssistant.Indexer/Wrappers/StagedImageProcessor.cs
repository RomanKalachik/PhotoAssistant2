//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class StagedImageProcessor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StagedImageProcessor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StagedImageProcessor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StagedImageProcessor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_StagedImageProcessor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual InitialImage getInitialImage() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getInitialImage(swigCPtr);
    InitialImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new InitialImage(cPtr, false);
    return ret;
  }

  public virtual void getParams(ProcParams dst) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getParams(swigCPtr, ProcParams.getCPtr(dst));
  }

  public virtual ProcParams beginUpdateParams() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_beginUpdateParams(swigCPtr);
    ProcParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProcParams(cPtr, false);
    return ret;
  }

  public virtual void endUpdateParams(ProcEvent change) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_endUpdateParams__SWIG_0(swigCPtr, (int)change);
  }

  public virtual void endUpdateParams(int changeFlags) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_endUpdateParams__SWIG_1(swigCPtr, changeFlags);
  }

  public virtual void startProcessing(int changeCode) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_startProcessing(swigCPtr, changeCode);
  }

  public virtual void stopProcessing() {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_stopProcessing(swigCPtr);
  }

  public virtual void setPreviewScale(int scale) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setPreviewScale(swigCPtr, scale);
  }

  public virtual int getPreviewScale() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getPreviewScale(swigCPtr);
    return ret;
  }

  public virtual int getFullWidth() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getFullWidth(swigCPtr);
    return ret;
  }

  public virtual int getFullHeight() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getFullHeight(swigCPtr);
    return ret;
  }

  public virtual int getPreviewWidth() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getPreviewWidth(swigCPtr);
    return ret;
  }

  public virtual int getPreviewHeight() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getPreviewHeight(swigCPtr);
    return ret;
  }

  public virtual bool updateTryLock() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_updateTryLock(swigCPtr);
    return ret;
  }

  public virtual void updateUnLock() {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_updateUnLock(swigCPtr);
  }

  public virtual bool getAutoWB(SWIGTYPE_p_double temp, SWIGTYPE_p_double green, double equal) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getAutoWB(swigCPtr, SWIGTYPE_p_double.getCPtr(temp), SWIGTYPE_p_double.getCPtr(green), equal);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void getCamWB(SWIGTYPE_p_double temp, SWIGTYPE_p_double green) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getCamWB(swigCPtr, SWIGTYPE_p_double.getCPtr(temp), SWIGTYPE_p_double.getCPtr(green));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getSpotWB(int x, int y, int rectSize, SWIGTYPE_p_double temp, SWIGTYPE_p_double green) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getSpotWB(swigCPtr, x, y, rectSize, SWIGTYPE_p_double.getCPtr(temp), SWIGTYPE_p_double.getCPtr(green));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getAutoCrop(double ratio, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int w, SWIGTYPE_p_int h) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_getAutoCrop(swigCPtr, ratio, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(w), SWIGTYPE_p_int.getCPtr(h));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void saveInputICCReference(string fname, bool apply_wb) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_saveInputICCReference(swigCPtr, fname, apply_wb);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setProgressListener(ProgressListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setProgressListener(swigCPtr, ProgressListener.getCPtr(l));
  }

  public virtual void setSizeListener(SizeListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setSizeListener(swigCPtr, SizeListener.getCPtr(l));
  }

  public virtual void delSizeListener(SizeListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_delSizeListener(swigCPtr, SizeListener.getCPtr(l));
  }

  public virtual void setAutoExpListener(AutoExpListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setAutoExpListener(swigCPtr, AutoExpListener.getCPtr(l));
  }

  public virtual void setHistogramListener(HistogramListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setHistogramListener(swigCPtr, HistogramListener.getCPtr(l));
  }

  public virtual void setPreviewImageListener(PreviewImageListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setPreviewImageListener(swigCPtr, PreviewImageListener.getCPtr(l));
  }

  public virtual void setAutoCamListener(AutoCamListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setAutoCamListener(swigCPtr, AutoCamListener.getCPtr(l));
  }

  public virtual void setAutoBWListener(AutoBWListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setAutoBWListener(swigCPtr, AutoBWListener.getCPtr(l));
  }

  public virtual void setAutoColorTonListener(AutoColorTonListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setAutoColorTonListener(swigCPtr, AutoColorTonListener.getCPtr(l));
  }

  public virtual void setAutoChromaListener(AutoChromaListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setAutoChromaListener(swigCPtr, AutoChromaListener.getCPtr(l));
  }

  public virtual void setWaveletListener(WaveletListener l) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_setWaveletListener(swigCPtr, WaveletListener.getCPtr(l));
  }

  public static StagedImageProcessor create(InitialImage initialImage) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_create(InitialImage.getCPtr(initialImage));
    StagedImageProcessor ret = (cPtr == global::System.IntPtr.Zero) ? null : new StagedImageProcessor(cPtr, false);
    return ret;
  }

  public static void destroy(StagedImageProcessor sip) {
    libPhotoAssistantImageProcessingPINVOKE.StagedImageProcessor_destroy(StagedImageProcessor.getCPtr(sip));
  }

}

}
