//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class IImage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IImage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_IImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual MyMutex getMutex() {
    MyMutex ret = new MyMutex(libPhotoAssistantImageProcessingPINVOKE.IImage_getMutex(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_cmsHPROFILE getProfile() {
    SWIGTYPE_p_cmsHPROFILE ret = new SWIGTYPE_p_cmsHPROFILE(libPhotoAssistantImageProcessingPINVOKE.IImage_getProfile(swigCPtr), true);
    return ret;
  }

  public virtual int getBitsPerPixel() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_getBitsPerPixel(swigCPtr);
    return ret;
  }

  public virtual int saveToFile(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveToFile(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsPNG(string fname, int compression, int bps) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsPNG__SWIG_0(swigCPtr, fname, compression, bps);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsPNG(string fname, int compression) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsPNG__SWIG_1(swigCPtr, fname, compression);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsPNG(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsPNG__SWIG_2(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsJPEG(string fname, int quality, int subSamp) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsJPEG__SWIG_0(swigCPtr, fname, quality, subSamp);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsJPEG(string fname, int quality) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsJPEG__SWIG_1(swigCPtr, fname, quality);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsJPEG(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsJPEG__SWIG_2(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsTIFF(string fname, int bps, bool uncompressed) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsTIFF__SWIG_0(swigCPtr, fname, bps, uncompressed);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsTIFF(string fname, int bps) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsTIFF__SWIG_1(swigCPtr, fname, bps);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int saveAsTIFF(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.IImage_saveAsTIFF__SWIG_2(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setSaveProgressListener(ProgressListener pl) {
    libPhotoAssistantImageProcessingPINVOKE.IImage_setSaveProgressListener(swigCPtr, ProgressListener.getCPtr(pl));
  }

  public virtual void free() {
    libPhotoAssistantImageProcessingPINVOKE.IImage_free(swigCPtr);
  }

}

}
