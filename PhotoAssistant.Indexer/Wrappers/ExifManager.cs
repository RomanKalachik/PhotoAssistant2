//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class ExifManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExifManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExifManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ExifManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_ExifManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static TagDirectory parse(SWIGTYPE_p_FILE f, int arg1, bool skipIgnored) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ExifManager_parse__SWIG_0(SWIGTYPE_p_FILE.getCPtr(f), arg1, skipIgnored);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public static TagDirectory parse(SWIGTYPE_p_FILE f, int arg1) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ExifManager_parse__SWIG_1(SWIGTYPE_p_FILE.getCPtr(f), arg1);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public static TagDirectory parseJPEG(SWIGTYPE_p_FILE f) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ExifManager_parseJPEG(SWIGTYPE_p_FILE.getCPtr(f));
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public static TagDirectory parseTIFF(SWIGTYPE_p_FILE f, bool skipIgnored) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ExifManager_parseTIFF__SWIG_0(SWIGTYPE_p_FILE.getCPtr(f), skipIgnored);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public static TagDirectory parseTIFF(SWIGTYPE_p_FILE f) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ExifManager_parseTIFF__SWIG_1(SWIGTYPE_p_FILE.getCPtr(f));
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public static TagDirectory parseCIFF(SWIGTYPE_p_FILE f, int arg1, int length) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ExifManager_parseCIFF__SWIG_0(SWIGTYPE_p_FILE.getCPtr(f), arg1, length);
    TagDirectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new TagDirectory(cPtr, false);
    return ret;
  }

  public static void parseCIFF(SWIGTYPE_p_FILE f, int arg1, int length, TagDirectory root) {
    libPhotoAssistantImageProcessingPINVOKE.ExifManager_parseCIFF__SWIG_1(SWIGTYPE_p_FILE.getCPtr(f), arg1, length, TagDirectory.getCPtr(root));
  }

  public static SWIGTYPE_p_std__vectorT_rtexif__Tag_p_t getDefaultTIFFTags(TagDirectory forthis) {
    SWIGTYPE_p_std__vectorT_rtexif__Tag_p_t ret = new SWIGTYPE_p_std__vectorT_rtexif__Tag_p_t(libPhotoAssistantImageProcessingPINVOKE.ExifManager_getDefaultTIFFTags(TagDirectory.getCPtr(forthis)), false);
    return ret;
  }

  public static int createJPEGMarker(TagDirectory root, SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t changeList, int W, int H, SWIGTYPE_p_unsigned_char buffer) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ExifManager_createJPEGMarker(TagDirectory.getCPtr(root), SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t.getCPtr(changeList), W, H, SWIGTYPE_p_unsigned_char.getCPtr(buffer));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int createTIFFHeader(TagDirectory root, SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t changeList, int W, int H, int bps, string profiledata, int profilelen, string iptcdata, int iptclen, SWIGTYPE_p_unsigned_char buffer) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ExifManager_createTIFFHeader(TagDirectory.getCPtr(root), SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t.getCPtr(changeList), W, H, bps, profiledata, profilelen, iptcdata, iptclen, SWIGTYPE_p_unsigned_char.getCPtr(buffer));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExifManager() : this(libPhotoAssistantImageProcessingPINVOKE.new_ExifManager(), true) {
  }

}

}
