//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class DirPyrEqualizerParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DirPyrEqualizerParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DirPyrEqualizerParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DirPyrEqualizerParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_DirPyrEqualizerParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool enabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool gamutlab {
    set {
      libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_gamutlab_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_gamutlab_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_double mult {
    set {
      libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_mult_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_mult_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public double threshold {
    set {
      libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_threshold_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_threshold_get(swigCPtr);
      return ret;
    } 
  }

  public double skinprotect {
    set {
      libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_skinprotect_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_skinprotect_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t hueskin {
    set {
      libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_hueskin_set(swigCPtr, SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.DirPyrEqualizerParams_hueskin_get(swigCPtr);
      SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_rtengine__procparams__ThresholdT_int_t(cPtr, false);
      return ret;
    } 
  }

  public DirPyrEqualizerParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_DirPyrEqualizerParams(), true) {
  }

}

}
