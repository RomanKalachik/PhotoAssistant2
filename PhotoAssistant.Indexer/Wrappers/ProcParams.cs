//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class ProcParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProcParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProcParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProcParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_ProcParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ToneCurveParams toneCurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_toneCurve_set(swigCPtr, ToneCurveParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_toneCurve_get(swigCPtr);
      ToneCurveParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ToneCurveParams(cPtr, false);
      return ret;
    } 
  }

  public LCurveParams labCurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_labCurve_set(swigCPtr, LCurveParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_labCurve_get(swigCPtr);
      LCurveParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new LCurveParams(cPtr, false);
      return ret;
    } 
  }

  public RGBCurvesParams rgbCurves {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_rgbCurves_set(swigCPtr, RGBCurvesParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_rgbCurves_get(swigCPtr);
      RGBCurvesParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new RGBCurvesParams(cPtr, false);
      return ret;
    } 
  }

  public ColorToningParams colorToning {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_colorToning_set(swigCPtr, ColorToningParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_colorToning_get(swigCPtr);
      ColorToningParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorToningParams(cPtr, false);
      return ret;
    } 
  }

  public SharpeningParams sharpening {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_sharpening_set(swigCPtr, SharpeningParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_sharpening_get(swigCPtr);
      SharpeningParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new SharpeningParams(cPtr, false);
      return ret;
    } 
  }

  public SharpeningParams prsharpening {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_prsharpening_set(swigCPtr, SharpeningParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_prsharpening_get(swigCPtr);
      SharpeningParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new SharpeningParams(cPtr, false);
      return ret;
    } 
  }

  public SharpenEdgeParams sharpenEdge {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_sharpenEdge_set(swigCPtr, SharpenEdgeParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_sharpenEdge_get(swigCPtr);
      SharpenEdgeParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new SharpenEdgeParams(cPtr, false);
      return ret;
    } 
  }

  public SharpenMicroParams sharpenMicro {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_sharpenMicro_set(swigCPtr, SharpenMicroParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_sharpenMicro_get(swigCPtr);
      SharpenMicroParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new SharpenMicroParams(cPtr, false);
      return ret;
    } 
  }

  public VibranceParams vibrance {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_vibrance_set(swigCPtr, VibranceParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_vibrance_get(swigCPtr);
      VibranceParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new VibranceParams(cPtr, false);
      return ret;
    } 
  }

  public WBParams wb {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_wb_set(swigCPtr, WBParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_wb_get(swigCPtr);
      WBParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new WBParams(cPtr, false);
      return ret;
    } 
  }

  public ColorAppearanceParams colorappearance {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_colorappearance_set(swigCPtr, ColorAppearanceParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_colorappearance_get(swigCPtr);
      ColorAppearanceParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorAppearanceParams(cPtr, false);
      return ret;
    } 
  }

  public DefringeParams defringe {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_defringe_set(swigCPtr, DefringeParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_defringe_get(swigCPtr);
      DefringeParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new DefringeParams(cPtr, false);
      return ret;
    } 
  }

  public ImpulseDenoiseParams impulseDenoise {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_impulseDenoise_set(swigCPtr, ImpulseDenoiseParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_impulseDenoise_get(swigCPtr);
      ImpulseDenoiseParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImpulseDenoiseParams(cPtr, false);
      return ret;
    } 
  }

  public DirPyrDenoiseParams dirpyrDenoise {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_dirpyrDenoise_set(swigCPtr, DirPyrDenoiseParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_dirpyrDenoise_get(swigCPtr);
      DirPyrDenoiseParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new DirPyrDenoiseParams(cPtr, false);
      return ret;
    } 
  }

  public EPDParams epd {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_epd_set(swigCPtr, EPDParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_epd_get(swigCPtr);
      EPDParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new EPDParams(cPtr, false);
      return ret;
    } 
  }

  public SHParams sh {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_sh_set(swigCPtr, SHParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_sh_get(swigCPtr);
      SHParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new SHParams(cPtr, false);
      return ret;
    } 
  }

  public CropParams crop {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_crop_set(swigCPtr, CropParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_crop_get(swigCPtr);
      CropParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new CropParams(cPtr, false);
      return ret;
    } 
  }

  public CoarseTransformParams coarse {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_coarse_set(swigCPtr, CoarseTransformParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_coarse_get(swigCPtr);
      CoarseTransformParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new CoarseTransformParams(cPtr, false);
      return ret;
    } 
  }

  public CommonTransformParams commonTrans {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_commonTrans_set(swigCPtr, CommonTransformParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_commonTrans_get(swigCPtr);
      CommonTransformParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new CommonTransformParams(cPtr, false);
      return ret;
    } 
  }

  public RotateParams rotate {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_rotate_set(swigCPtr, RotateParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_rotate_get(swigCPtr);
      RotateParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new RotateParams(cPtr, false);
      return ret;
    } 
  }

  public DistortionParams distortion {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_distortion_set(swigCPtr, DistortionParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_distortion_get(swigCPtr);
      DistortionParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new DistortionParams(cPtr, false);
      return ret;
    } 
  }

  public LensProfParams lensProf {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_lensProf_set(swigCPtr, LensProfParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_lensProf_get(swigCPtr);
      LensProfParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new LensProfParams(cPtr, false);
      return ret;
    } 
  }

  public PerspectiveParams perspective {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_perspective_set(swigCPtr, PerspectiveParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_perspective_get(swigCPtr);
      PerspectiveParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new PerspectiveParams(cPtr, false);
      return ret;
    } 
  }

  public GradientParams gradient {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_gradient_set(swigCPtr, GradientParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_gradient_get(swigCPtr);
      GradientParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new GradientParams(cPtr, false);
      return ret;
    } 
  }

  public PCVignetteParams pcvignette {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_pcvignette_set(swigCPtr, PCVignetteParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_pcvignette_get(swigCPtr);
      PCVignetteParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new PCVignetteParams(cPtr, false);
      return ret;
    } 
  }

  public CACorrParams cacorrection {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_cacorrection_set(swigCPtr, CACorrParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_cacorrection_get(swigCPtr);
      CACorrParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new CACorrParams(cPtr, false);
      return ret;
    } 
  }

  public VignettingParams vignetting {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_vignetting_set(swigCPtr, VignettingParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_vignetting_get(swigCPtr);
      VignettingParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new VignettingParams(cPtr, false);
      return ret;
    } 
  }

  public ChannelMixerParams chmixer {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_chmixer_set(swigCPtr, ChannelMixerParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_chmixer_get(swigCPtr);
      ChannelMixerParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChannelMixerParams(cPtr, false);
      return ret;
    } 
  }

  public BlackWhiteParams blackwhite {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_blackwhite_set(swigCPtr, BlackWhiteParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_blackwhite_get(swigCPtr);
      BlackWhiteParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new BlackWhiteParams(cPtr, false);
      return ret;
    } 
  }

  public ResizeParams resize {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_resize_set(swigCPtr, ResizeParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_resize_get(swigCPtr);
      ResizeParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResizeParams(cPtr, false);
      return ret;
    } 
  }

  public ColorManagementParams icm {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_icm_set(swigCPtr, ColorManagementParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_icm_get(swigCPtr);
      ColorManagementParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorManagementParams(cPtr, false);
      return ret;
    } 
  }

  public RAWParams raw {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_raw_set(swigCPtr, RAWParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_raw_get(swigCPtr);
      RAWParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new RAWParams(cPtr, false);
      return ret;
    } 
  }

  public WaveletParams wavelet {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_wavelet_set(swigCPtr, WaveletParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_wavelet_get(swigCPtr);
      WaveletParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new WaveletParams(cPtr, false);
      return ret;
    } 
  }

  public DirPyrEqualizerParams dirpyrequalizer {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_dirpyrequalizer_set(swigCPtr, DirPyrEqualizerParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_dirpyrequalizer_get(swigCPtr);
      DirPyrEqualizerParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new DirPyrEqualizerParams(cPtr, false);
      return ret;
    } 
  }

  public HSVEqualizerParams hsvequalizer {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_hsvequalizer_set(swigCPtr, HSVEqualizerParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_hsvequalizer_get(swigCPtr);
      HSVEqualizerParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new HSVEqualizerParams(cPtr, false);
      return ret;
    } 
  }

  public FilmSimulationParams filmSimulation {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_filmSimulation_set(swigCPtr, FilmSimulationParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_filmSimulation_get(swigCPtr);
      FilmSimulationParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new FilmSimulationParams(cPtr, false);
      return ret;
    } 
  }

  public char rank {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_rank_set(swigCPtr, value);
    } 
    get {
      char ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_rank_get(swigCPtr);
      return ret;
    } 
  }

  public char colorlabel {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_colorlabel_set(swigCPtr, value);
    } 
    get {
      char ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_colorlabel_get(swigCPtr);
      return ret;
    } 
  }

  public bool inTrash {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_inTrash_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_inTrash_get(swigCPtr);
      return ret;
    } 
  }

  public string appVersion {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_appVersion_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_appVersion_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int ppVersion {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_ppVersion_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_ppVersion_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t exif {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_exif_set(swigCPtr, SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_exif_get(swigCPtr);
      SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_Glib__ustring_Glib__ustring_std__lessT_Glib__ustring_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t iptc {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ProcParams_iptc_set(swigCPtr, SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_iptc_get(swigCPtr);
      SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_Glib__ustring_std__vectorT_Glib__ustring_t_std__lessT_Glib__ustring_t_t(cPtr, false);
      return ret;
    } 
  }

  public ProcParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_ProcParams(), true) {
  }

  public void setDefaults() {
    libPhotoAssistantImageProcessingPINVOKE.ProcParams_setDefaults(swigCPtr);
  }

  public int save(string fname, string fname2, bool fnameAbsolute, SWIGTYPE_p_ParamsEdited pedited) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_save__SWIG_0(swigCPtr, fname, fname2, fnameAbsolute, SWIGTYPE_p_ParamsEdited.getCPtr(pedited));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save(string fname, string fname2, bool fnameAbsolute) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_save__SWIG_1(swigCPtr, fname, fname2, fnameAbsolute);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save(string fname, string fname2) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_save__SWIG_2(swigCPtr, fname, fname2);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_save__SWIG_3(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int load(string fname, SWIGTYPE_p_ParamsEdited pedited) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_load__SWIG_0(swigCPtr, fname, SWIGTYPE_p_ParamsEdited.getCPtr(pedited));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int load(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ProcParams_load__SWIG_1(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProcParams create() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ProcParams_create();
    ProcParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProcParams(cPtr, false);
    return ret;
  }

  public static void destroy(ProcParams pp) {
    libPhotoAssistantImageProcessingPINVOKE.ProcParams_destroy(ProcParams.getCPtr(pp));
  }

  public static void init() {
    libPhotoAssistantImageProcessingPINVOKE.ProcParams_init();
  }

  public static void cleanup() {
    libPhotoAssistantImageProcessingPINVOKE.ProcParams_cleanup();
  }

}

}
