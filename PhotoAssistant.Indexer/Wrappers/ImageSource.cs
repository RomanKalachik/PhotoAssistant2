//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class ImageSource : InitialImage {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ImageSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(libPhotoAssistantImageProcessingPINVOKE.ImageSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImageSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ImageSource() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_ImageSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual int load(string fname, bool batch) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_load__SWIG_0(swigCPtr, fname, batch);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int load(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_load__SWIG_1(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void preprocess(RAWParams raw, LensProfParams lensProf, CoarseTransformParams coarse) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_preprocess(swigCPtr, RAWParams.getCPtr(raw), LensProfParams.getCPtr(lensProf), CoarseTransformParams.getCPtr(coarse));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void demosaic(RAWParams raw) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_demosaic(swigCPtr, RAWParams.getCPtr(raw));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void flushRawData() {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_flushRawData(swigCPtr);
  }

  public virtual void flushRGB() {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_flushRGB(swigCPtr);
  }

  public virtual void HLRecovery_Global(ToneCurveParams hrp) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_HLRecovery_Global(swigCPtr, ToneCurveParams.getCPtr(hrp));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void HLRecovery_inpaint(SWIGTYPE_p_p_float red, SWIGTYPE_p_p_float green, SWIGTYPE_p_p_float blue) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_HLRecovery_inpaint(swigCPtr, SWIGTYPE_p_p_float.getCPtr(red), SWIGTYPE_p_p_float.getCPtr(green), SWIGTYPE_p_p_float.getCPtr(blue));
  }

  public virtual bool IsrgbSourceModified() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_IsrgbSourceModified(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_eSensorType getSensorType() {
    SWIGTYPE_p_eSensorType ret = new SWIGTYPE_p_eSensorType(libPhotoAssistantImageProcessingPINVOKE.ImageSource_getSensorType(swigCPtr), true);
    return ret;
  }

  public virtual bool isWBProviderReady() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_isWBProviderReady(swigCPtr);
    return ret;
  }

  public virtual void convertColorSpace(Imagefloat image, ColorManagementParams cmp, ColorTemp wb) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_convertColorSpace(swigCPtr, Imagefloat.getCPtr(image), ColorManagementParams.getCPtr(cmp), ColorTemp.getCPtr(wb));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getAutoWBMultipliers(SWIGTYPE_p_double rm, SWIGTYPE_p_double gm, SWIGTYPE_p_double bm) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_getAutoWBMultipliers(swigCPtr, SWIGTYPE_p_double.getCPtr(rm), SWIGTYPE_p_double.getCPtr(gm), SWIGTYPE_p_double.getCPtr(bm));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ColorTemp getWB() {
    ColorTemp ret = new ColorTemp(libPhotoAssistantImageProcessingPINVOKE.ImageSource_getWB(swigCPtr), true);
    return ret;
  }

  public virtual ColorTemp getSpotWB(SWIGTYPE_p_std__vectorT_rtengine__Coord2D_t red, SWIGTYPE_p_std__vectorT_rtengine__Coord2D_t green, SWIGTYPE_p_std__vectorT_rtengine__Coord2D_t blue, int tran, double equal) {
    ColorTemp ret = new ColorTemp(libPhotoAssistantImageProcessingPINVOKE.ImageSource_getSpotWB(swigCPtr, SWIGTYPE_p_std__vectorT_rtengine__Coord2D_t.getCPtr(red), SWIGTYPE_p_std__vectorT_rtengine__Coord2D_t.getCPtr(green), SWIGTYPE_p_std__vectorT_rtengine__Coord2D_t.getCPtr(blue), tran, equal), true);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getDefGain() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getDefGain(swigCPtr);
    return ret;
  }

  public virtual void getFullSize(SWIGTYPE_p_int w, SWIGTYPE_p_int h, int tr) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_getFullSize__SWIG_0(swigCPtr, SWIGTYPE_p_int.getCPtr(w), SWIGTYPE_p_int.getCPtr(h), tr);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getFullSize(SWIGTYPE_p_int w, SWIGTYPE_p_int h) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_getFullSize__SWIG_1(swigCPtr, SWIGTYPE_p_int.getCPtr(w), SWIGTYPE_p_int.getCPtr(h));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int getRotateDegree() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getRotateDegree(swigCPtr);
    return ret;
  }

  public virtual ImageData getImageData() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getImageData(swigCPtr);
    ImageData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageData(cPtr, false);
    return ret;
  }

  public virtual ImageMatrices getImageMatrices() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getImageMatrices(swigCPtr);
    ImageMatrices ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageMatrices(cPtr, false);
    return ret;
  }

  public virtual bool isRAW() {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_isRAW(swigCPtr);
    return ret;
  }

  public virtual DCPProfile getDCP(ColorManagementParams cmp, ColorTemp wb) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getDCP(swigCPtr, ColorManagementParams.getCPtr(cmp), ColorTemp.getCPtr(wb));
    DCPProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new DCPProfile(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setProgressListener(ProgressListener pl) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_setProgressListener(swigCPtr, ProgressListener.getCPtr(pl));
  }

  public override void increaseRef() {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_increaseRef(swigCPtr);
  }

  public override void decreaseRef() {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_decreaseRef(swigCPtr);
  }

  public virtual void getAutoExpHistogram(SWIGTYPE_p_LUTT_unsigned_int_t histogram, SWIGTYPE_p_int histcompr) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_getAutoExpHistogram(swigCPtr, SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histogram), SWIGTYPE_p_int.getCPtr(histcompr));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getRAWHistogram(SWIGTYPE_p_LUTT_unsigned_int_t histRedRaw, SWIGTYPE_p_LUTT_unsigned_int_t histGreenRaw, SWIGTYPE_p_LUTT_unsigned_int_t histBlueRaw) {
    libPhotoAssistantImageProcessingPINVOKE.ImageSource_getRAWHistogram(swigCPtr, SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histRedRaw), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histGreenRaw), SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(histBlueRaw));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getDirPyrDenoiseExpComp() {
    double ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getDirPyrDenoiseExpComp(swigCPtr);
    return ret;
  }

  public override string getFileName() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getFileName(swigCPtr);
    return ret;
  }

  public override SWIGTYPE_p_cmsHPROFILE getEmbeddedProfile() {
    SWIGTYPE_p_cmsHPROFILE ret = new SWIGTYPE_p_cmsHPROFILE(libPhotoAssistantImageProcessingPINVOKE.ImageSource_getEmbeddedProfile(swigCPtr), true);
    return ret;
  }

  public override ImageMetaData getMetaData() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getMetaData(swigCPtr);
    ImageMetaData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageMetaData(cPtr, false);
    return ret;
  }

  public override ImageSource getImageSource() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ImageSource_getImageSource(swigCPtr);
    ImageSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageSource(cPtr, false);
    return ret;
  }

}

}
