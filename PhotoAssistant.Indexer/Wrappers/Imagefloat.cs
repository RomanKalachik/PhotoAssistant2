//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class Imagefloat : IImagefloat {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Imagefloat(global::System.IntPtr cPtr, bool cMemoryOwn) : base(libPhotoAssistantImageProcessingPINVOKE.Imagefloat_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Imagefloat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Imagefloat() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_Imagefloat(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Imagefloat() : this(libPhotoAssistantImageProcessingPINVOKE.new_Imagefloat__SWIG_0(), true) {
  }

  public Imagefloat(int width, int height) : this(libPhotoAssistantImageProcessingPINVOKE.new_Imagefloat__SWIG_1(width, height), true) {
  }

  public Imagefloat copy() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_copy(swigCPtr);
    Imagefloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new Imagefloat(cPtr, false);
    return ret;
  }

  public Image8 to8() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_to8(swigCPtr);
    Image8 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image8(cPtr, false);
    return ret;
  }

  public Image16 to16() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_to16(swigCPtr);
    Image16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image16(cPtr, false);
    return ret;
  }

  public virtual string getType() {
    string ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_getType(swigCPtr);
    return ret;
  }

  public virtual int getBPS() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_getBPS(swigCPtr);
    return ret;
  }

  public virtual void getScanline(int row, SWIGTYPE_p_unsigned_char buffer, int bps) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_getScanline(swigCPtr, row, SWIGTYPE_p_unsigned_char.getCPtr(buffer), bps);
  }

  public virtual void setScanline(int row, SWIGTYPE_p_unsigned_char buffer, int bps, SWIGTYPE_p_float minValue, SWIGTYPE_p_float maxValue) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_setScanline__SWIG_0(swigCPtr, row, SWIGTYPE_p_unsigned_char.getCPtr(buffer), bps, SWIGTYPE_p_float.getCPtr(minValue), SWIGTYPE_p_float.getCPtr(maxValue));
  }

  public virtual void setScanline(int row, SWIGTYPE_p_unsigned_char buffer, int bps, SWIGTYPE_p_float minValue) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_setScanline__SWIG_1(swigCPtr, row, SWIGTYPE_p_unsigned_char.getCPtr(buffer), bps, SWIGTYPE_p_float.getCPtr(minValue));
  }

  public virtual void setScanline(int row, SWIGTYPE_p_unsigned_char buffer, int bps) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_setScanline__SWIG_2(swigCPtr, row, SWIGTYPE_p_unsigned_char.getCPtr(buffer), bps);
  }

  public override MyMutex getMutex() {
    MyMutex ret = new MyMutex(libPhotoAssistantImageProcessingPINVOKE.Imagefloat_getMutex(swigCPtr), false);
    return ret;
  }

  public override SWIGTYPE_p_cmsHPROFILE getProfile() {
    SWIGTYPE_p_cmsHPROFILE ret = new SWIGTYPE_p_cmsHPROFILE(libPhotoAssistantImageProcessingPINVOKE.Imagefloat_getProfile(swigCPtr), true);
    return ret;
  }

  public override int getBitsPerPixel() {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_getBitsPerPixel(swigCPtr);
    return ret;
  }

  public override int saveToFile(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveToFile(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsPNG(string fname, int compression, int bps) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsPNG__SWIG_0(swigCPtr, fname, compression, bps);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsPNG(string fname, int compression) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsPNG__SWIG_1(swigCPtr, fname, compression);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsPNG(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsPNG__SWIG_2(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsJPEG(string fname, int quality, int subSamp) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsJPEG__SWIG_0(swigCPtr, fname, quality, subSamp);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsJPEG(string fname, int quality) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsJPEG__SWIG_1(swigCPtr, fname, quality);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsJPEG(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsJPEG__SWIG_2(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsTIFF(string fname, int bps, bool uncompressed) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsTIFF__SWIG_0(swigCPtr, fname, bps, uncompressed);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsTIFF(string fname, int bps) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsTIFF__SWIG_1(swigCPtr, fname, bps);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int saveAsTIFF(string fname) {
    int ret = libPhotoAssistantImageProcessingPINVOKE.Imagefloat_saveAsTIFF__SWIG_2(swigCPtr, fname);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setSaveProgressListener(ProgressListener pl) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_setSaveProgressListener(swigCPtr, ProgressListener.getCPtr(pl));
  }

  public override void free() {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_free(swigCPtr);
  }

  public virtual void normalizeFloat(float srcMinVal, float srcMaxVal) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_normalizeFloat(swigCPtr, srcMinVal, srcMaxVal);
  }

  public void normalizeFloatTo1() {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_normalizeFloatTo1(swigCPtr);
  }

  public void normalizeFloatTo65535() {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_normalizeFloatTo65535(swigCPtr);
  }

  public void calcCroppedHistogram(ProcParams arg0, float scale, SWIGTYPE_p_LUTT_unsigned_int_t hist) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_calcCroppedHistogram(swigCPtr, ProcParams.getCPtr(arg0), scale, SWIGTYPE_p_LUTT_unsigned_int_t.getCPtr(hist));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExecCMSTransform(SWIGTYPE_p_cmsHTRANSFORM hTransform) {
    libPhotoAssistantImageProcessingPINVOKE.Imagefloat_ExecCMSTransform(swigCPtr, SWIGTYPE_p_cmsHTRANSFORM.getCPtr(hTransform));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
