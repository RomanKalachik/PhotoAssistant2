//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class DCPStore : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DCPStore(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DCPStore obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DCPStore() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_DCPStore(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void init(string rtProfileDir) {
    libPhotoAssistantImageProcessingPINVOKE.DCPStore_init(swigCPtr, rtProfileDir);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValidDCPFileName(string filename) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.DCPStore_isValidDCPFileName(swigCPtr, filename);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DCPProfile getProfile(string filename, bool isRTProfile) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.DCPStore_getProfile__SWIG_0(swigCPtr, filename, isRTProfile);
    DCPProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new DCPProfile(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DCPProfile getProfile(string filename) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.DCPStore_getProfile__SWIG_1(swigCPtr, filename);
    DCPProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new DCPProfile(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DCPProfile getStdProfile(string camShortName) {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.DCPStore_getStdProfile(swigCPtr, camShortName);
    DCPProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new DCPProfile(cPtr, false);
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DCPStore getInstance() {
    global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.DCPStore_getInstance();
    DCPStore ret = (cPtr == global::System.IntPtr.Zero) ? null : new DCPStore(cPtr, false);
    return ret;
  }

  public DCPStore() : this(libPhotoAssistantImageProcessingPINVOKE.new_DCPStore(), true) {
  }

}

}
