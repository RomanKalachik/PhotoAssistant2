//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class ColorManagementParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorManagementParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorManagementParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ColorManagementParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_ColorManagementParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string input {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_input_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_input_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool toneCurve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_toneCurve_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_toneCurve_get(swigCPtr);
      return ret;
    } 
  }

  public bool applyLookTable {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_applyLookTable_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_applyLookTable_get(swigCPtr);
      return ret;
    } 
  }

  public bool applyBaselineExposureOffset {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_applyBaselineExposureOffset_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_applyBaselineExposureOffset_get(swigCPtr);
      return ret;
    } 
  }

  public bool applyHueSatMap {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_applyHueSatMap_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_applyHueSatMap_get(swigCPtr);
      return ret;
    } 
  }

  public bool blendCMSMatrix {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_blendCMSMatrix_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_blendCMSMatrix_get(swigCPtr);
      return ret;
    } 
  }

  public int dcpIlluminant {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_dcpIlluminant_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_dcpIlluminant_get(swigCPtr);
      return ret;
    } 
  }

  public string working {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_working_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_working_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string output {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_output_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_output_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string NoICMString {
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_NoICMString_get();
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string gamma {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_gamma_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_gamma_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double gampos {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_gampos_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_gampos_get(swigCPtr);
      return ret;
    } 
  }

  public double slpos {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_slpos_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_slpos_get(swigCPtr);
      return ret;
    } 
  }

  public bool freegamma {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_freegamma_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_freegamma_get(swigCPtr);
      return ret;
    } 
  }

  public ColorManagementParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_ColorManagementParams(), true) {
  }

  public void setDefaults() {
    libPhotoAssistantImageProcessingPINVOKE.ColorManagementParams_setDefaults(swigCPtr);
  }

}

}
