//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class LensProfParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LensProfParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LensProfParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LensProfParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_LensProfParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string lcpFile {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LensProfParams_lcpFile_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.LensProfParams_lcpFile_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool useDist {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LensProfParams_useDist_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.LensProfParams_useDist_get(swigCPtr);
      return ret;
    } 
  }

  public bool useVign {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LensProfParams_useVign_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.LensProfParams_useVign_get(swigCPtr);
      return ret;
    } 
  }

  public bool useCA {
    set {
      libPhotoAssistantImageProcessingPINVOKE.LensProfParams_useCA_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.LensProfParams_useCA_get(swigCPtr);
      return ret;
    } 
  }

  public LensProfParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_LensProfParams(), true) {
  }

  public void setDefaults() {
    libPhotoAssistantImageProcessingPINVOKE.LensProfParams_setDefaults(swigCPtr);
  }

}

}
