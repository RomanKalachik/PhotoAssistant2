//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class ToneCurveParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ToneCurveParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ToneCurveParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ToneCurveParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_ToneCurveParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool autoexp {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_autoexp_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_autoexp_get(swigCPtr);
      return ret;
    } 
  }

  public double clip {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_clip_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_clip_get(swigCPtr);
      return ret;
    } 
  }

  public bool hrenabled {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_hrenabled_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_hrenabled_get(swigCPtr);
      return ret;
    } 
  }

  public string method {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_method_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_method_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double expcomp {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_expcomp_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_expcomp_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t curve {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curve_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curve_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t curve2 {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curve2_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curve2_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      return ret;
    } 
  }

  public ToneCurveParams.eTCModeId curveMode {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curveMode_set(swigCPtr, (int)value);
    } 
    get {
      ToneCurveParams.eTCModeId ret = (ToneCurveParams.eTCModeId)libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curveMode_get(swigCPtr);
      return ret;
    } 
  }

  public ToneCurveParams.eTCModeId curveMode2 {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curveMode2_set(swigCPtr, (int)value);
    } 
    get {
      ToneCurveParams.eTCModeId ret = (ToneCurveParams.eTCModeId)libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_curveMode2_get(swigCPtr);
      return ret;
    } 
  }

  public int brightness {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_brightness_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_brightness_get(swigCPtr);
      return ret;
    } 
  }

  public int black {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_black_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_black_get(swigCPtr);
      return ret;
    } 
  }

  public int contrast {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_contrast_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_contrast_get(swigCPtr);
      return ret;
    } 
  }

  public int saturation {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_saturation_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_saturation_get(swigCPtr);
      return ret;
    } 
  }

  public int shcompr {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_shcompr_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_shcompr_get(swigCPtr);
      return ret;
    } 
  }

  public int hlcompr {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_hlcompr_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_hlcompr_get(swigCPtr);
      return ret;
    } 
  }

  public int hlcomprthresh {
    set {
      libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_hlcomprthresh_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_hlcomprthresh_get(swigCPtr);
      return ret;
    } 
  }

  public ToneCurveParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_ToneCurveParams(), true) {
  }

  public void setDefaults() {
    libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_setDefaults(swigCPtr);
  }

  public static bool HLReconstructionNecessary(SWIGTYPE_p_LUTu histRedRaw, SWIGTYPE_p_LUTu histGreenRaw, SWIGTYPE_p_LUTu histBlueRaw) {
    bool ret = libPhotoAssistantImageProcessingPINVOKE.ToneCurveParams_HLReconstructionNecessary(SWIGTYPE_p_LUTu.getCPtr(histRedRaw), SWIGTYPE_p_LUTu.getCPtr(histGreenRaw), SWIGTYPE_p_LUTu.getCPtr(histBlueRaw));
    if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum eTCModeId {
    TC_MODE_STD,
    TC_MODE_WEIGHTEDSTD,
    TC_MODE_FILMLIKE,
    TC_MODE_SATANDVALBLENDING,
    TC_MODE_LUMINANCE,
    TC_MODE_PERCEPTUAL
  }

}

}
