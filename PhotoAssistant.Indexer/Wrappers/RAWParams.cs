//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhotoAssistant.Indexer.Wrappers {

public class RAWParams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RAWParams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RAWParams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RAWParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libPhotoAssistantImageProcessingPINVOKE.delete_RAWParams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class BayerSensor : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal BayerSensor(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BayerSensor obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~BayerSensor() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            libPhotoAssistantImageProcessingPINVOKE.delete_RAWParams_BayerSensor(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public static SWIGTYPE_p_p_char methodstring {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_methodstring_set(SWIGTYPE_p_p_char.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_methodstring_get();
        SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
        return ret;
      } 
    }
  
    public string method {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_method_set(swigCPtr, value);
        if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_method_get(swigCPtr);
        if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int ccSteps {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_ccSteps_set(swigCPtr, value);
      } 
      get {
        int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_ccSteps_get(swigCPtr);
        return ret;
      } 
    }
  
    public double black0 {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black0_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black0_get(swigCPtr);
        return ret;
      } 
    }
  
    public double black1 {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black1_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black1_get(swigCPtr);
        return ret;
      } 
    }
  
    public double black2 {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black2_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black2_get(swigCPtr);
        return ret;
      } 
    }
  
    public double black3 {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black3_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_black3_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool twogreen {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_twogreen_set(swigCPtr, value);
      } 
      get {
        bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_twogreen_get(swigCPtr);
        return ret;
      } 
    }
  
    public int linenoise {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_linenoise_set(swigCPtr, value);
      } 
      get {
        int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_linenoise_get(swigCPtr);
        return ret;
      } 
    }
  
    public int greenthresh {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_greenthresh_set(swigCPtr, value);
      } 
      get {
        int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_greenthresh_get(swigCPtr);
        return ret;
      } 
    }
  
    public int dcb_iterations {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_dcb_iterations_set(swigCPtr, value);
      } 
      get {
        int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_dcb_iterations_get(swigCPtr);
        return ret;
      } 
    }
  
    public int lmmse_iterations {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_lmmse_iterations_set(swigCPtr, value);
      } 
      get {
        int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_lmmse_iterations_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool dcb_enhance {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_dcb_enhance_set(swigCPtr, value);
      } 
      get {
        bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_BayerSensor_dcb_enhance_get(swigCPtr);
        return ret;
      } 
    }
  
    public BayerSensor() : this(libPhotoAssistantImageProcessingPINVOKE.new_RAWParams_BayerSensor(), true) {
    }
  
    public enum eMethod {
      amaze,
      igv,
      lmmse,
      eahd,
      hphd,
      vng4,
      dcb,
      ahd,
      fast,
      mono,
      none,
      numMethods
    }
  
  }

  public class XTransSensor : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal XTransSensor(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XTransSensor obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~XTransSensor() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            libPhotoAssistantImageProcessingPINVOKE.delete_RAWParams_XTransSensor(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public static SWIGTYPE_p_p_char methodstring {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_methodstring_set(SWIGTYPE_p_p_char.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_methodstring_get();
        SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
        return ret;
      } 
    }
  
    public string method {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_method_set(swigCPtr, value);
        if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_method_get(swigCPtr);
        if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int ccSteps {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_ccSteps_set(swigCPtr, value);
      } 
      get {
        int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_ccSteps_get(swigCPtr);
        return ret;
      } 
    }
  
    public double blackred {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_blackred_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_blackred_get(swigCPtr);
        return ret;
      } 
    }
  
    public double blackgreen {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_blackgreen_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_blackgreen_get(swigCPtr);
        return ret;
      } 
    }
  
    public double blackblue {
      set {
        libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_blackblue_set(swigCPtr, value);
      } 
      get {
        double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_XTransSensor_blackblue_get(swigCPtr);
        return ret;
      } 
    }
  
    public XTransSensor() : this(libPhotoAssistantImageProcessingPINVOKE.new_RAWParams_XTransSensor(), true) {
    }
  
    public enum eMethod {
      threePass,
      onePass,
      fast,
      mono,
      none,
      numMethods
    }
  
  }

  public RAWParams.BayerSensor bayersensor {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_bayersensor_set(swigCPtr, RAWParams.BayerSensor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.RAWParams_bayersensor_get(swigCPtr);
      RAWParams.BayerSensor ret = (cPtr == global::System.IntPtr.Zero) ? null : new RAWParams.BayerSensor(cPtr, false);
      return ret;
    } 
  }

  public RAWParams.XTransSensor xtranssensor {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_xtranssensor_set(swigCPtr, RAWParams.XTransSensor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.RAWParams_xtranssensor_get(swigCPtr);
      RAWParams.XTransSensor ret = (cPtr == global::System.IntPtr.Zero) ? null : new RAWParams.XTransSensor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char ff_BlurTypestring {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_BlurTypestring_set(SWIGTYPE_p_p_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_BlurTypestring_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public string dark_frame {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_dark_frame_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_dark_frame_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool df_autoselect {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_df_autoselect_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_df_autoselect_get(swigCPtr);
      return ret;
    } 
  }

  public string ff_file {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_file_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_file_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool ff_AutoSelect {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_AutoSelect_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_AutoSelect_get(swigCPtr);
      return ret;
    } 
  }

  public int ff_BlurRadius {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_BlurRadius_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_BlurRadius_get(swigCPtr);
      return ret;
    } 
  }

  public string ff_BlurType {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_BlurType_set(swigCPtr, value);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_BlurType_get(swigCPtr);
      if (libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Pending) throw libPhotoAssistantImageProcessingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool ff_AutoClipControl {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_AutoClipControl_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_AutoClipControl_get(swigCPtr);
      return ret;
    } 
  }

  public int ff_clipControl {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_clipControl_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ff_clipControl_get(swigCPtr);
      return ret;
    } 
  }

  public bool ca_autocorrect {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_ca_autocorrect_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_ca_autocorrect_get(swigCPtr);
      return ret;
    } 
  }

  public double cared {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_cared_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_cared_get(swigCPtr);
      return ret;
    } 
  }

  public double cablue {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_cablue_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_cablue_get(swigCPtr);
      return ret;
    } 
  }

  public double expos {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_expos_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_expos_get(swigCPtr);
      return ret;
    } 
  }

  public double preser {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_preser_set(swigCPtr, value);
    } 
    get {
      double ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_preser_get(swigCPtr);
      return ret;
    } 
  }

  public bool hotPixelFilter {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_hotPixelFilter_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_hotPixelFilter_get(swigCPtr);
      return ret;
    } 
  }

  public bool deadPixelFilter {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_deadPixelFilter_set(swigCPtr, value);
    } 
    get {
      bool ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_deadPixelFilter_get(swigCPtr);
      return ret;
    } 
  }

  public int hotdeadpix_thresh {
    set {
      libPhotoAssistantImageProcessingPINVOKE.RAWParams_hotdeadpix_thresh_set(swigCPtr, value);
    } 
    get {
      int ret = libPhotoAssistantImageProcessingPINVOKE.RAWParams_hotdeadpix_thresh_get(swigCPtr);
      return ret;
    } 
  }

  public RAWParams() : this(libPhotoAssistantImageProcessingPINVOKE.new_RAWParams(), true) {
  }

  public void setDefaults() {
    libPhotoAssistantImageProcessingPINVOKE.RAWParams_setDefaults(swigCPtr);
  }

  public enum eFlatFileBlurType {
    area_ff,
    v_ff,
    h_ff,
    vh_ff,
    numFlatFileBlurTypes
  }

}

}
